
DT_IR_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f74  08005f74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f74  08005f74  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f74  08005f74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f78  08005f78  00015f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000000c  08005f88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08005f88  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001345e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000263b  00000000  00000000  00033492  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001460  00000000  00000000  00035ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001328  00000000  00000000  00036f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000029ff  00000000  00000000  00038258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f8c1  00000000  00000000  0003ac57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009327b  00000000  00000000  0004a518  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd793  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae4  00000000  00000000  000dd810  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005e98 	.word	0x08005e98

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005e98 	.word	0x08005e98

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fe1a 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f81e 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 fa78 	bl	80008ec <MX_GPIO_Init>
  MX_ADC1_Init();
 80003fc:	f000 f882 	bl	8000504 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000400:	f000 f8ec 	bl	80005dc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000404:	f000 f92a 	bl	800065c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000408:	f000 f966 	bl	80006d8 <MX_TIM3_Init>
  MX_TIM15_Init();
 800040c:	f000 f9c6 	bl	800079c <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8000410:	f000 fa1e 	bl	8000850 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <main+0x40>)
 8000416:	2100      	movs	r1, #0
 8000418:	0018      	movs	r0, r3
 800041a:	f003 fc13 	bl	8003c44 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE END WHtrigger_button_statusILE */

	  	  if( trigger_button_status == 1)
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <main+0x44>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d1fb      	bne.n	800041e <main+0x32>
	  	  {
	  		  power_up();
 8000426:	f000 fb2f 	bl	8000a88 <power_up>
	  	  if( trigger_button_status == 1)
 800042a:	e7f8      	b.n	800041e <main+0x32>
 800042c:	200000b4 	.word	0x200000b4
 8000430:	200001e4 	.word	0x200001e4

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b099      	sub	sp, #100	; 0x64
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	242c      	movs	r4, #44	; 0x2c
 800043c:	193b      	adds	r3, r7, r4
 800043e:	0018      	movs	r0, r3
 8000440:	2334      	movs	r3, #52	; 0x34
 8000442:	001a      	movs	r2, r3
 8000444:	2100      	movs	r1, #0
 8000446:	f005 fd1f 	bl	8005e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044a:	231c      	movs	r3, #28
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	0018      	movs	r0, r3
 8000450:	2310      	movs	r3, #16
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f005 fd17 	bl	8005e88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045a:	003b      	movs	r3, r7
 800045c:	0018      	movs	r0, r3
 800045e:	231c      	movs	r3, #28
 8000460:	001a      	movs	r2, r3
 8000462:	2100      	movs	r1, #0
 8000464:	f005 fd10 	bl	8005e88 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	0018      	movs	r0, r3
 800046e:	f002 fcb5 	bl	8002ddc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000472:	193b      	adds	r3, r7, r4
 8000474:	2202      	movs	r2, #2
 8000476:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	0052      	lsls	r2, r2, #1
 800047e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000480:	193b      	adds	r3, r7, r4
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2240      	movs	r2, #64	; 0x40
 800048a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000492:	193b      	adds	r3, r7, r4
 8000494:	0018      	movs	r0, r3
 8000496:	f002 fced 	bl	8002e74 <HAL_RCC_OscConfig>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800049e:	f000 fb21 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	211c      	movs	r1, #28
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2207      	movs	r2, #7
 80004a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2200      	movs	r2, #0
 80004ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2100      	movs	r1, #0
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 ffed 	bl	80034a0 <HAL_RCC_ClockConfig>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004ca:	f000 fb0b 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80004ce:	003b      	movs	r3, r7
 80004d0:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <SystemClock_Config+0xcc>)
 80004d2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004d4:	003b      	movs	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80004da:	003b      	movs	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e6:	003b      	movs	r3, r7
 80004e8:	0018      	movs	r0, r3
 80004ea:	f003 f983 	bl	80037f4 <HAL_RCCEx_PeriphCLKConfig>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80004f2:	f000 faf7 	bl	8000ae4 <Error_Handler>
  }
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b019      	add	sp, #100	; 0x64
 80004fc:	bd90      	pop	{r4, r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	00004041 	.word	0x00004041

08000504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	230c      	movs	r3, #12
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f005 fcb8 	bl	8005e88 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000518:	4b2d      	ldr	r3, [pc, #180]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800051a:	4a2e      	ldr	r2, [pc, #184]	; (80005d4 <MX_ADC1_Init+0xd0>)
 800051c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	05d2      	lsls	r2, r2, #23
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000532:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800053a:	2204      	movs	r2, #4
 800053c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800053e:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000540:	2200      	movs	r2, #0
 8000542:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000546:	2200      	movs	r2, #0
 8000548:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800054a:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800054c:	2200      	movs	r2, #0
 800054e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000552:	2201      	movs	r2, #1
 8000554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000558:	2220      	movs	r2, #32
 800055a:	2100      	movs	r1, #0
 800055c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000560:	2200      	movs	r2, #0
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000566:	2200      	movs	r2, #0
 8000568:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800056c:	222c      	movs	r2, #44	; 0x2c
 800056e:	2100      	movs	r1, #0
 8000570:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000574:	2200      	movs	r2, #0
 8000576:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800057a:	2200      	movs	r2, #0
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000580:	2200      	movs	r2, #0
 8000582:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000586:	223c      	movs	r2, #60	; 0x3c
 8000588:	2100      	movs	r1, #0
 800058a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800058e:	2200      	movs	r2, #0
 8000590:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000594:	0018      	movs	r0, r3
 8000596:	f000 feb3 	bl	8001300 <HAL_ADC_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800059e:	f000 faa1 	bl	8000ae4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <MX_ADC1_Init+0xd4>)
 80005a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b4:	1d3a      	adds	r2, r7, #4
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_ADC1_Init+0xcc>)
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f001 f876 	bl	80016ac <HAL_ADC_ConfigChannel>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80005c4:	f000 fa8e 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b004      	add	sp, #16
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000f4 	.word	0x200000f4
 80005d4:	40012400 	.word	0x40012400
 80005d8:	08000004 	.word	0x08000004

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_I2C1_Init+0x74>)
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <MX_I2C1_Init+0x78>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_I2C1_Init+0x74>)
 80005e8:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <MX_I2C1_Init+0x7c>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_I2C1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_I2C1_Init+0x74>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_I2C1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_I2C1_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_I2C1_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_I2C1_Init+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_I2C1_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_I2C1_Init+0x74>)
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fd45 	bl	80020a8 <HAL_I2C_Init>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000622:	f000 fa5f 	bl	8000ae4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_I2C1_Init+0x74>)
 8000628:	2100      	movs	r1, #0
 800062a:	0018      	movs	r0, r3
 800062c:	f002 fb3e 	bl	8002cac <HAL_I2CEx_ConfigAnalogFilter>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000634:	f000 fa56 	bl	8000ae4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <MX_I2C1_Init+0x74>)
 800063a:	2100      	movs	r1, #0
 800063c:	0018      	movs	r0, r3
 800063e:	f002 fb81 	bl	8002d44 <HAL_I2CEx_ConfigDigitalFilter>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000646:	f000 fa4d 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000028 	.word	0x20000028
 8000654:	40005400 	.word	0x40005400
 8000658:	0010061a 	.word	0x0010061a

0800065c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000662:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <MX_SPI1_Init+0x78>)
 8000664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000668:	2282      	movs	r2, #130	; 0x82
 800066a:	0052      	lsls	r2, r2, #1
 800066c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000676:	22c0      	movs	r2, #192	; 0xc0
 8000678:	0092      	lsls	r2, r2, #2
 800067a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_SPI1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_SPI1_Init+0x74>)
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	02d2      	lsls	r2, r2, #11
 800068e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000692:	2218      	movs	r2, #24
 8000694:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_SPI1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_SPI1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_SPI1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_SPI1_Init+0x74>)
 80006aa:	2207      	movs	r2, #7
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_SPI1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_SPI1_Init+0x74>)
 80006b6:	2208      	movs	r2, #8
 80006b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MX_SPI1_Init+0x74>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f003 f9cf 	bl	8003a60 <HAL_SPI_Init>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006c6:	f000 fa0d 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200001e8 	.word	0x200001e8
 80006d4:	40013000 	.word	0x40013000

080006d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006de:	231c      	movs	r3, #28
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	0018      	movs	r0, r3
 80006e4:	230c      	movs	r3, #12
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f005 fbcd 	bl	8005e88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ee:	003b      	movs	r3, r7
 80006f0:	0018      	movs	r0, r3
 80006f2:	231c      	movs	r3, #28
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f005 fbc6 	bl	8005e88 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <MX_TIM3_Init+0xb8>)
 80006fe:	4a25      	ldr	r2, [pc, #148]	; (8000794 <MX_TIM3_Init+0xbc>)
 8000700:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 984-1;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_TIM3_Init+0xb8>)
 8000704:	4a24      	ldr	r2, [pc, #144]	; (8000798 <MX_TIM3_Init+0xc0>)
 8000706:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <MX_TIM3_Init+0xb8>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_TIM3_Init+0xb8>)
 8000710:	22fe      	movs	r2, #254	; 0xfe
 8000712:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_TIM3_Init+0xb8>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_TIM3_Init+0xb8>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_TIM3_Init+0xb8>)
 8000722:	0018      	movs	r0, r3
 8000724:	f003 fa62 	bl	8003bec <HAL_TIM_PWM_Init>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800072c:	f000 f9da 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000730:	211c      	movs	r1, #28
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800073e:	187a      	adds	r2, r7, r1
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_TIM3_Init+0xb8>)
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f004 f9e3 	bl	8004b10 <HAL_TIMEx_MasterConfigSynchronization>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800074e:	f000 f9c9 	bl	8000ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000752:	003b      	movs	r3, r7
 8000754:	2260      	movs	r2, #96	; 0x60
 8000756:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000758:	003b      	movs	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075e:	003b      	movs	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000764:	003b      	movs	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800076a:	0039      	movs	r1, r7
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_TIM3_Init+0xb8>)
 800076e:	2200      	movs	r2, #0
 8000770:	0018      	movs	r0, r3
 8000772:	f003 fbed 	bl	8003f50 <HAL_TIM_PWM_ConfigChannel>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800077a:	f000 f9b3 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <MX_TIM3_Init+0xb8>)
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fb0b 	bl	8000d9c <HAL_TIM_MspPostInit>

}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b00a      	add	sp, #40	; 0x28
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	200000b4 	.word	0x200000b4
 8000794:	40000400 	.word	0x40000400
 8000798:	000003d7 	.word	0x000003d7

0800079c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	2310      	movs	r3, #16
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	0018      	movs	r0, r3
 80007a8:	2310      	movs	r3, #16
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f005 fb6b 	bl	8005e88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	0018      	movs	r0, r3
 80007b6:	230c      	movs	r3, #12
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	f005 fb64 	bl	8005e88 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80007c0:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_TIM15_Init+0xa8>)
 80007c2:	4a21      	ldr	r2, [pc, #132]	; (8000848 <MX_TIM15_Init+0xac>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16000;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_TIM15_Init+0xa8>)
 80007c8:	22fa      	movs	r2, #250	; 0xfa
 80007ca:	0192      	lsls	r2, r2, #6
 80007cc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_TIM15_Init+0xa8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_TIM15_Init+0xa8>)
 80007d6:	4a1d      	ldr	r2, [pc, #116]	; (800084c <MX_TIM15_Init+0xb0>)
 80007d8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_TIM15_Init+0xa8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_TIM15_Init+0xa8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_TIM15_Init+0xa8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_TIM15_Init+0xa8>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f003 f9d0 	bl	8003b94 <HAL_TIM_Base_Init>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM15_Init+0x60>
  {
    Error_Handler();
 80007f8:	f000 f974 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fc:	2110      	movs	r1, #16
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	0152      	lsls	r2, r2, #5
 8000804:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000806:	187a      	adds	r2, r7, r1
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_TIM15_Init+0xa8>)
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f003 fc9d 	bl	800414c <HAL_TIM_ConfigClockSource>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000816:	f000 f965 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000826:	1d3a      	adds	r2, r7, #4
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_TIM15_Init+0xa8>)
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f004 f96f 	bl	8004b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8000836:	f000 f955 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b008      	add	sp, #32
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	20000074 	.word	0x20000074
 8000848:	40014000 	.word	0x40014000
 800084c:	00004e20 	.word	0x00004e20

08000850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000854:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 8000856:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <MX_USART1_UART_Init+0x98>)
 8000858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 800085c:	22e1      	movs	r2, #225	; 0xe1
 800085e:	0252      	lsls	r2, r2, #9
 8000860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	0552      	lsls	r2, r2, #21
 8000868:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 8000878:	220c      	movs	r2, #12
 800087a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 800089c:	0018      	movs	r0, r3
 800089e:	f004 f9a5 	bl	8004bec <HAL_UART_Init>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80008a6:	f000 f91d 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 80008ac:	2100      	movs	r1, #0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f005 f9da 	bl	8005c68 <HAL_UARTEx_SetTxFifoThreshold>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80008b8:	f000 f914 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 80008be:	2100      	movs	r1, #0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f005 fa11 	bl	8005ce8 <HAL_UARTEx_SetRxFifoThreshold>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80008ca:	f000 f90b 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f005 f98f 	bl	8005bf4 <HAL_UARTEx_DisableFifoMode>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80008da:	f000 f903 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000158 	.word	0x20000158
 80008e8:	40013800 	.word	0x40013800

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	240c      	movs	r4, #12
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	0018      	movs	r0, r3
 80008f8:	2314      	movs	r3, #20
 80008fa:	001a      	movs	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	f005 fac3 	bl	8005e88 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b5d      	ldr	r3, [pc, #372]	; (8000a78 <MX_GPIO_Init+0x18c>)
 8000904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000906:	4b5c      	ldr	r3, [pc, #368]	; (8000a78 <MX_GPIO_Init+0x18c>)
 8000908:	2101      	movs	r1, #1
 800090a:	430a      	orrs	r2, r1
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
 800090e:	4b5a      	ldr	r3, [pc, #360]	; (8000a78 <MX_GPIO_Init+0x18c>)
 8000910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000912:	2201      	movs	r2, #1
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b57      	ldr	r3, [pc, #348]	; (8000a78 <MX_GPIO_Init+0x18c>)
 800091c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091e:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <MX_GPIO_Init+0x18c>)
 8000920:	2102      	movs	r1, #2
 8000922:	430a      	orrs	r2, r1
 8000924:	635a      	str	r2, [r3, #52]	; 0x34
 8000926:	4b54      	ldr	r3, [pc, #336]	; (8000a78 <MX_GPIO_Init+0x18c>)
 8000928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800092a:	2202      	movs	r2, #2
 800092c:	4013      	ands	r3, r2
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b51      	ldr	r3, [pc, #324]	; (8000a78 <MX_GPIO_Init+0x18c>)
 8000934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000936:	4b50      	ldr	r3, [pc, #320]	; (8000a78 <MX_GPIO_Init+0x18c>)
 8000938:	2104      	movs	r1, #4
 800093a:	430a      	orrs	r2, r1
 800093c:	635a      	str	r2, [r3, #52]	; 0x34
 800093e:	4b4e      	ldr	r3, [pc, #312]	; (8000a78 <MX_GPIO_Init+0x18c>)
 8000940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000942:	2204      	movs	r2, #4
 8000944:	4013      	ands	r3, r2
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 800094a:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <MX_GPIO_Init+0x190>)
 800094c:	2200      	movs	r2, #0
 800094e:	2104      	movs	r1, #4
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fb58 	bl	8002006 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|LED_Pin|CHARGE_DETECT_Pin, GPIO_PIN_RESET);
 8000956:	23c8      	movs	r3, #200	; 0xc8
 8000958:	0159      	lsls	r1, r3, #5
 800095a:	23a0      	movs	r3, #160	; 0xa0
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	2200      	movs	r2, #0
 8000960:	0018      	movs	r0, r3
 8000962:	f001 fb50 	bl	8002006 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000966:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <MX_GPIO_Init+0x194>)
 8000968:	2200      	movs	r2, #0
 800096a:	2140      	movs	r1, #64	; 0x40
 800096c:	0018      	movs	r0, r3
 800096e:	f001 fb4a 	bl	8002006 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIGGER_BUTTON_Pin */
  GPIO_InitStruct.Pin = TRIGGER_BUTTON_Pin;
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2201      	movs	r2, #1
 8000976:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TRIGGER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000984:	193a      	adds	r2, r7, r4
 8000986:	23a0      	movs	r3, #160	; 0xa0
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f001 f9b9 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2212      	movs	r2, #18
 8000996:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	4a3a      	ldr	r2, [pc, #232]	; (8000a84 <MX_GPIO_Init+0x198>)
 800099c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	193a      	adds	r2, r7, r4
 80009a6:	23a0      	movs	r3, #160	; 0xa0
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 f9a9 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : RES_Pin */
  GPIO_InitStruct.Pin = RES_Pin;
 80009b2:	0021      	movs	r1, r4
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2204      	movs	r2, #4
 80009b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2201      	movs	r2, #1
 80009be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RES_GPIO_Port, &GPIO_InitStruct);
 80009cc:	000c      	movs	r4, r1
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	4a2a      	ldr	r2, [pc, #168]	; (8000a7c <MX_GPIO_Init+0x190>)
 80009d2:	0019      	movs	r1, r3
 80009d4:	0010      	movs	r0, r2
 80009d6:	f001 f995 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin LED_Pin CHARGE_DETECT_Pin */
  GPIO_InitStruct.Pin = DC_Pin|LED_Pin|CHARGE_DETECT_Pin;
 80009da:	0021      	movs	r1, r4
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	22c8      	movs	r2, #200	; 0xc8
 80009e0:	0152      	lsls	r2, r2, #5
 80009e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2201      	movs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	000c      	movs	r4, r1
 80009f8:	187a      	adds	r2, r7, r1
 80009fa:	23a0      	movs	r3, #160	; 0xa0
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 f97f 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a06:	0021      	movs	r1, r4
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2240      	movs	r2, #64	; 0x40
 8000a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2201      	movs	r2, #1
 8000a12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	000c      	movs	r4, r1
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <MX_GPIO_Init+0x194>)
 8000a26:	0019      	movs	r1, r3
 8000a28:	0010      	movs	r0, r2
 8000a2a:	f001 f96b 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
 8000a2e:	0021      	movs	r1, r4
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	0052      	lsls	r2, r2, #1
 8000a36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_GPIO_Init+0x198>)
 8000a3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <MX_GPIO_Init+0x190>)
 8000a48:	0019      	movs	r1, r3
 8000a4a:	0010      	movs	r0, r2
 8000a4c:	f001 f95a 	bl	8001d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2005      	movs	r0, #5
 8000a56:	f001 f8a9 	bl	8001bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a5a:	2005      	movs	r0, #5
 8000a5c:	f001 f8bb 	bl	8001bd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2007      	movs	r0, #7
 8000a66:	f001 f8a1 	bl	8001bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a6a:	2007      	movs	r0, #7
 8000a6c:	f001 f8b3 	bl	8001bd6 <HAL_NVIC_EnableIRQ>

}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b009      	add	sp, #36	; 0x24
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	50000400 	.word	0x50000400
 8000a80:	50000800 	.word	0x50000800
 8000a84:	10110000 	.word	0x10110000

08000a88 <power_up>:
 *Param [out]	:void
 *Param [ret]	:void
 */

void power_up(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
		HAL_I2C_Init(&hi2c1);
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <power_up+0x2c>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 fb0a 	bl	80020a8 <HAL_I2C_Init>
		HAL_SPI_Init(&hspi1);
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <power_up+0x30>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f002 ffe2 	bl	8003a60 <HAL_SPI_Init>
		HAL_UART_Init(&huart1);
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <power_up+0x34>)
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f004 f8a4 	bl	8004bec <HAL_UART_Init>
		HAL_ADC_Init(&hadc1);
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <power_up+0x38>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fc2a 	bl	8001300 <HAL_ADC_Init>
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	20000028 	.word	0x20000028
 8000ab8:	200001e8 	.word	0x200001e8
 8000abc:	20000158 	.word	0x20000158
 8000ac0:	200000f4 	.word	0x200000f4

08000ac4 <HAL_GPIO_EXTI_Falling_Callback>:
	HAL_UART_DeInit(&huart1);
	HAL_ADC_DeInit(&hadc1);
}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	0002      	movs	r2, r0
 8000acc:	1dbb      	adds	r3, r7, #6
 8000ace:	801a      	strh	r2, [r3, #0]
	trigger_button_status = 1;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_GPIO_EXTI_Falling_Callback+0x1c>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b002      	add	sp, #8
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	200001e4 	.word	0x200001e4

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_MspInit+0x44>)
 8000af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_MspInit+0x44>)
 8000afc:	2101      	movs	r1, #1
 8000afe:	430a      	orrs	r2, r1
 8000b00:	641a      	str	r2, [r3, #64]	; 0x40
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_MspInit+0x44>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	2201      	movs	r2, #1
 8000b08:	4013      	ands	r3, r2
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x44>)
 8000b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_MspInit+0x44>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	0549      	lsls	r1, r1, #21
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_MspInit+0x44>)
 8000b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	055b      	lsls	r3, r3, #21
 8000b24:	4013      	ands	r3, r2
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	2314      	movs	r3, #20
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	0018      	movs	r0, r3
 8000b46:	2314      	movs	r3, #20
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f005 f99c 	bl	8005e88 <memset>
  if(hadc->Instance==ADC1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a18      	ldr	r2, [pc, #96]	; (8000bb8 <HAL_ADC_MspInit+0x80>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12a      	bne.n	8000bb0 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_ADC_MspInit+0x84>)
 8000b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_ADC_MspInit+0x84>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	0349      	lsls	r1, r1, #13
 8000b64:	430a      	orrs	r2, r1
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_ADC_MspInit+0x84>)
 8000b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	035b      	lsls	r3, r3, #13
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_ADC_MspInit+0x84>)
 8000b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_ADC_MspInit+0x84>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_ADC_MspInit+0x84>)
 8000b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b86:	2201      	movs	r2, #1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = BATTERY_MONITOR_Pin;
 8000b8e:	2114      	movs	r1, #20
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2204      	movs	r2, #4
 8000b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BATTERY_MONITOR_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	187a      	adds	r2, r7, r1
 8000ba4:	23a0      	movs	r3, #160	; 0xa0
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	0011      	movs	r1, r2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f001 f8aa 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b00a      	add	sp, #40	; 0x28
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40012400 	.word	0x40012400
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	2314      	movs	r3, #20
 8000bca:	18fb      	adds	r3, r7, r3
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2314      	movs	r3, #20
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f005 f958 	bl	8005e88 <memset>
  if(hi2c->Instance==I2C1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a20      	ldr	r2, [pc, #128]	; (8000c60 <HAL_I2C_MspInit+0xa0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d139      	bne.n	8000c56 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <HAL_I2C_MspInit+0xa4>)
 8000be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_I2C_MspInit+0xa4>)
 8000be8:	2101      	movs	r1, #1
 8000bea:	430a      	orrs	r2, r1
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_I2C_MspInit+0xa4>)
 8000bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bfa:	2114      	movs	r1, #20
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	22c0      	movs	r2, #192	; 0xc0
 8000c00:	00d2      	lsls	r2, r2, #3
 8000c02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2212      	movs	r2, #18
 8000c08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2206      	movs	r2, #6
 8000c1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	187a      	adds	r2, r7, r1
 8000c1e:	23a0      	movs	r3, #160	; 0xa0
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f001 f86d 	bl	8001d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_I2C_MspInit+0xa4>)
 8000c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_I2C_MspInit+0xa4>)
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	0389      	lsls	r1, r1, #14
 8000c34:	430a      	orrs	r2, r1
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_I2C_MspInit+0xa4>)
 8000c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	039b      	lsls	r3, r3, #14
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2017      	movs	r0, #23
 8000c4c:	f000 ffae 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000c50:	2017      	movs	r0, #23
 8000c52:	f000 ffc0 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b00a      	add	sp, #40	; 0x28
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40005400 	.word	0x40005400
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	2314      	movs	r3, #20
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	0018      	movs	r0, r3
 8000c76:	2314      	movs	r3, #20
 8000c78:	001a      	movs	r2, r3
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	f005 f904 	bl	8005e88 <memset>
  if(hspi->Instance==SPI1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1b      	ldr	r2, [pc, #108]	; (8000cf4 <HAL_SPI_MspInit+0x8c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d12f      	bne.n	8000cea <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <HAL_SPI_MspInit+0x90>)
 8000c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <HAL_SPI_MspInit+0x90>)
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	0149      	lsls	r1, r1, #5
 8000c94:	430a      	orrs	r2, r1
 8000c96:	641a      	str	r2, [r3, #64]	; 0x40
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_SPI_MspInit+0x90>)
 8000c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	015b      	lsls	r3, r3, #5
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_SPI_MspInit+0x90>)
 8000ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_SPI_MspInit+0x90>)
 8000cac:	2102      	movs	r1, #2
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_SPI_MspInit+0x90>)
 8000cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000cbe:	2114      	movs	r1, #20
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2239      	movs	r2, #57	; 0x39
 8000cc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2202      	movs	r2, #2
 8000cca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_SPI_MspInit+0x94>)
 8000ce2:	0019      	movs	r1, r3
 8000ce4:	0010      	movs	r0, r2
 8000ce6:	f001 f80d 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b00a      	add	sp, #40	; 0x28
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	40013000 	.word	0x40013000
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	50000400 	.word	0x50000400

08000d00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_TIM_PWM_MspInit+0x44>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d113      	bne.n	8000d3a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_TIM_PWM_MspInit+0x48>)
 8000d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_TIM_PWM_MspInit+0x48>)
 8000d18:	2102      	movs	r1, #2
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_TIM_PWM_MspInit+0x48>)
 8000d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d22:	2202      	movs	r2, #2
 8000d24:	4013      	ands	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2010      	movs	r0, #16
 8000d30:	f000 ff3c 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d34:	2010      	movs	r0, #16
 8000d36:	f000 ff4e 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	40000400 	.word	0x40000400
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <HAL_TIM_Base_MspInit+0x48>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d115      	bne.n	8000d8a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_TIM_Base_MspInit+0x4c>)
 8000d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_TIM_Base_MspInit+0x4c>)
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	0249      	lsls	r1, r1, #9
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_TIM_Base_MspInit+0x4c>)
 8000d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	025b      	lsls	r3, r3, #9
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2014      	movs	r0, #20
 8000d80:	f000 ff14 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8000d84:	2014      	movs	r0, #20
 8000d86:	f000 ff26 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b004      	add	sp, #16
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	40014000 	.word	0x40014000
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	230c      	movs	r3, #12
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	0018      	movs	r0, r3
 8000daa:	2314      	movs	r3, #20
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f005 f86a 	bl	8005e88 <memset>
  if(htim->Instance==TIM3)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_TIM_MspPostInit+0x70>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d122      	bne.n	8000e04 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_TIM_MspPostInit+0x74>)
 8000dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <HAL_TIM_MspPostInit+0x74>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_TIM_MspPostInit+0x74>)
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8000dd6:	210c      	movs	r1, #12
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2240      	movs	r2, #64	; 0x40
 8000ddc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2202      	movs	r2, #2
 8000de2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2201      	movs	r2, #1
 8000df4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000df6:	187a      	adds	r2, r7, r1
 8000df8:	23a0      	movs	r3, #160	; 0xa0
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f000 ff80 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b008      	add	sp, #32
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40000400 	.word	0x40000400
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	2314      	movs	r3, #20
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	0018      	movs	r0, r3
 8000e22:	2314      	movs	r3, #20
 8000e24:	001a      	movs	r2, r3
 8000e26:	2100      	movs	r1, #0
 8000e28:	f005 f82e 	bl	8005e88 <memset>
  if(huart->Instance==USART1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a1f      	ldr	r2, [pc, #124]	; (8000eb0 <HAL_UART_MspInit+0x9c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d137      	bne.n	8000ea6 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <HAL_UART_MspInit+0xa0>)
 8000e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <HAL_UART_MspInit+0xa0>)
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	01c9      	lsls	r1, r1, #7
 8000e40:	430a      	orrs	r2, r1
 8000e42:	641a      	str	r2, [r3, #64]	; 0x40
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_UART_MspInit+0xa0>)
 8000e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	01db      	lsls	r3, r3, #7
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_UART_MspInit+0xa0>)
 8000e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0xa0>)
 8000e58:	2102      	movs	r1, #2
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_UART_MspInit+0xa0>)
 8000e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e62:	2202      	movs	r2, #2
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e6a:	2114      	movs	r1, #20
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	22c0      	movs	r2, #192	; 0xc0
 8000e70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2202      	movs	r2, #2
 8000e76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_UART_MspInit+0xa4>)
 8000e8e:	0019      	movs	r1, r3
 8000e90:	0010      	movs	r0, r2
 8000e92:	f000 ff37 	bl	8001d04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	201b      	movs	r0, #27
 8000e9c:	f000 fe86 	bl	8001bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ea0:	201b      	movs	r0, #27
 8000ea2:	f000 fe98 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b00a      	add	sp, #40	; 0x28
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	40013800 	.word	0x40013800
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	50000400 	.word	0x50000400

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee4:	f000 f90a 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

HAL_GPIO_ReadPin(UP_GPIO_Port,UP_Pin);
 8000ef2:	23a0      	movs	r3, #160	; 0xa0
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f001 f867 	bl	8001fcc <HAL_GPIO_ReadPin>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000efe:	2002      	movs	r0, #2
 8000f00:	f001 f89e 	bl	8002040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	HAL_GPIO_ReadPin(DOWN_GPIO_Port,DOWN_Pin);
 8000f10:	23a0      	movs	r3, #160	; 0xa0
 8000f12:	05db      	lsls	r3, r3, #23
 8000f14:	2110      	movs	r1, #16
 8000f16:	0018      	movs	r0, r3
 8000f18:	f001 f858 	bl	8001fcc <HAL_GPIO_ReadPin>
	HAL_GPIO_ReadPin(MODE_GPIO_Port,MODE_Pin);
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <EXTI4_15_IRQHandler+0x34>)
 8000f22:	0019      	movs	r1, r3
 8000f24:	0010      	movs	r0, r2
 8000f26:	f001 f851 	bl	8001fcc <HAL_GPIO_ReadPin>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000f2a:	2010      	movs	r0, #16
 8000f2c:	f001 f888 	bl	8002040 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	0018      	movs	r0, r3
 8000f36:	f001 f883 	bl	8002040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	50000400 	.word	0x50000400

08000f44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <TIM3_IRQHandler+0x14>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f002 fece 	bl	8003cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	200000b4 	.word	0x200000b4

08000f5c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <TIM15_IRQHandler+0x14>)
 8000f62:	0018      	movs	r0, r3
 8000f64:	f002 fec2 	bl	8003cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	20000074 	.word	0x20000074

08000f74 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <I2C1_IRQHandler+0x2c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	699a      	ldr	r2, [r3, #24]
 8000f7e:	23e0      	movs	r3, #224	; 0xe0
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4013      	ands	r3, r2
 8000f84:	d004      	beq.n	8000f90 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <I2C1_IRQHandler+0x2c>)
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f001 f93d 	bl	8002208 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000f8e:	e003      	b.n	8000f98 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <I2C1_IRQHandler+0x2c>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f001 f91e 	bl	80021d4 <HAL_I2C_EV_IRQHandler>
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	20000028 	.word	0x20000028

08000fa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <USART1_IRQHandler+0x14>)
 8000faa:	0018      	movs	r0, r3
 8000fac:	f003 fe74 	bl	8004c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	20000158 	.word	0x20000158

08000fbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <SystemInit+0x14>)
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	0512      	lsls	r2, r2, #20
 8000fc6:	609a      	str	r2, [r3, #8]
#endif
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fd8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fda:	e003      	b.n	8000fe4 <LoopCopyDataInit>

08000fdc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000fde:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fe0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fe2:	3104      	adds	r1, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <LoopForever+0xa>)
  ldr r3, =_edata
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <LoopForever+0xe>)
  adds r2, r0, r1
 8000fe8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fec:	d3f6      	bcc.n	8000fdc <CopyDataInit>
  ldr r2, =_sbss
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <LoopForever+0x12>)
  b LoopFillZerobss
 8000ff0:	e002      	b.n	8000ff8 <LoopFillZerobss>

08000ff2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ff4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff6:	3204      	adds	r2, #4

08000ff8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <LoopForever+0x16>)
  cmp r2, r3
 8000ffa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ffc:	d3f9      	bcc.n	8000ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ffe:	f7ff ffdd 	bl	8000fbc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001002:	f004 ff1d 	bl	8005e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001006:	f7ff f9f1 	bl	80003ec <main>

0800100a <LoopForever>:

LoopForever:
    b LoopForever
 800100a:	e7fe      	b.n	800100a <LoopForever>
  ldr   r0, =_estack
 800100c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8001010:	08005f7c 	.word	0x08005f7c
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001018:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800101c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001020:	20000250 	.word	0x20000250

08001024 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_IRQHandler>
	...

08001028 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_Init+0x3c>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Init+0x3c>)
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	0049      	lsls	r1, r1, #1
 800103e:	430a      	orrs	r2, r1
 8001040:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f810 	bl	8001068 <HAL_InitTick>
 8001048:	1e03      	subs	r3, r0, #0
 800104a:	d003      	beq.n	8001054 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	e001      	b.n	8001058 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff fd4c 	bl	8000af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
}
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001070:	230f      	movs	r3, #15
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_InitTick+0x88>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d02b      	beq.n	80010d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_InitTick+0x8c>)
 8001082:	681c      	ldr	r4, [r3, #0]
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <HAL_InitTick+0x88>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	0019      	movs	r1, r3
 800108a:	23fa      	movs	r3, #250	; 0xfa
 800108c:	0098      	lsls	r0, r3, #2
 800108e:	f7ff f837 	bl	8000100 <__udivsi3>
 8001092:	0003      	movs	r3, r0
 8001094:	0019      	movs	r1, r3
 8001096:	0020      	movs	r0, r4
 8001098:	f7ff f832 	bl	8000100 <__udivsi3>
 800109c:	0003      	movs	r3, r0
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 fda9 	bl	8001bf6 <HAL_SYSTICK_Config>
 80010a4:	1e03      	subs	r3, r0, #0
 80010a6:	d112      	bne.n	80010ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d80a      	bhi.n	80010c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	2301      	movs	r3, #1
 80010b2:	425b      	negs	r3, r3
 80010b4:	2200      	movs	r2, #0
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 fd78 	bl	8001bac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_InitTick+0x90>)
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	e00d      	b.n	80010e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010c4:	230f      	movs	r3, #15
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	e008      	b.n	80010e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ce:	230f      	movs	r3, #15
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e003      	b.n	80010e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d8:	230f      	movs	r3, #15
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010e0:	230f      	movs	r3, #15
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	781b      	ldrb	r3, [r3, #0]
}
 80010e6:	0018      	movs	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b005      	add	sp, #20
 80010ec:	bd90      	pop	{r4, r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <HAL_IncTick+0x18>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HAL_IncTick+0x1c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	18d2      	adds	r2, r2, r3
 800110a:	4b02      	ldr	r3, [pc, #8]	; (8001114 <HAL_IncTick+0x18>)
 800110c:	601a      	str	r2, [r3, #0]
}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000024c 	.word	0x2000024c
 8001118:	20000008 	.word	0x20000008

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b02      	ldr	r3, [pc, #8]	; (800112c <HAL_GetTick+0x10>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	2000024c 	.word	0x2000024c

08001130 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001140:	401a      	ands	r2, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b002      	add	sp, #8
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	fe3fffff 	.word	0xfe3fffff

08001158 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	23e0      	movs	r3, #224	; 0xe0
 8001166:	045b      	lsls	r3, r3, #17
 8001168:	4013      	ands	r3, r2
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}

08001172 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	2104      	movs	r1, #4
 8001186:	400a      	ands	r2, r1
 8001188:	2107      	movs	r1, #7
 800118a:	4091      	lsls	r1, r2
 800118c:	000a      	movs	r2, r1
 800118e:	43d2      	mvns	r2, r2
 8001190:	401a      	ands	r2, r3
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2104      	movs	r1, #4
 8001196:	400b      	ands	r3, r1
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4099      	lsls	r1, r3
 800119c:	000b      	movs	r3, r1
 800119e:	431a      	orrs	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b004      	add	sp, #16
 80011aa:	bd80      	pop	{r7, pc}

080011ac <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	211f      	movs	r1, #31
 80011c0:	400a      	ands	r2, r1
 80011c2:	210f      	movs	r1, #15
 80011c4:	4091      	lsls	r1, r2
 80011c6:	000a      	movs	r2, r1
 80011c8:	43d2      	mvns	r2, r2
 80011ca:	401a      	ands	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	0e9b      	lsrs	r3, r3, #26
 80011d0:	210f      	movs	r1, #15
 80011d2:	4019      	ands	r1, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	201f      	movs	r0, #31
 80011d8:	4003      	ands	r3, r0
 80011da:	4099      	lsls	r1, r3
 80011dc:	000b      	movs	r3, r1
 80011de:	431a      	orrs	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b004      	add	sp, #16
 80011ea:	bd80      	pop	{r7, pc}

080011ec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	035b      	lsls	r3, r3, #13
 80011fe:	0b5b      	lsrs	r3, r3, #13
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}

0800120e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	0352      	lsls	r2, r2, #13
 8001220:	0b52      	lsrs	r2, r2, #13
 8001222:	43d2      	mvns	r2, r2
 8001224:	401a      	ands	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	0212      	lsls	r2, r2, #8
 8001248:	43d2      	mvns	r2, r2
 800124a:	401a      	ands	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	400b      	ands	r3, r1
 8001254:	4904      	ldr	r1, [pc, #16]	; (8001268 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001256:	400b      	ands	r3, r1
 8001258:	431a      	orrs	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	b004      	add	sp, #16
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	07ffff00 	.word	0x07ffff00

0800126c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	4a05      	ldr	r2, [pc, #20]	; (8001290 <LL_ADC_EnableInternalRegulator+0x24>)
 800127a:	4013      	ands	r3, r2
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	0552      	lsls	r2, r2, #21
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	6fffffe8 	.word	0x6fffffe8

08001294 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	055b      	lsls	r3, r3, #21
 80012a4:	401a      	ands	r2, r3
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	055b      	lsls	r3, r3, #21
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d101      	bne.n	80012b2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b002      	add	sp, #8
 80012ba:	bd80      	pop	{r7, pc}

080012bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <LL_ADC_IsEnabled+0x18>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <LL_ADC_IsEnabled+0x1a>
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}

080012de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2204      	movs	r2, #4
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d101      	bne.n	80012f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b002      	add	sp, #8
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001308:	231f      	movs	r3, #31
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e1aa      	b.n	800167c <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10a      	bne.n	8001344 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff fc01 	bl	8000b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2254      	movs	r2, #84	; 0x54
 8001340:	2100      	movs	r1, #0
 8001342:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff ffa3 	bl	8001294 <LL_ADC_IsInternalRegulatorEnabled>
 800134e:	1e03      	subs	r3, r0, #0
 8001350:	d114      	bne.n	800137c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ff88 	bl	800126c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800135c:	4bc9      	ldr	r3, [pc, #804]	; (8001684 <HAL_ADC_Init+0x384>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	49c9      	ldr	r1, [pc, #804]	; (8001688 <HAL_ADC_Init+0x388>)
 8001362:	0018      	movs	r0, r3
 8001364:	f7fe fecc 	bl	8000100 <__udivsi3>
 8001368:	0003      	movs	r3, r0
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800136e:	e002      	b.n	8001376 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	3b01      	subs	r3, #1
 8001374:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f9      	bne.n	8001370 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff ff87 	bl	8001294 <LL_ADC_IsInternalRegulatorEnabled>
 8001386:	1e03      	subs	r3, r0, #0
 8001388:	d10f      	bne.n	80013aa <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	2210      	movs	r2, #16
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139a:	2201      	movs	r2, #1
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 80013a2:	231f      	movs	r3, #31
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff ff95 	bl	80012de <LL_ADC_REG_IsConversionOngoing>
 80013b4:	0003      	movs	r3, r0
 80013b6:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013bc:	2210      	movs	r2, #16
 80013be:	4013      	ands	r3, r2
 80013c0:	d000      	beq.n	80013c4 <HAL_ADC_Init+0xc4>
 80013c2:	e14e      	b.n	8001662 <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d000      	beq.n	80013cc <HAL_ADC_Init+0xcc>
 80013ca:	e14a      	b.n	8001662 <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d0:	4aae      	ldr	r2, [pc, #696]	; (800168c <HAL_ADC_Init+0x38c>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	2202      	movs	r2, #2
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff ff6b 	bl	80012bc <LL_ADC_IsEnabled>
 80013e6:	1e03      	subs	r3, r0, #0
 80013e8:	d137      	bne.n	800145a <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2218      	movs	r2, #24
 80013f2:	4393      	bics	r3, r2
 80013f4:	0019      	movs	r1, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	0899      	lsrs	r1, r3, #2
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	0f9b      	lsrs	r3, r3, #30
 8001412:	079a      	lsls	r2, r3, #30
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	23c0      	movs	r3, #192	; 0xc0
 8001422:	061b      	lsls	r3, r3, #24
 8001424:	429a      	cmp	r2, r3
 8001426:	d018      	beq.n	800145a <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	429a      	cmp	r2, r3
 8001432:	d012      	beq.n	800145a <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	061b      	lsls	r3, r3, #24
 800143c:	429a      	cmp	r2, r3
 800143e:	d00c      	beq.n	800145a <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8001440:	4b93      	ldr	r3, [pc, #588]	; (8001690 <HAL_ADC_Init+0x390>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a93      	ldr	r2, [pc, #588]	; (8001694 <HAL_ADC_Init+0x394>)
 8001446:	4013      	ands	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	23f0      	movs	r3, #240	; 0xf0
 8001450:	039b      	lsls	r3, r3, #14
 8001452:	401a      	ands	r2, r3
 8001454:	4b8e      	ldr	r3, [pc, #568]	; (8001690 <HAL_ADC_Init+0x390>)
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7e1b      	ldrb	r3, [r3, #24]
 800145e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7e5b      	ldrb	r3, [r3, #25]
 8001464:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001466:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7e9b      	ldrb	r3, [r3, #26]
 800146c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800146e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <HAL_ADC_Init+0x17e>
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	015b      	lsls	r3, r3, #5
 800147c:	e000      	b.n	8001480 <HAL_ADC_Init+0x180>
 800147e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001480:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001486:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	da04      	bge.n	800149a <HAL_ADC_Init+0x19a>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	085b      	lsrs	r3, r3, #1
 8001498:	e001      	b.n	800149e <HAL_ADC_Init+0x19e>
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 800149e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	212c      	movs	r1, #44	; 0x2c
 80014a4:	5c5b      	ldrb	r3, [r3, r1]
 80014a6:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80014a8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2220      	movs	r2, #32
 80014b4:	5c9b      	ldrb	r3, [r3, r2]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d115      	bne.n	80014e6 <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7e9b      	ldrb	r3, [r3, #26]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	0252      	lsls	r2, r2, #9
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	e00b      	b.n	80014e6 <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	2220      	movs	r2, #32
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014de:	2201      	movs	r2, #1
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00a      	beq.n	8001504 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f2:	23e0      	movs	r3, #224	; 0xe0
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80014fc:	4313      	orrs	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 800150c:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 8001512:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 8001518:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4313      	orrs	r3, r2
 800151e:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	223c      	movs	r2, #60	; 0x3c
 8001524:	5c9b      	ldrb	r3, [r3, r2]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d103      	bne.n	8001532 <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2201      	movs	r2, #1
 800152e:	4313      	orrs	r3, r2
 8001530:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4a57      	ldr	r2, [pc, #348]	; (8001698 <HAL_ADC_Init+0x398>)
 800153a:	4013      	ands	r3, r2
 800153c:	0019      	movs	r1, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	430a      	orrs	r2, r1
 8001546:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	4a53      	ldr	r2, [pc, #332]	; (800169c <HAL_ADC_Init+0x39c>)
 8001550:	4013      	ands	r3, r2
 8001552:	0019      	movs	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	430a      	orrs	r2, r1
 800155c:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001566:	001a      	movs	r2, r3
 8001568:	2100      	movs	r1, #0
 800156a:	f7ff fe02 	bl	8001172 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	494a      	ldr	r1, [pc, #296]	; (80016a0 <HAL_ADC_Init+0x3a0>)
 8001578:	001a      	movs	r2, r3
 800157a:	f7ff fdfa 	bl	8001172 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d109      	bne.n	800159a <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2110      	movs	r1, #16
 8001592:	4249      	negs	r1, r1
 8001594:	430a      	orrs	r2, r1
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
 8001598:	e03c      	b.n	8001614 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691a      	ldr	r2, [r3, #16]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	039b      	lsls	r3, r3, #14
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d136      	bne.n	8001614 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	e00c      	b.n	80015c6 <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	40da      	lsrs	r2, r3
 80015b6:	0013      	movs	r3, r2
 80015b8:	220f      	movs	r2, #15
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d006      	beq.n	80015ce <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	3301      	adds	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2b07      	cmp	r3, #7
 80015ca:	d9ef      	bls.n	80015ac <HAL_ADC_Init+0x2ac>
 80015cc:	e000      	b.n	80015d0 <HAL_ADC_Init+0x2d0>
        {
          break;
 80015ce:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d109      	bne.n	80015ea <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2110      	movs	r1, #16
 80015e2:	4249      	negs	r1, r1
 80015e4:	430a      	orrs	r2, r1
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
 80015e8:	e014      	b.n	8001614 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	4a2b      	ldr	r2, [pc, #172]	; (80016a4 <HAL_ADC_Init+0x3a4>)
 80015f6:	4694      	mov	ip, r2
 80015f8:	4463      	add	r3, ip
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	221c      	movs	r2, #28
 80015fe:	4013      	ands	r3, r2
 8001600:	2210      	movs	r2, #16
 8001602:	4252      	negs	r2, r2
 8001604:	409a      	lsls	r2, r3
 8001606:	0011      	movs	r1, r2
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	4a23      	ldr	r2, [pc, #140]	; (80016a8 <HAL_ADC_Init+0x3a8>)
 800161c:	4013      	ands	r3, r2
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	429a      	cmp	r2, r3
 8001622:	d10b      	bne.n	800163c <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	2203      	movs	r2, #3
 8001630:	4393      	bics	r3, r2
 8001632:	2201      	movs	r2, #1
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800163a:	e01c      	b.n	8001676 <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	2212      	movs	r2, #18
 8001642:	4393      	bics	r3, r2
 8001644:	2210      	movs	r2, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001650:	2201      	movs	r2, #1
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8001658:	231f      	movs	r3, #31
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001660:	e009      	b.n	8001676 <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	2210      	movs	r2, #16
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 800166e:	231f      	movs	r3, #31
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001676:	231f      	movs	r3, #31
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	781b      	ldrb	r3, [r3, #0]
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b008      	add	sp, #32
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000000 	.word	0x20000000
 8001688:	00030d40 	.word	0x00030d40
 800168c:	fffffefd 	.word	0xfffffefd
 8001690:	40012708 	.word	0x40012708
 8001694:	ffc3ffff 	.word	0xffc3ffff
 8001698:	fffe0219 	.word	0xfffe0219
 800169c:	dffffc02 	.word	0xdffffc02
 80016a0:	07ffff04 	.word	0x07ffff04
 80016a4:	3fffffff 	.word	0x3fffffff
 80016a8:	833fffe7 	.word	0x833fffe7

080016ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b6:	2317      	movs	r3, #23
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2254      	movs	r2, #84	; 0x54
 80016c6:	5c9b      	ldrb	r3, [r3, r2]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x24>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e1bc      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x39e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2254      	movs	r2, #84	; 0x54
 80016d4:	2101      	movs	r1, #1
 80016d6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff fdfe 	bl	80012de <LL_ADC_REG_IsConversionOngoing>
 80016e2:	1e03      	subs	r3, r0, #0
 80016e4:	d000      	beq.n	80016e8 <HAL_ADC_ConfigChannel+0x3c>
 80016e6:	e19f      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d100      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x46>
 80016f0:	e13e      	b.n	8001970 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	061b      	lsls	r3, r3, #24
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d004      	beq.n	8001708 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001702:	4abf      	ldr	r2, [pc, #764]	; (8001a00 <HAL_ADC_ConfigChannel+0x354>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d108      	bne.n	800171a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0019      	movs	r1, r3
 8001712:	0010      	movs	r0, r2
 8001714:	f7ff fd6a 	bl	80011ec <LL_ADC_REG_SetSequencerChAdd>
 8001718:	e0c9      	b.n	80018ae <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	211f      	movs	r1, #31
 8001724:	400b      	ands	r3, r1
 8001726:	210f      	movs	r1, #15
 8001728:	4099      	lsls	r1, r3
 800172a:	000b      	movs	r3, r1
 800172c:	43db      	mvns	r3, r3
 800172e:	4013      	ands	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	035b      	lsls	r3, r3, #13
 8001738:	0b5b      	lsrs	r3, r3, #13
 800173a:	d105      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x9c>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0e9b      	lsrs	r3, r3, #26
 8001742:	221f      	movs	r2, #31
 8001744:	4013      	ands	r3, r2
 8001746:	e098      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2201      	movs	r2, #1
 800174e:	4013      	ands	r3, r2
 8001750:	d000      	beq.n	8001754 <HAL_ADC_ConfigChannel+0xa8>
 8001752:	e091      	b.n	8001878 <HAL_ADC_ConfigChannel+0x1cc>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d000      	beq.n	8001760 <HAL_ADC_ConfigChannel+0xb4>
 800175e:	e089      	b.n	8001874 <HAL_ADC_ConfigChannel+0x1c8>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2204      	movs	r2, #4
 8001766:	4013      	ands	r3, r2
 8001768:	d000      	beq.n	800176c <HAL_ADC_ConfigChannel+0xc0>
 800176a:	e081      	b.n	8001870 <HAL_ADC_ConfigChannel+0x1c4>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2208      	movs	r2, #8
 8001772:	4013      	ands	r3, r2
 8001774:	d000      	beq.n	8001778 <HAL_ADC_ConfigChannel+0xcc>
 8001776:	e079      	b.n	800186c <HAL_ADC_ConfigChannel+0x1c0>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2210      	movs	r2, #16
 800177e:	4013      	ands	r3, r2
 8001780:	d000      	beq.n	8001784 <HAL_ADC_ConfigChannel+0xd8>
 8001782:	e071      	b.n	8001868 <HAL_ADC_ConfigChannel+0x1bc>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2220      	movs	r2, #32
 800178a:	4013      	ands	r3, r2
 800178c:	d000      	beq.n	8001790 <HAL_ADC_ConfigChannel+0xe4>
 800178e:	e069      	b.n	8001864 <HAL_ADC_ConfigChannel+0x1b8>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2240      	movs	r2, #64	; 0x40
 8001796:	4013      	ands	r3, r2
 8001798:	d000      	beq.n	800179c <HAL_ADC_ConfigChannel+0xf0>
 800179a:	e061      	b.n	8001860 <HAL_ADC_ConfigChannel+0x1b4>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	4013      	ands	r3, r2
 80017a4:	d000      	beq.n	80017a8 <HAL_ADC_ConfigChannel+0xfc>
 80017a6:	e059      	b.n	800185c <HAL_ADC_ConfigChannel+0x1b0>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	d151      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1ac>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4013      	ands	r3, r2
 80017be:	d149      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1a8>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4013      	ands	r3, r2
 80017ca:	d141      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x1a4>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	4013      	ands	r3, r2
 80017d6:	d139      	bne.n	800184c <HAL_ADC_ConfigChannel+0x1a0>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	015b      	lsls	r3, r3, #5
 80017e0:	4013      	ands	r3, r2
 80017e2:	d131      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x19c>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	019b      	lsls	r3, r3, #6
 80017ec:	4013      	ands	r3, r2
 80017ee:	d129      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x198>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	01db      	lsls	r3, r3, #7
 80017f8:	4013      	ands	r3, r2
 80017fa:	d121      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x194>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	4013      	ands	r3, r2
 8001806:	d119      	bne.n	800183c <HAL_ADC_ConfigChannel+0x190>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	025b      	lsls	r3, r3, #9
 8001810:	4013      	ands	r3, r2
 8001812:	d111      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x18c>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	029b      	lsls	r3, r3, #10
 800181c:	4013      	ands	r3, r2
 800181e:	d109      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x188>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	02db      	lsls	r3, r3, #11
 8001828:	4013      	ands	r3, r2
 800182a:	d001      	beq.n	8001830 <HAL_ADC_ConfigChannel+0x184>
 800182c:	2312      	movs	r3, #18
 800182e:	e024      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001830:	2300      	movs	r3, #0
 8001832:	e022      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001834:	2311      	movs	r3, #17
 8001836:	e020      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001838:	2310      	movs	r3, #16
 800183a:	e01e      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 800183c:	230f      	movs	r3, #15
 800183e:	e01c      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001840:	230e      	movs	r3, #14
 8001842:	e01a      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001844:	230d      	movs	r3, #13
 8001846:	e018      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001848:	230c      	movs	r3, #12
 800184a:	e016      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 800184c:	230b      	movs	r3, #11
 800184e:	e014      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001850:	230a      	movs	r3, #10
 8001852:	e012      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001854:	2309      	movs	r3, #9
 8001856:	e010      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001858:	2308      	movs	r3, #8
 800185a:	e00e      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 800185c:	2307      	movs	r3, #7
 800185e:	e00c      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001860:	2306      	movs	r3, #6
 8001862:	e00a      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001864:	2305      	movs	r3, #5
 8001866:	e008      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001868:	2304      	movs	r3, #4
 800186a:	e006      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 800186c:	2303      	movs	r3, #3
 800186e:	e004      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001870:	2302      	movs	r3, #2
 8001872:	e002      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ce>
 8001878:	2300      	movs	r3, #0
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	6852      	ldr	r2, [r2, #4]
 800187e:	201f      	movs	r0, #31
 8001880:	4002      	ands	r2, r0
 8001882:	4093      	lsls	r3, r2
 8001884:	000a      	movs	r2, r1
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	429a      	cmp	r2, r3
 800189a:	d808      	bhi.n	80018ae <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	001a      	movs	r2, r3
 80018aa:	f7ff fc7f 	bl	80011ac <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	001a      	movs	r2, r3
 80018bc:	f7ff fcba 	bl	8001234 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db00      	blt.n	80018ca <HAL_ADC_ConfigChannel+0x21e>
 80018c8:	e0b8      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018ca:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <HAL_ADC_ConfigChannel+0x358>)
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7ff fc43 	bl	8001158 <LL_ADC_GetCommonPathInternalCh>
 80018d2:	0003      	movs	r3, r0
 80018d4:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a4b      	ldr	r2, [pc, #300]	; (8001a08 <HAL_ADC_ConfigChannel+0x35c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d11d      	bne.n	800191c <HAL_ADC_ConfigChannel+0x270>
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	4013      	ands	r3, r2
 80018e8:	d118      	bne.n	800191c <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	0412      	lsls	r2, r2, #16
 80018f0:	4313      	orrs	r3, r2
 80018f2:	4a44      	ldr	r2, [pc, #272]	; (8001a04 <HAL_ADC_ConfigChannel+0x358>)
 80018f4:	0019      	movs	r1, r3
 80018f6:	0010      	movs	r0, r2
 80018f8:	f7ff fc1a 	bl	8001130 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80018fc:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_ADC_ConfigChannel+0x360>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4943      	ldr	r1, [pc, #268]	; (8001a10 <HAL_ADC_ConfigChannel+0x364>)
 8001902:	0018      	movs	r0, r3
 8001904:	f7fe fbfc 	bl	8000100 <__udivsi3>
 8001908:	0003      	movs	r3, r0
 800190a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 800190c:	e002      	b.n	8001914 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3b01      	subs	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f9      	bne.n	800190e <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800191a:	e08f      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a3c      	ldr	r2, [pc, #240]	; (8001a14 <HAL_ADC_ConfigChannel+0x368>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10e      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x298>
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	045b      	lsls	r3, r3, #17
 800192c:	4013      	ands	r3, r2
 800192e:	d109      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	0452      	lsls	r2, r2, #17
 8001936:	4313      	orrs	r3, r2
 8001938:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <HAL_ADC_ConfigChannel+0x358>)
 800193a:	0019      	movs	r1, r3
 800193c:	0010      	movs	r0, r2
 800193e:	f7ff fbf7 	bl	8001130 <LL_ADC_SetCommonPathInternalCh>
 8001942:	e07b      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a33      	ldr	r2, [pc, #204]	; (8001a18 <HAL_ADC_ConfigChannel+0x36c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d000      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x2a4>
 800194e:	e075      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x390>
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	03db      	lsls	r3, r3, #15
 8001956:	4013      	ands	r3, r2
 8001958:	d000      	beq.n	800195c <HAL_ADC_ConfigChannel+0x2b0>
 800195a:	e06f      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	03d2      	lsls	r2, r2, #15
 8001962:	4313      	orrs	r3, r2
 8001964:	4a27      	ldr	r2, [pc, #156]	; (8001a04 <HAL_ADC_ConfigChannel+0x358>)
 8001966:	0019      	movs	r1, r3
 8001968:	0010      	movs	r0, r2
 800196a:	f7ff fbe1 	bl	8001130 <LL_ADC_SetCommonPathInternalCh>
 800196e:	e065      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	061b      	lsls	r3, r3, #24
 8001978:	429a      	cmp	r2, r3
 800197a:	d004      	beq.n	8001986 <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001980:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <HAL_ADC_ConfigChannel+0x354>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d107      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	0019      	movs	r1, r3
 8001990:	0010      	movs	r0, r2
 8001992:	f7ff fc3c 	bl	800120e <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	da4e      	bge.n	8001a3c <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_ADC_ConfigChannel+0x358>)
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7ff fbd9 	bl	8001158 <LL_ADC_GetCommonPathInternalCh>
 80019a6:	0003      	movs	r3, r0
 80019a8:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a16      	ldr	r2, [pc, #88]	; (8001a08 <HAL_ADC_ConfigChannel+0x35c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d108      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_ADC_ConfigChannel+0x370>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <HAL_ADC_ConfigChannel+0x358>)
 80019bc:	0019      	movs	r1, r3
 80019be:	0010      	movs	r0, r2
 80019c0:	f7ff fbb6 	bl	8001130 <LL_ADC_SetCommonPathInternalCh>
 80019c4:	e03a      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <HAL_ADC_ConfigChannel+0x368>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d108      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <HAL_ADC_ConfigChannel+0x374>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <HAL_ADC_ConfigChannel+0x358>)
 80019d8:	0019      	movs	r1, r3
 80019da:	0010      	movs	r0, r2
 80019dc:	f7ff fba8 	bl	8001130 <LL_ADC_SetCommonPathInternalCh>
 80019e0:	e02c      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <HAL_ADC_ConfigChannel+0x36c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d127      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <HAL_ADC_ConfigChannel+0x378>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_ADC_ConfigChannel+0x358>)
 80019f4:	0019      	movs	r1, r3
 80019f6:	0010      	movs	r0, r2
 80019f8:	f7ff fb9a 	bl	8001130 <LL_ADC_SetCommonPathInternalCh>
 80019fc:	e01e      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x390>
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	80000004 	.word	0x80000004
 8001a04:	40012708 	.word	0x40012708
 8001a08:	b0001000 	.word	0xb0001000
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	00030d40 	.word	0x00030d40
 8001a14:	b8004000 	.word	0xb8004000
 8001a18:	b4002000 	.word	0xb4002000
 8001a1c:	ff7fffff 	.word	0xff7fffff
 8001a20:	feffffff 	.word	0xfeffffff
 8001a24:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001a34:	2317      	movs	r3, #23
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2254      	movs	r2, #84	; 0x54
 8001a40:	2100      	movs	r1, #0
 8001a42:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001a44:	2317      	movs	r3, #23
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	781b      	ldrb	r3, [r3, #0]
}
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b006      	add	sp, #24
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	1dfb      	adds	r3, r7, #7
 8001a5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	1dfb      	adds	r3, r7, #7
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b7f      	cmp	r3, #127	; 0x7f
 8001a66:	d809      	bhi.n	8001a7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a68:	1dfb      	adds	r3, r7, #7
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	001a      	movs	r2, r3
 8001a6e:	231f      	movs	r3, #31
 8001a70:	401a      	ands	r2, r3
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_EnableIRQ+0x30>)
 8001a74:	2101      	movs	r1, #1
 8001a76:	4091      	lsls	r1, r2
 8001a78:	000a      	movs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
  }
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b002      	add	sp, #8
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	e000e100 	.word	0xe000e100

08001a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	0002      	movs	r2, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	1dfb      	adds	r3, r7, #7
 8001a94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a9c:	d828      	bhi.n	8001af0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a9e:	4a2f      	ldr	r2, [pc, #188]	; (8001b5c <__NVIC_SetPriority+0xd4>)
 8001aa0:	1dfb      	adds	r3, r7, #7
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b25b      	sxtb	r3, r3
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	33c0      	adds	r3, #192	; 0xc0
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	589b      	ldr	r3, [r3, r2]
 8001aae:	1dfa      	adds	r2, r7, #7
 8001ab0:	7812      	ldrb	r2, [r2, #0]
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	00d2      	lsls	r2, r2, #3
 8001aba:	21ff      	movs	r1, #255	; 0xff
 8001abc:	4091      	lsls	r1, r2
 8001abe:	000a      	movs	r2, r1
 8001ac0:	43d2      	mvns	r2, r2
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	019b      	lsls	r3, r3, #6
 8001aca:	22ff      	movs	r2, #255	; 0xff
 8001acc:	401a      	ands	r2, r3
 8001ace:	1dfb      	adds	r3, r7, #7
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	4003      	ands	r3, r0
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001adc:	481f      	ldr	r0, [pc, #124]	; (8001b5c <__NVIC_SetPriority+0xd4>)
 8001ade:	1dfb      	adds	r3, r7, #7
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	33c0      	adds	r3, #192	; 0xc0
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001aee:	e031      	b.n	8001b54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <__NVIC_SetPriority+0xd8>)
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	0019      	movs	r1, r3
 8001af8:	230f      	movs	r3, #15
 8001afa:	400b      	ands	r3, r1
 8001afc:	3b08      	subs	r3, #8
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3306      	adds	r3, #6
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	18d3      	adds	r3, r2, r3
 8001b06:	3304      	adds	r3, #4
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	1dfa      	adds	r2, r7, #7
 8001b0c:	7812      	ldrb	r2, [r2, #0]
 8001b0e:	0011      	movs	r1, r2
 8001b10:	2203      	movs	r2, #3
 8001b12:	400a      	ands	r2, r1
 8001b14:	00d2      	lsls	r2, r2, #3
 8001b16:	21ff      	movs	r1, #255	; 0xff
 8001b18:	4091      	lsls	r1, r2
 8001b1a:	000a      	movs	r2, r1
 8001b1c:	43d2      	mvns	r2, r2
 8001b1e:	401a      	ands	r2, r3
 8001b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	019b      	lsls	r3, r3, #6
 8001b26:	22ff      	movs	r2, #255	; 0xff
 8001b28:	401a      	ands	r2, r3
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	2303      	movs	r3, #3
 8001b32:	4003      	ands	r3, r0
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b38:	4809      	ldr	r0, [pc, #36]	; (8001b60 <__NVIC_SetPriority+0xd8>)
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	001c      	movs	r4, r3
 8001b40:	230f      	movs	r3, #15
 8001b42:	4023      	ands	r3, r4
 8001b44:	3b08      	subs	r3, #8
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	3306      	adds	r3, #6
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	18c3      	adds	r3, r0, r3
 8001b50:	3304      	adds	r3, #4
 8001b52:	601a      	str	r2, [r3, #0]
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b003      	add	sp, #12
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <SysTick_Config+0x40>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e010      	b.n	8001b9c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <SysTick_Config+0x44>)
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	3a01      	subs	r2, #1
 8001b80:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	2301      	movs	r3, #1
 8001b84:	425b      	negs	r3, r3
 8001b86:	2103      	movs	r1, #3
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f7ff ff7d 	bl	8001a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <SysTick_Config+0x44>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <SysTick_Config+0x44>)
 8001b96:	2207      	movs	r2, #7
 8001b98:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	00ffffff 	.word	0x00ffffff
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	1c02      	adds	r2, r0, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	0011      	movs	r1, r2
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f7ff ff5d 	bl	8001a88 <__NVIC_SetPriority>
}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b004      	add	sp, #16
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	0002      	movs	r2, r0
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7ff ff33 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7ff ffaf 	bl	8001b64 <SysTick_Config>
 8001c06:	0003      	movs	r3, r0
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c18:	230f      	movs	r3, #15
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	; 0x24
 8001c24:	2100      	movs	r1, #0
 8001c26:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2224      	movs	r2, #36	; 0x24
 8001c2c:	5c9b      	ldrb	r3, [r3, r2]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_DMA_Abort_IT+0x26>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e05e      	b.n	8001cf4 <HAL_DMA_Abort_IT+0xe4>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2224      	movs	r2, #36	; 0x24
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2225      	movs	r2, #37	; 0x25
 8001c42:	5c9b      	ldrb	r3, [r3, r2]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d007      	beq.n	8001c5a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c50:	230f      	movs	r3, #15
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	e049      	b.n	8001cee <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	210e      	movs	r1, #14
 8001c66:	438a      	bics	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2101      	movs	r1, #1
 8001c76:	438a      	bics	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	491d      	ldr	r1, [pc, #116]	; (8001cfc <HAL_DMA_Abort_IT+0xec>)
 8001c86:	400a      	ands	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_DMA_Abort_IT+0xf0>)
 8001c8c:	6859      	ldr	r1, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	221c      	movs	r2, #28
 8001c94:	4013      	ands	r3, r2
 8001c96:	2201      	movs	r2, #1
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_DMA_Abort_IT+0xf0>)
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ca8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00c      	beq.n	8001ccc <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbc:	490f      	ldr	r1, [pc, #60]	; (8001cfc <HAL_DMA_Abort_IT+0xec>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001cca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2225      	movs	r2, #37	; 0x25
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2224      	movs	r2, #36	; 0x24
 8001cd8:	2100      	movs	r1, #0
 8001cda:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	0010      	movs	r0, r2
 8001cec:	4798      	blx	r3
    }
  }
  return status;
 8001cee:	230f      	movs	r3, #15
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	781b      	ldrb	r3, [r3, #0]
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b004      	add	sp, #16
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	fffffeff 	.word	0xfffffeff
 8001d00:	40020000 	.word	0x40020000

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	e147      	b.n	8001fa4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4091      	lsls	r1, r2
 8001d1e:	000a      	movs	r2, r1
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d100      	bne.n	8001d2c <HAL_GPIO_Init+0x28>
 8001d2a:	e138      	b.n	8001f9e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x38>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b12      	cmp	r3, #18
 8001d3a:	d123      	bne.n	8001d84 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	0092      	lsls	r2, r2, #2
 8001d46:	58d3      	ldr	r3, [r2, r3]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	4013      	ands	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	409a      	lsls	r2, r3
 8001d56:	0013      	movs	r3, r2
 8001d58:	43da      	mvns	r2, r3
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2107      	movs	r1, #7
 8001d68:	400b      	ands	r3, r1
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	0013      	movs	r3, r2
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	6939      	ldr	r1, [r7, #16]
 8001d82:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	409a      	lsls	r2, r3
 8001d92:	0013      	movs	r3, r2
 8001d94:	43da      	mvns	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	409a      	lsls	r2, r3
 8001daa:	0013      	movs	r3, r2
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_GPIO_Init+0xd4>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d007      	beq.n	8001dd8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dcc:	2b11      	cmp	r3, #17
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b12      	cmp	r3, #18
 8001dd6:	d130      	bne.n	8001e3a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	409a      	lsls	r2, r3
 8001de6:	0013      	movs	r3, r2
 8001de8:	43da      	mvns	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e0e:	2201      	movs	r2, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
 8001e14:	0013      	movs	r3, r2
 8001e16:	43da      	mvns	r2, r3
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	2201      	movs	r2, #1
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	409a      	lsls	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	0013      	movs	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	055b      	lsls	r3, r3, #21
 8001e72:	4013      	ands	r3, r2
 8001e74:	d100      	bne.n	8001e78 <HAL_GPIO_Init+0x174>
 8001e76:	e092      	b.n	8001f9e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e78:	4a50      	ldr	r2, [pc, #320]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3318      	adds	r3, #24
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	589b      	ldr	r3, [r3, r2]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	220f      	movs	r2, #15
 8001e90:	409a      	lsls	r2, r3
 8001e92:	0013      	movs	r3, r2
 8001e94:	43da      	mvns	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	23a0      	movs	r3, #160	; 0xa0
 8001ea0:	05db      	lsls	r3, r3, #23
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0x1ca>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a45      	ldr	r2, [pc, #276]	; (8001fc0 <HAL_GPIO_Init+0x2bc>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00d      	beq.n	8001eca <HAL_GPIO_Init+0x1c6>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a44      	ldr	r2, [pc, #272]	; (8001fc4 <HAL_GPIO_Init+0x2c0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <HAL_GPIO_Init+0x1c2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a43      	ldr	r2, [pc, #268]	; (8001fc8 <HAL_GPIO_Init+0x2c4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_GPIO_Init+0x1be>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x1cc>
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e004      	b.n	8001ed0 <HAL_GPIO_Init+0x1cc>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_Init+0x1cc>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x1cc>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	2103      	movs	r1, #3
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	00d2      	lsls	r2, r2, #3
 8001ed8:	4093      	lsls	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001ee0:	4936      	ldr	r1, [pc, #216]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3318      	adds	r3, #24
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001eee:	4a33      	ldr	r2, [pc, #204]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	58d3      	ldr	r3, [r2, r3]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	025b      	lsls	r3, r3, #9
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f14:	4929      	ldr	r1, [pc, #164]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001f1c:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001f1e:	2384      	movs	r3, #132	; 0x84
 8001f20:	58d3      	ldr	r3, [r2, r3]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	43da      	mvns	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	029b      	lsls	r3, r3, #10
 8001f36:	4013      	ands	r3, r2
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f42:	491e      	ldr	r1, [pc, #120]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001f44:	2284      	movs	r2, #132	; 0x84
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43da      	mvns	r2, r3
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	035b      	lsls	r3, r3, #13
 8001f62:	4013      	ands	r3, r2
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43da      	mvns	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	039b      	lsls	r3, r3, #14
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	40da      	lsrs	r2, r3
 8001fac:	1e13      	subs	r3, r2, #0
 8001fae:	d000      	beq.n	8001fb2 <HAL_GPIO_Init+0x2ae>
 8001fb0:	e6b0      	b.n	8001d14 <HAL_GPIO_Init+0x10>
  }
}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b006      	add	sp, #24
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40021800 	.word	0x40021800
 8001fc0:	50000400 	.word	0x50000400
 8001fc4:	50000800 	.word	0x50000800
 8001fc8:	50000c00 	.word	0x50000c00

08001fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	000a      	movs	r2, r1
 8001fd6:	1cbb      	adds	r3, r7, #2
 8001fd8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	1cba      	adds	r2, r7, #2
 8001fe0:	8812      	ldrh	r2, [r2, #0]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe6:	230f      	movs	r3, #15
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
 8001fee:	e003      	b.n	8001ff8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b004      	add	sp, #16
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	0008      	movs	r0, r1
 8002010:	0011      	movs	r1, r2
 8002012:	1cbb      	adds	r3, r7, #2
 8002014:	1c02      	adds	r2, r0, #0
 8002016:	801a      	strh	r2, [r3, #0]
 8002018:	1c7b      	adds	r3, r7, #1
 800201a:	1c0a      	adds	r2, r1, #0
 800201c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800201e:	1c7b      	adds	r3, r7, #1
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002026:	1cbb      	adds	r3, r7, #2
 8002028:	881a      	ldrh	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800202e:	e003      	b.n	8002038 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002030:	1cbb      	adds	r3, r7, #2
 8002032:	881a      	ldrh	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	0002      	movs	r2, r0
 8002048:	1dbb      	adds	r3, r7, #6
 800204a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	1dba      	adds	r2, r7, #6
 8002052:	8812      	ldrh	r2, [r2, #0]
 8002054:	4013      	ands	r3, r2
 8002056:	d008      	beq.n	800206a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800205a:	1dba      	adds	r2, r7, #6
 800205c:	8812      	ldrh	r2, [r2, #0]
 800205e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002060:	1dbb      	adds	r3, r7, #6
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	0018      	movs	r0, r3
 8002066:	f000 f815 	bl	8002094 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	1dba      	adds	r2, r7, #6
 8002070:	8812      	ldrh	r2, [r2, #0]
 8002072:	4013      	ands	r3, r2
 8002074:	d008      	beq.n	8002088 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002078:	1dba      	adds	r2, r7, #6
 800207a:	8812      	ldrh	r2, [r2, #0]
 800207c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800207e:	1dbb      	adds	r3, r7, #6
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	0018      	movs	r0, r3
 8002084:	f7fe fd1e 	bl	8000ac4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002088:	46c0      	nop			; (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021800 	.word	0x40021800

08002094 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	0002      	movs	r2, r0
 800209c:	1dbb      	adds	r3, r7, #6
 800209e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e082      	b.n	80021c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2241      	movs	r2, #65	; 0x41
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2240      	movs	r2, #64	; 0x40
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7fe fd75 	bl	8000bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2241      	movs	r2, #65	; 0x41
 80020da:	2124      	movs	r1, #36	; 0x24
 80020dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	438a      	bics	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4934      	ldr	r1, [pc, #208]	; (80021c8 <HAL_I2C_Init+0x120>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4931      	ldr	r1, [pc, #196]	; (80021cc <HAL_I2C_Init+0x124>)
 8002108:	400a      	ands	r2, r1
 800210a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	0209      	lsls	r1, r1, #8
 8002120:	430a      	orrs	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e007      	b.n	8002136 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2184      	movs	r1, #132	; 0x84
 8002130:	0209      	lsls	r1, r1, #8
 8002132:	430a      	orrs	r2, r1
 8002134:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d104      	bne.n	8002148 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	491f      	ldr	r1, [pc, #124]	; (80021d0 <HAL_I2C_Init+0x128>)
 8002154:	430a      	orrs	r2, r1
 8002156:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	491a      	ldr	r1, [pc, #104]	; (80021cc <HAL_I2C_Init+0x124>)
 8002164:	400a      	ands	r2, r1
 8002166:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	431a      	orrs	r2, r3
 8002172:	0011      	movs	r1, r2
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	021a      	lsls	r2, r3, #8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69d9      	ldr	r1, [r3, #28]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2241      	movs	r2, #65	; 0x41
 80021ac:	2120      	movs	r1, #32
 80021ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2242      	movs	r2, #66	; 0x42
 80021ba:	2100      	movs	r1, #0
 80021bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	f0ffffff 	.word	0xf0ffffff
 80021cc:	ffff7fff 	.word	0xffff7fff
 80021d0:	02008000 	.word	0x02008000

080021d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	68f9      	ldr	r1, [r7, #12]
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
  }
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b004      	add	sp, #16
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	001a      	movs	r2, r3
 8002226:	2301      	movs	r3, #1
 8002228:	4013      	ands	r3, r2
 800222a:	d010      	beq.n	800224e <HAL_I2C_ER_IRQHandler+0x46>
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	09db      	lsrs	r3, r3, #7
 8002230:	001a      	movs	r2, r3
 8002232:	2301      	movs	r3, #1
 8002234:	4013      	ands	r3, r2
 8002236:	d00a      	beq.n	800224e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	2201      	movs	r2, #1
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	0052      	lsls	r2, r2, #1
 800224c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	0a9b      	lsrs	r3, r3, #10
 8002252:	001a      	movs	r2, r3
 8002254:	2301      	movs	r3, #1
 8002256:	4013      	ands	r3, r2
 8002258:	d010      	beq.n	800227c <HAL_I2C_ER_IRQHandler+0x74>
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	09db      	lsrs	r3, r3, #7
 800225e:	001a      	movs	r2, r3
 8002260:	2301      	movs	r3, #1
 8002262:	4013      	ands	r3, r2
 8002264:	d00a      	beq.n	800227c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	2208      	movs	r2, #8
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	00d2      	lsls	r2, r2, #3
 800227a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	0a5b      	lsrs	r3, r3, #9
 8002280:	001a      	movs	r2, r3
 8002282:	2301      	movs	r3, #1
 8002284:	4013      	ands	r3, r2
 8002286:	d010      	beq.n	80022aa <HAL_I2C_ER_IRQHandler+0xa2>
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	09db      	lsrs	r3, r3, #7
 800228c:	001a      	movs	r2, r3
 800228e:	2301      	movs	r3, #1
 8002290:	4013      	ands	r3, r2
 8002292:	d00a      	beq.n	80022aa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	2202      	movs	r2, #2
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	0092      	lsls	r2, r2, #2
 80022a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	220b      	movs	r2, #11
 80022b4:	4013      	ands	r3, r2
 80022b6:	d005      	beq.n	80022c4 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	0011      	movs	r1, r2
 80022be:	0018      	movs	r0, r3
 80022c0:	f000 fb70 	bl	80029a4 <I2C_ITError>
  }
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b006      	add	sp, #24
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	0008      	movs	r0, r1
 80022f6:	0011      	movs	r1, r2
 80022f8:	1cfb      	adds	r3, r7, #3
 80022fa:	1c02      	adds	r2, r0, #0
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	003b      	movs	r3, r7
 8002300:	1c0a      	adds	r2, r1, #0
 8002302:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	5c9b      	ldrb	r3, [r3, r2]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <I2C_Slave_ISR_IT+0x24>
 800235c:	2302      	movs	r3, #2
 800235e:	e0fe      	b.n	800255e <I2C_Slave_ISR_IT+0x222>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	2101      	movs	r1, #1
 8002366:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	001a      	movs	r2, r3
 800236e:	2301      	movs	r3, #1
 8002370:	4013      	ands	r3, r2
 8002372:	d054      	beq.n	800241e <I2C_Slave_ISR_IT+0xe2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	001a      	movs	r2, r3
 800237a:	2301      	movs	r3, #1
 800237c:	4013      	ands	r3, r2
 800237e:	d04e      	beq.n	800241e <I2C_Slave_ISR_IT+0xe2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d12d      	bne.n	80023e6 <I2C_Slave_ISR_IT+0xaa>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2241      	movs	r2, #65	; 0x41
 800238e:	5c9b      	ldrb	r3, [r3, r2]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b28      	cmp	r3, #40	; 0x28
 8002394:	d10b      	bne.n	80023ae <I2C_Slave_ISR_IT+0x72>
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	049b      	lsls	r3, r3, #18
 800239c:	429a      	cmp	r2, r3
 800239e:	d106      	bne.n	80023ae <I2C_Slave_ISR_IT+0x72>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	0011      	movs	r1, r2
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 faa6 	bl	80028f8 <I2C_ITListenCplt>
 80023ac:	e036      	b.n	800241c <I2C_Slave_ISR_IT+0xe0>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2241      	movs	r2, #65	; 0x41
 80023b2:	5c9b      	ldrb	r3, [r3, r2]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b29      	cmp	r3, #41	; 0x29
 80023b8:	d110      	bne.n	80023dc <I2C_Slave_ISR_IT+0xa0>
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4a6a      	ldr	r2, [pc, #424]	; (8002568 <I2C_Slave_ISR_IT+0x22c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00c      	beq.n	80023dc <I2C_Slave_ISR_IT+0xa0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2210      	movs	r2, #16
 80023c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 fbbb 	bl	8002b48 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 f96e 	bl	80026b6 <I2C_ITSlaveSeqCplt>
 80023da:	e01f      	b.n	800241c <I2C_Slave_ISR_IT+0xe0>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2210      	movs	r2, #16
 80023e2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80023e4:	e0a1      	b.n	800252a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2210      	movs	r2, #16
 80023ec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	2204      	movs	r2, #4
 80023f4:	431a      	orrs	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <I2C_Slave_ISR_IT+0xd0>
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	045b      	lsls	r3, r3, #17
 8002406:	429a      	cmp	r2, r3
 8002408:	d000      	beq.n	800240c <I2C_Slave_ISR_IT+0xd0>
 800240a:	e08e      	b.n	800252a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	0011      	movs	r1, r2
 8002414:	0018      	movs	r0, r3
 8002416:	f000 fac5 	bl	80029a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800241a:	e086      	b.n	800252a <I2C_Slave_ISR_IT+0x1ee>
 800241c:	e085      	b.n	800252a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	001a      	movs	r2, r3
 8002424:	2301      	movs	r3, #1
 8002426:	4013      	ands	r3, r2
 8002428:	d035      	beq.n	8002496 <I2C_Slave_ISR_IT+0x15a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	001a      	movs	r2, r3
 8002430:	2301      	movs	r3, #1
 8002432:	4013      	ands	r3, r2
 8002434:	d02f      	beq.n	8002496 <I2C_Slave_ISR_IT+0x15a>
  {
    if (hi2c->XferCount > 0U)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01c      	beq.n	800247a <I2C_Slave_ISR_IT+0x13e>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2204      	movs	r2, #4
 8002444:	4393      	bics	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d154      	bne.n	800252e <I2C_Slave_ISR_IT+0x1f2>
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4a38      	ldr	r2, [pc, #224]	; (8002568 <I2C_Slave_ISR_IT+0x22c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d050      	beq.n	800252e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	0018      	movs	r0, r3
 8002490:	f000 f911 	bl	80026b6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002494:	e04b      	b.n	800252e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	001a      	movs	r2, r3
 800249c:	2301      	movs	r3, #1
 800249e:	4013      	ands	r3, r2
 80024a0:	d00c      	beq.n	80024bc <I2C_Slave_ISR_IT+0x180>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	08db      	lsrs	r3, r3, #3
 80024a6:	001a      	movs	r2, r3
 80024a8:	2301      	movs	r3, #1
 80024aa:	4013      	ands	r3, r2
 80024ac:	d006      	beq.n	80024bc <I2C_Slave_ISR_IT+0x180>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	0011      	movs	r1, r2
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 f859 	bl	800256c <I2C_ITAddrCplt>
 80024ba:	e039      	b.n	8002530 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	001a      	movs	r2, r3
 80024c2:	2301      	movs	r3, #1
 80024c4:	4013      	ands	r3, r2
 80024c6:	d033      	beq.n	8002530 <I2C_Slave_ISR_IT+0x1f4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	001a      	movs	r2, r3
 80024ce:	2301      	movs	r3, #1
 80024d0:	4013      	ands	r3, r2
 80024d2:	d02d      	beq.n	8002530 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d018      	beq.n	8002510 <I2C_Slave_ISR_IT+0x1d4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	; 0x28
 800250e:	e00f      	b.n	8002530 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	045b      	lsls	r3, r3, #17
 8002516:	429a      	cmp	r2, r3
 8002518:	d002      	beq.n	8002520 <I2C_Slave_ISR_IT+0x1e4>
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	0018      	movs	r0, r3
 8002524:	f000 f8c7 	bl	80026b6 <I2C_ITSlaveSeqCplt>
 8002528:	e002      	b.n	8002530 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	e000      	b.n	8002530 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800252e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	001a      	movs	r2, r3
 8002536:	2301      	movs	r3, #1
 8002538:	4013      	ands	r3, r2
 800253a:	d00b      	beq.n	8002554 <I2C_Slave_ISR_IT+0x218>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	001a      	movs	r2, r3
 8002542:	2301      	movs	r3, #1
 8002544:	4013      	ands	r3, r2
 8002546:	d005      	beq.n	8002554 <I2C_Slave_ISR_IT+0x218>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	0011      	movs	r1, r2
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f8f2 	bl	8002738 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2240      	movs	r2, #64	; 0x40
 8002558:	2100      	movs	r1, #0
 800255a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b006      	add	sp, #24
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	ffff0000 	.word	0xffff0000

0800256c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2241      	movs	r2, #65	; 0x41
 800257a:	5c9b      	ldrb	r3, [r3, r2]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	001a      	movs	r2, r3
 8002580:	2328      	movs	r3, #40	; 0x28
 8002582:	4013      	ands	r3, r2
 8002584:	2b28      	cmp	r3, #40	; 0x28
 8002586:	d000      	beq.n	800258a <I2C_ITAddrCplt+0x1e>
 8002588:	e089      	b.n	800269e <I2C_ITAddrCplt+0x132>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	b2da      	uxtb	r2, r3
 8002594:	230f      	movs	r3, #15
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	2101      	movs	r1, #1
 800259a:	400a      	ands	r2, r1
 800259c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	230c      	movs	r3, #12
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	21fe      	movs	r1, #254	; 0xfe
 80025ae:	400a      	ands	r2, r1
 80025b0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	230a      	movs	r3, #10
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	0592      	lsls	r2, r2, #22
 80025c0:	0d92      	lsrs	r2, r2, #22
 80025c2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	2308      	movs	r3, #8
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	21fe      	movs	r1, #254	; 0xfe
 80025d2:	400a      	ands	r2, r1
 80025d4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d14b      	bne.n	8002676 <I2C_ITAddrCplt+0x10a>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80025de:	230a      	movs	r3, #10
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	09db      	lsrs	r3, r3, #7
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	230c      	movs	r3, #12
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	4053      	eors	r3, r2
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	001a      	movs	r2, r3
 80025f4:	2306      	movs	r3, #6
 80025f6:	4013      	ands	r3, r2
 80025f8:	d124      	bne.n	8002644 <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 80025fa:	230c      	movs	r3, #12
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	220a      	movs	r2, #10
 8002600:	18ba      	adds	r2, r7, r2
 8002602:	8812      	ldrh	r2, [r2, #0]
 8002604:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002614:	2b02      	cmp	r3, #2
 8002616:	d14a      	bne.n	80026ae <I2C_ITAddrCplt+0x142>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2208      	movs	r2, #8
 8002624:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2240      	movs	r2, #64	; 0x40
 800262a:	2100      	movs	r1, #0
 800262c:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800262e:	230c      	movs	r3, #12
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	881a      	ldrh	r2, [r3, #0]
 8002634:	230f      	movs	r3, #15
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	7819      	ldrb	r1, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	0018      	movs	r0, r3
 800263e:	f7ff fe55 	bl	80022ec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002642:	e034      	b.n	80026ae <I2C_ITAddrCplt+0x142>
        slaveaddrcode = ownadd2code;
 8002644:	240c      	movs	r4, #12
 8002646:	193b      	adds	r3, r7, r4
 8002648:	2208      	movs	r2, #8
 800264a:	18ba      	adds	r2, r7, r2
 800264c:	8812      	ldrh	r2, [r2, #0]
 800264e:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2104      	movs	r1, #4
 8002654:	0018      	movs	r0, r3
 8002656:	f000 fabf 	bl	8002bd8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2240      	movs	r2, #64	; 0x40
 800265e:	2100      	movs	r1, #0
 8002660:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002662:	193b      	adds	r3, r7, r4
 8002664:	881a      	ldrh	r2, [r3, #0]
 8002666:	230f      	movs	r3, #15
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	7819      	ldrb	r1, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0018      	movs	r0, r3
 8002670:	f7ff fe3c 	bl	80022ec <HAL_I2C_AddrCallback>
}
 8002674:	e01b      	b.n	80026ae <I2C_ITAddrCplt+0x142>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2104      	movs	r1, #4
 800267a:	0018      	movs	r0, r3
 800267c:	f000 faac 	bl	8002bd8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	2100      	movs	r1, #0
 8002686:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002688:	230c      	movs	r3, #12
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	881a      	ldrh	r2, [r3, #0]
 800268e:	230f      	movs	r3, #15
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	7819      	ldrb	r1, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	0018      	movs	r0, r3
 8002698:	f7ff fe28 	bl	80022ec <HAL_I2C_AddrCallback>
}
 800269c:	e007      	b.n	80026ae <I2C_ITAddrCplt+0x142>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2208      	movs	r2, #8
 80026a4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2240      	movs	r2, #64	; 0x40
 80026aa:	2100      	movs	r1, #0
 80026ac:	5499      	strb	r1, [r3, r2]
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b005      	add	sp, #20
 80026b4:	bd90      	pop	{r4, r7, pc}

080026b6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2242      	movs	r2, #66	; 0x42
 80026c2:	2100      	movs	r1, #0
 80026c4:	5499      	strb	r1, [r3, r2]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2241      	movs	r2, #65	; 0x41
 80026ca:	5c9b      	ldrb	r3, [r3, r2]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b29      	cmp	r3, #41	; 0x29
 80026d0:	d114      	bne.n	80026fc <I2C_ITSlaveSeqCplt+0x46>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2241      	movs	r2, #65	; 0x41
 80026d6:	2128      	movs	r1, #40	; 0x28
 80026d8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2221      	movs	r2, #33	; 0x21
 80026de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2101      	movs	r1, #1
 80026e4:	0018      	movs	r0, r3
 80026e6:	f000 fa77 	bl	8002bd8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2240      	movs	r2, #64	; 0x40
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7ff fde9 	bl	80022cc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80026fa:	e019      	b.n	8002730 <I2C_ITSlaveSeqCplt+0x7a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2241      	movs	r2, #65	; 0x41
 8002700:	5c9b      	ldrb	r3, [r3, r2]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b2a      	cmp	r3, #42	; 0x2a
 8002706:	d113      	bne.n	8002730 <I2C_ITSlaveSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2241      	movs	r2, #65	; 0x41
 800270c:	2128      	movs	r1, #40	; 0x28
 800270e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2222      	movs	r2, #34	; 0x22
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2102      	movs	r1, #2
 800271a:	0018      	movs	r0, r3
 800271c:	f000 fa5c 	bl	8002bd8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	2100      	movs	r1, #0
 8002726:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	0018      	movs	r0, r3
 800272c:	f7ff fdd6 	bl	80022dc <HAL_I2C_SlaveRxCpltCallback>
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}

08002738 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2220      	movs	r2, #32
 8002754:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2107      	movs	r1, #7
 800275a:	0018      	movs	r0, r3
 800275c:	f000 fa3c 	bl	8002bd8 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	0209      	lsls	r1, r1, #8
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	495c      	ldr	r1, [pc, #368]	; (80028f0 <I2C_ITSlaveCplt+0x1b8>)
 800277e:	400a      	ands	r2, r1
 8002780:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	0018      	movs	r0, r3
 8002786:	f000 f9df 	bl	8002b48 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	0b9b      	lsrs	r3, r3, #14
 800278e:	001a      	movs	r2, r3
 8002790:	2301      	movs	r3, #1
 8002792:	4013      	ands	r3, r2
 8002794:	d00b      	beq.n	80027ae <I2C_ITSlaveCplt+0x76>
  {
    if (hi2c->hdmatx != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	2b00      	cmp	r3, #0
 800279c:	d018      	beq.n	80027d0 <I2C_ITSlaveCplt+0x98>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027ac:	e010      	b.n	80027d0 <I2C_ITSlaveCplt+0x98>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	0bdb      	lsrs	r3, r3, #15
 80027b2:	001a      	movs	r2, r3
 80027b4:	2301      	movs	r3, #1
 80027b6:	4013      	ands	r3, r2
 80027b8:	d00a      	beq.n	80027d0 <I2C_ITSlaveCplt+0x98>
  {
    if (hi2c->hdmarx != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d006      	beq.n	80027d0 <I2C_ITSlaveCplt+0x98>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	001a      	movs	r2, r3
 80027d6:	2301      	movs	r3, #1
 80027d8:	4013      	ands	r3, r2
 80027da:	d020      	beq.n	800281e <I2C_ITSlaveCplt+0xe6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2204      	movs	r2, #4
 80027e0:	4393      	bics	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00c      	beq.n	800281e <I2C_ITSlaveCplt+0xe6>
    {
      hi2c->XferSize--;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <I2C_ITSlaveCplt+0xfc>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	2204      	movs	r2, #4
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2242      	movs	r2, #66	; 0x42
 800283e:	2100      	movs	r1, #0
 8002840:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <I2C_ITSlaveCplt+0x140>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	0011      	movs	r1, r2
 8002858:	0018      	movs	r0, r3
 800285a:	f000 f8a3 	bl	80029a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2241      	movs	r2, #65	; 0x41
 8002862:	5c9b      	ldrb	r3, [r3, r2]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b28      	cmp	r3, #40	; 0x28
 8002868:	d13e      	bne.n	80028e8 <I2C_ITSlaveCplt+0x1b0>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	0011      	movs	r1, r2
 8002870:	0018      	movs	r0, r3
 8002872:	f000 f841 	bl	80028f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002876:	e037      	b.n	80028e8 <I2C_ITSlaveCplt+0x1b0>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <I2C_ITSlaveCplt+0x1bc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <I2C_ITSlaveCplt+0x172>
    I2C_ITSlaveSeqCplt(hi2c);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0018      	movs	r0, r3
 8002886:	f7ff ff16 	bl	80026b6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <I2C_ITSlaveCplt+0x1bc>)
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2241      	movs	r2, #65	; 0x41
 8002894:	2120      	movs	r1, #32
 8002896:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	2100      	movs	r1, #0
 800289e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f7ff fd32 	bl	800230c <HAL_I2C_ListenCpltCallback>
}
 80028a8:	e01e      	b.n	80028e8 <I2C_ITSlaveCplt+0x1b0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2241      	movs	r2, #65	; 0x41
 80028ae:	5c9b      	ldrb	r3, [r3, r2]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b22      	cmp	r3, #34	; 0x22
 80028b4:	d10c      	bne.n	80028d0 <I2C_ITSlaveCplt+0x198>
    hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2241      	movs	r2, #65	; 0x41
 80028ba:	2120      	movs	r1, #32
 80028bc:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2240      	movs	r2, #64	; 0x40
 80028c2:	2100      	movs	r1, #0
 80028c4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7ff fd07 	bl	80022dc <HAL_I2C_SlaveRxCpltCallback>
}
 80028ce:	e00b      	b.n	80028e8 <I2C_ITSlaveCplt+0x1b0>
    hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2241      	movs	r2, #65	; 0x41
 80028d4:	2120      	movs	r1, #32
 80028d6:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2240      	movs	r2, #64	; 0x40
 80028dc:	2100      	movs	r1, #0
 80028de:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f7ff fcf2 	bl	80022cc <HAL_I2C_SlaveTxCpltCallback>
}
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b004      	add	sp, #16
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	fe00e800 	.word	0xfe00e800
 80028f4:	ffff0000 	.word	0xffff0000

080028f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a26      	ldr	r2, [pc, #152]	; (80029a0 <I2C_ITListenCplt+0xa8>)
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2241      	movs	r2, #65	; 0x41
 8002912:	2120      	movs	r1, #32
 8002914:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2242      	movs	r2, #66	; 0x42
 800291a:	2100      	movs	r1, #0
 800291c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	001a      	movs	r2, r3
 800292a:	2301      	movs	r3, #1
 800292c:	4013      	ands	r3, r2
 800292e:	d022      	beq.n	8002976 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	d012      	beq.n	8002976 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	2204      	movs	r2, #4
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2107      	movs	r1, #7
 800297a:	0018      	movs	r0, r3
 800297c:	f000 f92c 	bl	8002bd8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2210      	movs	r2, #16
 8002986:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	2100      	movs	r1, #0
 800298e:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff fcba 	bl	800230c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b002      	add	sp, #8
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	ffff0000 	.word	0xffff0000

080029a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80029ae:	200f      	movs	r0, #15
 80029b0:	183b      	adds	r3, r7, r0
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	2141      	movs	r1, #65	; 0x41
 80029b6:	5c52      	ldrb	r2, [r2, r1]
 80029b8:	701a      	strb	r2, [r3, #0]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2242      	movs	r2, #66	; 0x42
 80029be:	2100      	movs	r1, #0
 80029c0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a5b      	ldr	r2, [pc, #364]	; (8002b34 <I2C_ITError+0x190>)
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80029da:	183b      	adds	r3, r7, r0
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b28      	cmp	r3, #40	; 0x28
 80029e0:	d009      	beq.n	80029f6 <I2C_ITError+0x52>
 80029e2:	230f      	movs	r3, #15
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b29      	cmp	r3, #41	; 0x29
 80029ea:	d004      	beq.n	80029f6 <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80029ec:	230f      	movs	r3, #15
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b2a      	cmp	r3, #42	; 0x2a
 80029f4:	d10f      	bne.n	8002a16 <I2C_ITError+0x72>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2103      	movs	r1, #3
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f8ec 	bl	8002bd8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2241      	movs	r2, #65	; 0x41
 8002a04:	2128      	movs	r1, #40	; 0x28
 8002a06:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a49      	ldr	r2, [pc, #292]	; (8002b38 <I2C_ITError+0x194>)
 8002a12:	635a      	str	r2, [r3, #52]	; 0x34
 8002a14:	e014      	b.n	8002a40 <I2C_ITError+0x9c>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2107      	movs	r1, #7
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 f8dc 	bl	8002bd8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2241      	movs	r2, #65	; 0x41
 8002a24:	5c9b      	ldrb	r3, [r3, r2]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b60      	cmp	r3, #96	; 0x60
 8002a2a:	d003      	beq.n	8002a34 <I2C_ITError+0x90>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2241      	movs	r2, #65	; 0x41
 8002a30:	2120      	movs	r1, #32
 8002a32:	5499      	strb	r1, [r3, r2]
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	01db      	lsls	r3, r3, #7
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	01db      	lsls	r3, r3, #7
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d122      	bne.n	8002a9a <I2C_ITError+0xf6>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4937      	ldr	r1, [pc, #220]	; (8002b3c <I2C_ITError+0x198>)
 8002a60:	400a      	ands	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d05e      	beq.n	8002b2a <I2C_ITError+0x186>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	4a33      	ldr	r2, [pc, #204]	; (8002b40 <I2C_ITError+0x19c>)
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2240      	movs	r2, #64	; 0x40
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7ff f8c5 	bl	8001c10 <HAL_DMA_Abort_IT>
 8002a86:	1e03      	subs	r3, r0, #0
 8002a88:	d04f      	beq.n	8002b2a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	0018      	movs	r0, r3
 8002a96:	4790      	blx	r2
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a98:	e047      	b.n	8002b2a <I2C_ITError+0x186>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	401a      	ands	r2, r3
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d122      	bne.n	8002af4 <I2C_ITError+0x150>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4922      	ldr	r1, [pc, #136]	; (8002b44 <I2C_ITError+0x1a0>)
 8002aba:	400a      	ands	r2, r1
 8002abc:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d031      	beq.n	8002b2a <I2C_ITError+0x186>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <I2C_ITError+0x19c>)
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2240      	movs	r2, #64	; 0x40
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	5499      	strb	r1, [r3, r2]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	0018      	movs	r0, r3
 8002adc:	f7ff f898 	bl	8001c10 <HAL_DMA_Abort_IT>
 8002ae0:	1e03      	subs	r3, r0, #0
 8002ae2:	d022      	beq.n	8002b2a <I2C_ITError+0x186>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	0018      	movs	r0, r3
 8002af0:	4790      	blx	r2
}
 8002af2:	e01a      	b.n	8002b2a <I2C_ITError+0x186>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2241      	movs	r2, #65	; 0x41
 8002af8:	5c9b      	ldrb	r3, [r3, r2]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b60      	cmp	r3, #96	; 0x60
 8002afe:	d10c      	bne.n	8002b1a <I2C_ITError+0x176>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2241      	movs	r2, #65	; 0x41
 8002b04:	2120      	movs	r1, #32
 8002b06:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2240      	movs	r2, #64	; 0x40
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7ff fc0a 	bl	800232c <HAL_I2C_AbortCpltCallback>
}
 8002b18:	e007      	b.n	8002b2a <I2C_ITError+0x186>
    __HAL_UNLOCK(hi2c);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2240      	movs	r2, #64	; 0x40
 8002b1e:	2100      	movs	r1, #0
 8002b20:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff fbf9 	bl	800231c <HAL_I2C_ErrorCallback>
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	ffff0000 	.word	0xffff0000
 8002b38:	0800233d 	.word	0x0800233d
 8002b3c:	ffffbfff 	.word	0xffffbfff
 8002b40:	08002b8d 	.word	0x08002b8d
 8002b44:	ffff7fff 	.word	0xffff7fff

08002b48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2202      	movs	r2, #2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d103      	bne.n	8002b66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d007      	beq.n	8002b84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	430a      	orrs	r2, r1
 8002b82:	619a      	str	r2, [r3, #24]
  }
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2241      	movs	r2, #65	; 0x41
 8002bae:	5c9b      	ldrb	r3, [r3, r2]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b60      	cmp	r3, #96	; 0x60
 8002bb4:	d108      	bne.n	8002bc8 <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2241      	movs	r2, #65	; 0x41
 8002bba:	2120      	movs	r1, #32
 8002bbc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7ff fbb3 	bl	800232c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bc6:	e003      	b.n	8002bd0 <I2C_DMAAbort+0x44>
    HAL_I2C_ErrorCallback(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f7ff fba6 	bl	800231c <HAL_I2C_ErrorCallback>
}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b004      	add	sp, #16
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	000a      	movs	r2, r1
 8002be2:	1cbb      	adds	r3, r7, #2
 8002be4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002bea:	1cbb      	adds	r3, r7, #2
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d010      	beq.n	8002c16 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2242      	movs	r2, #66	; 0x42
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2241      	movs	r2, #65	; 0x41
 8002c00:	5c9b      	ldrb	r3, [r3, r2]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	001a      	movs	r2, r3
 8002c06:	2328      	movs	r3, #40	; 0x28
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b28      	cmp	r3, #40	; 0x28
 8002c0c:	d003      	beq.n	8002c16 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	22b0      	movs	r2, #176	; 0xb0
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002c16:	1cbb      	adds	r3, r7, #2
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d010      	beq.n	8002c42 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2244      	movs	r2, #68	; 0x44
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2241      	movs	r2, #65	; 0x41
 8002c2c:	5c9b      	ldrb	r3, [r3, r2]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	001a      	movs	r2, r3
 8002c32:	2328      	movs	r3, #40	; 0x28
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b28      	cmp	r3, #40	; 0x28
 8002c38:	d003      	beq.n	8002c42 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	22b0      	movs	r2, #176	; 0xb0
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002c42:	1cbb      	adds	r3, r7, #2
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	2204      	movs	r2, #4
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d003      	beq.n	8002c54 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	22b8      	movs	r2, #184	; 0xb8
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002c54:	1cbb      	adds	r3, r7, #2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	2211      	movs	r2, #17
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b11      	cmp	r3, #17
 8002c5e:	d103      	bne.n	8002c68 <I2C_Disable_IRQ+0x90>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2290      	movs	r2, #144	; 0x90
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002c68:	1cbb      	adds	r3, r7, #2
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	2212      	movs	r2, #18
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b12      	cmp	r3, #18
 8002c72:	d103      	bne.n	8002c7c <I2C_Disable_IRQ+0xa4>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8002c7c:	1cbb      	adds	r3, r7, #2
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	2212      	movs	r2, #18
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b12      	cmp	r3, #18
 8002c86:	d103      	bne.n	8002c90 <I2C_Disable_IRQ+0xb8>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2240      	movs	r2, #64	; 0x40
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43d9      	mvns	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]
}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b004      	add	sp, #16
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2241      	movs	r2, #65	; 0x41
 8002cba:	5c9b      	ldrb	r3, [r3, r2]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d138      	bne.n	8002d34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2240      	movs	r2, #64	; 0x40
 8002cc6:	5c9b      	ldrb	r3, [r3, r2]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e032      	b.n	8002d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2241      	movs	r2, #65	; 0x41
 8002cdc:	2124      	movs	r1, #36	; 0x24
 8002cde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2101      	movs	r1, #1
 8002cec:	438a      	bics	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4911      	ldr	r1, [pc, #68]	; (8002d40 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2241      	movs	r2, #65	; 0x41
 8002d24:	2120      	movs	r1, #32
 8002d26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2240      	movs	r2, #64	; 0x40
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	0018      	movs	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b002      	add	sp, #8
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	ffffefff 	.word	0xffffefff

08002d44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2241      	movs	r2, #65	; 0x41
 8002d52:	5c9b      	ldrb	r3, [r3, r2]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	d139      	bne.n	8002dce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2240      	movs	r2, #64	; 0x40
 8002d5e:	5c9b      	ldrb	r3, [r3, r2]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e033      	b.n	8002dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2240      	movs	r2, #64	; 0x40
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2241      	movs	r2, #65	; 0x41
 8002d74:	2124      	movs	r1, #36	; 0x24
 8002d76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2101      	movs	r1, #1
 8002d84:	438a      	bics	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a11      	ldr	r2, [pc, #68]	; (8002dd8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2101      	movs	r1, #1
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2241      	movs	r2, #65	; 0x41
 8002dbe:	2120      	movs	r1, #32
 8002dc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2240      	movs	r2, #64	; 0x40
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e000      	b.n	8002dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
  }
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b004      	add	sp, #16
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	fffff0ff 	.word	0xfffff0ff

08002ddc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d11f      	bne.n	8002e40 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	0013      	movs	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	189b      	adds	r3, r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4912      	ldr	r1, [pc, #72]	; (8002e58 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7fd f976 	bl	8000100 <__udivsi3>
 8002e14:	0003      	movs	r3, r0
 8002e16:	3301      	adds	r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e1a:	e008      	b.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e001      	b.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e009      	b.n	8002e42 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e2e:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	401a      	ands	r2, r3
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d0ed      	beq.n	8002e1c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	fffff9ff 	.word	0xfffff9ff
 8002e54:	20000000 	.word	0x20000000
 8002e58:	000f4240 	.word	0x000f4240

08002e5c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	23e0      	movs	r3, #224	; 0xe0
 8002e66:	01db      	lsls	r3, r3, #7
 8002e68:	4013      	ands	r3, r2
}
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000

08002e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e2f9      	b.n	800347a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <HAL_RCC_OscConfig+0x1e>
 8002e90:	e07c      	b.n	8002f8c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e92:	4bc3      	ldr	r3, [pc, #780]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2238      	movs	r2, #56	; 0x38
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e9c:	4bc0      	ldr	r3, [pc, #768]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x3e>
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d002      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x44>
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	4bb9      	ldr	r3, [pc, #740]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	029b      	lsls	r3, r3, #10
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d062      	beq.n	8002f8a <HAL_RCC_OscConfig+0x116>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d15e      	bne.n	8002f8a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e2d4      	b.n	800347a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	025b      	lsls	r3, r3, #9
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_OscConfig+0x78>
 8002edc:	4bb0      	ldr	r3, [pc, #704]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4baf      	ldr	r3, [pc, #700]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002ee2:	2180      	movs	r1, #128	; 0x80
 8002ee4:	0249      	lsls	r1, r1, #9
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e020      	b.n	8002f2e <HAL_RCC_OscConfig+0xba>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	23a0      	movs	r3, #160	; 0xa0
 8002ef2:	02db      	lsls	r3, r3, #11
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d10e      	bne.n	8002f16 <HAL_RCC_OscConfig+0xa2>
 8002ef8:	4ba9      	ldr	r3, [pc, #676]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4ba8      	ldr	r3, [pc, #672]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002efe:	2180      	movs	r1, #128	; 0x80
 8002f00:	02c9      	lsls	r1, r1, #11
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	4ba6      	ldr	r3, [pc, #664]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4ba5      	ldr	r3, [pc, #660]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002f0c:	2180      	movs	r1, #128	; 0x80
 8002f0e:	0249      	lsls	r1, r1, #9
 8002f10:	430a      	orrs	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e00b      	b.n	8002f2e <HAL_RCC_OscConfig+0xba>
 8002f16:	4ba2      	ldr	r3, [pc, #648]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4ba1      	ldr	r3, [pc, #644]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002f1c:	49a1      	ldr	r1, [pc, #644]	; (80031a4 <HAL_RCC_OscConfig+0x330>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	4b9f      	ldr	r3, [pc, #636]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4b9e      	ldr	r3, [pc, #632]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002f28:	499f      	ldr	r1, [pc, #636]	; (80031a8 <HAL_RCC_OscConfig+0x334>)
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d014      	beq.n	8002f60 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fe f8f1 	bl	800111c <HAL_GetTick>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fe f8ec 	bl	800111c <HAL_GetTick>
 8002f44:	0002      	movs	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e293      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f52:	4b93      	ldr	r3, [pc, #588]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	029b      	lsls	r3, r3, #10
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0xcc>
 8002f5e:	e015      	b.n	8002f8c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe f8dc 	bl	800111c <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6a:	f7fe f8d7 	bl	800111c <HAL_GetTick>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b64      	cmp	r3, #100	; 0x64
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e27e      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f7c:	4b88      	ldr	r3, [pc, #544]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	029b      	lsls	r3, r3, #10
 8002f84:	4013      	ands	r3, r2
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0xf6>
 8002f88:	e000      	b.n	8002f8c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2202      	movs	r2, #2
 8002f92:	4013      	ands	r3, r2
 8002f94:	d100      	bne.n	8002f98 <HAL_RCC_OscConfig+0x124>
 8002f96:	e099      	b.n	80030cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f98:	4b81      	ldr	r3, [pc, #516]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2238      	movs	r2, #56	; 0x38
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa2:	4b7f      	ldr	r3, [pc, #508]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	4013      	ands	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b10      	cmp	r3, #16
 8002fb0:	d102      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x144>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d002      	beq.n	8002fbe <HAL_RCC_OscConfig+0x14a>
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d135      	bne.n	800302a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fbe:	4b78      	ldr	r3, [pc, #480]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x162>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e251      	b.n	800347a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b72      	ldr	r3, [pc, #456]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a74      	ldr	r2, [pc, #464]	; (80031ac <HAL_RCC_OscConfig+0x338>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	021a      	lsls	r2, r3, #8
 8002fe6:	4b6e      	ldr	r3, [pc, #440]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d112      	bne.n	8003018 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ff2:	4b6b      	ldr	r3, [pc, #428]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6e      	ldr	r2, [pc, #440]	; (80031b0 <HAL_RCC_OscConfig+0x33c>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	4b67      	ldr	r3, [pc, #412]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8003002:	430a      	orrs	r2, r1
 8003004:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003006:	4b66      	ldr	r3, [pc, #408]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0adb      	lsrs	r3, r3, #11
 800300c:	2207      	movs	r2, #7
 800300e:	4013      	ands	r3, r2
 8003010:	4a68      	ldr	r2, [pc, #416]	; (80031b4 <HAL_RCC_OscConfig+0x340>)
 8003012:	40da      	lsrs	r2, r3
 8003014:	4b68      	ldr	r3, [pc, #416]	; (80031b8 <HAL_RCC_OscConfig+0x344>)
 8003016:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003018:	4b68      	ldr	r3, [pc, #416]	; (80031bc <HAL_RCC_OscConfig+0x348>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0018      	movs	r0, r3
 800301e:	f7fe f823 	bl	8001068 <HAL_InitTick>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d051      	beq.n	80030ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e227      	b.n	800347a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d030      	beq.n	8003094 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003032:	4b5b      	ldr	r3, [pc, #364]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5e      	ldr	r2, [pc, #376]	; (80031b0 <HAL_RCC_OscConfig+0x33c>)
 8003038:	4013      	ands	r3, r2
 800303a:	0019      	movs	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	4b57      	ldr	r3, [pc, #348]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003046:	4b56      	ldr	r3, [pc, #344]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	0049      	lsls	r1, r1, #1
 8003050:	430a      	orrs	r2, r1
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe f862 	bl	800111c <HAL_GetTick>
 8003058:	0003      	movs	r3, r0
 800305a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305e:	f7fe f85d 	bl	800111c <HAL_GetTick>
 8003062:	0002      	movs	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e204      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003070:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4013      	ands	r3, r2
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	4b48      	ldr	r3, [pc, #288]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a4a      	ldr	r2, [pc, #296]	; (80031ac <HAL_RCC_OscConfig+0x338>)
 8003082:	4013      	ands	r3, r2
 8003084:	0019      	movs	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	021a      	lsls	r2, r3, #8
 800308c:	4b44      	ldr	r3, [pc, #272]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	e01b      	b.n	80030cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003094:	4b42      	ldr	r3, [pc, #264]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 800309a:	4949      	ldr	r1, [pc, #292]	; (80031c0 <HAL_RCC_OscConfig+0x34c>)
 800309c:	400a      	ands	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe f83c 	bl	800111c <HAL_GetTick>
 80030a4:	0003      	movs	r3, r0
 80030a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030aa:	f7fe f837 	bl	800111c <HAL_GetTick>
 80030ae:	0002      	movs	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e1de      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030bc:	4b38      	ldr	r3, [pc, #224]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4013      	ands	r3, r2
 80030c6:	d1f0      	bne.n	80030aa <HAL_RCC_OscConfig+0x236>
 80030c8:	e000      	b.n	80030cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2208      	movs	r2, #8
 80030d2:	4013      	ands	r3, r2
 80030d4:	d047      	beq.n	8003166 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80030d6:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2238      	movs	r2, #56	; 0x38
 80030dc:	4013      	ands	r3, r2
 80030de:	2b18      	cmp	r3, #24
 80030e0:	d10a      	bne.n	80030f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80030e2:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 80030e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e6:	2202      	movs	r2, #2
 80030e8:	4013      	ands	r3, r2
 80030ea:	d03c      	beq.n	8003166 <HAL_RCC_OscConfig+0x2f2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d138      	bne.n	8003166 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e1c0      	b.n	800347a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d019      	beq.n	8003134 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003100:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8003102:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003104:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8003106:	2101      	movs	r1, #1
 8003108:	430a      	orrs	r2, r1
 800310a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe f806 	bl	800111c <HAL_GetTick>
 8003110:	0003      	movs	r3, r0
 8003112:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003116:	f7fe f801 	bl	800111c <HAL_GetTick>
 800311a:	0002      	movs	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e1a8      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 800312a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312c:	2202      	movs	r2, #2
 800312e:	4013      	ands	r3, r2
 8003130:	d0f1      	beq.n	8003116 <HAL_RCC_OscConfig+0x2a2>
 8003132:	e018      	b.n	8003166 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003134:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8003136:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003138:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 800313a:	2101      	movs	r1, #1
 800313c:	438a      	bics	r2, r1
 800313e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fd ffec 	bl	800111c <HAL_GetTick>
 8003144:	0003      	movs	r3, r0
 8003146:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314a:	f7fd ffe7 	bl	800111c <HAL_GetTick>
 800314e:	0002      	movs	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e18e      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800315c:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 800315e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003160:	2202      	movs	r2, #2
 8003162:	4013      	ands	r3, r2
 8003164:	d1f1      	bne.n	800314a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2204      	movs	r2, #4
 800316c:	4013      	ands	r3, r2
 800316e:	d100      	bne.n	8003172 <HAL_RCC_OscConfig+0x2fe>
 8003170:	e0c6      	b.n	8003300 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003172:	231f      	movs	r3, #31
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	2200      	movs	r2, #0
 8003178:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2238      	movs	r2, #56	; 0x38
 8003180:	4013      	ands	r3, r2
 8003182:	2b20      	cmp	r3, #32
 8003184:	d11e      	bne.n	80031c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_OscConfig+0x32c>)
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	2202      	movs	r2, #2
 800318c:	4013      	ands	r3, r2
 800318e:	d100      	bne.n	8003192 <HAL_RCC_OscConfig+0x31e>
 8003190:	e0b6      	b.n	8003300 <HAL_RCC_OscConfig+0x48c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d000      	beq.n	800319c <HAL_RCC_OscConfig+0x328>
 800319a:	e0b1      	b.n	8003300 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e16c      	b.n	800347a <HAL_RCC_OscConfig+0x606>
 80031a0:	40021000 	.word	0x40021000
 80031a4:	fffeffff 	.word	0xfffeffff
 80031a8:	fffbffff 	.word	0xfffbffff
 80031ac:	ffff80ff 	.word	0xffff80ff
 80031b0:	ffffc7ff 	.word	0xffffc7ff
 80031b4:	00f42400 	.word	0x00f42400
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000004 	.word	0x20000004
 80031c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031c4:	4baf      	ldr	r3, [pc, #700]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80031c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	055b      	lsls	r3, r3, #21
 80031cc:	4013      	ands	r3, r2
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_OscConfig+0x360>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x362>
 80031d4:	2300      	movs	r3, #0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d011      	beq.n	80031fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	4baa      	ldr	r3, [pc, #680]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80031dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031de:	4ba9      	ldr	r3, [pc, #676]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	0549      	lsls	r1, r1, #21
 80031e4:	430a      	orrs	r2, r1
 80031e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80031e8:	4ba6      	ldr	r3, [pc, #664]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80031ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	055b      	lsls	r3, r3, #21
 80031f0:	4013      	ands	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80031f6:	231f      	movs	r3, #31
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fe:	4ba2      	ldr	r3, [pc, #648]	; (8003488 <HAL_RCC_OscConfig+0x614>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4013      	ands	r3, r2
 8003208:	d11a      	bne.n	8003240 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800320a:	4b9f      	ldr	r3, [pc, #636]	; (8003488 <HAL_RCC_OscConfig+0x614>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4b9e      	ldr	r3, [pc, #632]	; (8003488 <HAL_RCC_OscConfig+0x614>)
 8003210:	2180      	movs	r1, #128	; 0x80
 8003212:	0049      	lsls	r1, r1, #1
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003218:	f7fd ff80 	bl	800111c <HAL_GetTick>
 800321c:	0003      	movs	r3, r0
 800321e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003222:	f7fd ff7b 	bl	800111c <HAL_GetTick>
 8003226:	0002      	movs	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e122      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003234:	4b94      	ldr	r3, [pc, #592]	; (8003488 <HAL_RCC_OscConfig+0x614>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4013      	ands	r3, r2
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d106      	bne.n	8003256 <HAL_RCC_OscConfig+0x3e2>
 8003248:	4b8e      	ldr	r3, [pc, #568]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 800324a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800324c:	4b8d      	ldr	r3, [pc, #564]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 800324e:	2101      	movs	r1, #1
 8003250:	430a      	orrs	r2, r1
 8003252:	65da      	str	r2, [r3, #92]	; 0x5c
 8003254:	e01c      	b.n	8003290 <HAL_RCC_OscConfig+0x41c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b05      	cmp	r3, #5
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x404>
 800325e:	4b89      	ldr	r3, [pc, #548]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 8003260:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003262:	4b88      	ldr	r3, [pc, #544]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 8003264:	2104      	movs	r1, #4
 8003266:	430a      	orrs	r2, r1
 8003268:	65da      	str	r2, [r3, #92]	; 0x5c
 800326a:	4b86      	ldr	r3, [pc, #536]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 800326c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800326e:	4b85      	ldr	r3, [pc, #532]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 8003270:	2101      	movs	r1, #1
 8003272:	430a      	orrs	r2, r1
 8003274:	65da      	str	r2, [r3, #92]	; 0x5c
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0x41c>
 8003278:	4b82      	ldr	r3, [pc, #520]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 800327a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800327c:	4b81      	ldr	r3, [pc, #516]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 800327e:	2101      	movs	r1, #1
 8003280:	438a      	bics	r2, r1
 8003282:	65da      	str	r2, [r3, #92]	; 0x5c
 8003284:	4b7f      	ldr	r3, [pc, #508]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 8003286:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003288:	4b7e      	ldr	r3, [pc, #504]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 800328a:	2104      	movs	r1, #4
 800328c:	438a      	bics	r2, r1
 800328e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d014      	beq.n	80032c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd ff40 	bl	800111c <HAL_GetTick>
 800329c:	0003      	movs	r3, r0
 800329e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a0:	e009      	b.n	80032b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fd ff3b 	bl	800111c <HAL_GetTick>
 80032a6:	0002      	movs	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	4a77      	ldr	r2, [pc, #476]	; (800348c <HAL_RCC_OscConfig+0x618>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e0e1      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b6:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	2202      	movs	r2, #2
 80032bc:	4013      	ands	r3, r2
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x42e>
 80032c0:	e013      	b.n	80032ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fd ff2b 	bl	800111c <HAL_GetTick>
 80032c6:	0003      	movs	r3, r0
 80032c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ca:	e009      	b.n	80032e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fd ff26 	bl	800111c <HAL_GetTick>
 80032d0:	0002      	movs	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	4a6d      	ldr	r2, [pc, #436]	; (800348c <HAL_RCC_OscConfig+0x618>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e0cc      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e0:	4b68      	ldr	r3, [pc, #416]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	2202      	movs	r2, #2
 80032e6:	4013      	ands	r3, r2
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80032ea:	231f      	movs	r3, #31
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d105      	bne.n	8003300 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80032f4:	4b63      	ldr	r3, [pc, #396]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80032f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f8:	4b62      	ldr	r3, [pc, #392]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80032fa:	4965      	ldr	r1, [pc, #404]	; (8003490 <HAL_RCC_OscConfig+0x61c>)
 80032fc:	400a      	ands	r2, r1
 80032fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d100      	bne.n	800330a <HAL_RCC_OscConfig+0x496>
 8003308:	e0b6      	b.n	8003478 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800330a:	4b5e      	ldr	r3, [pc, #376]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2238      	movs	r2, #56	; 0x38
 8003310:	4013      	ands	r3, r2
 8003312:	2b10      	cmp	r3, #16
 8003314:	d100      	bne.n	8003318 <HAL_RCC_OscConfig+0x4a4>
 8003316:	e07e      	b.n	8003416 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d153      	bne.n	80033c8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003320:	4b58      	ldr	r3, [pc, #352]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b57      	ldr	r3, [pc, #348]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 8003326:	495b      	ldr	r1, [pc, #364]	; (8003494 <HAL_RCC_OscConfig+0x620>)
 8003328:	400a      	ands	r2, r1
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fd fef6 	bl	800111c <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003336:	f7fd fef1 	bl	800111c <HAL_GetTick>
 800333a:	0002      	movs	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e098      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003348:	4b4e      	ldr	r3, [pc, #312]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	049b      	lsls	r3, r3, #18
 8003350:	4013      	ands	r3, r2
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003354:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4a4f      	ldr	r2, [pc, #316]	; (8003498 <HAL_RCC_OscConfig+0x624>)
 800335a:	4013      	ands	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	431a      	orrs	r2, r3
 800337c:	4b41      	ldr	r3, [pc, #260]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 800337e:	430a      	orrs	r2, r1
 8003380:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003382:	4b40      	ldr	r3, [pc, #256]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b3f      	ldr	r3, [pc, #252]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	0449      	lsls	r1, r1, #17
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003390:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	4b3b      	ldr	r3, [pc, #236]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	0549      	lsls	r1, r1, #21
 800339a:	430a      	orrs	r2, r1
 800339c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339e:	f7fd febd 	bl	800111c <HAL_GetTick>
 80033a2:	0003      	movs	r3, r0
 80033a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fd feb8 	bl	800111c <HAL_GetTick>
 80033ac:	0002      	movs	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e05f      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ba:	4b32      	ldr	r3, [pc, #200]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	049b      	lsls	r3, r3, #18
 80033c2:	4013      	ands	r3, r2
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x534>
 80033c6:	e057      	b.n	8003478 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80033ce:	4931      	ldr	r1, [pc, #196]	; (8003494 <HAL_RCC_OscConfig+0x620>)
 80033d0:	400a      	ands	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80033d4:	4b2b      	ldr	r3, [pc, #172]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80033da:	2103      	movs	r1, #3
 80033dc:	438a      	bics	r2, r1
 80033de:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80033e0:	4b28      	ldr	r3, [pc, #160]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	4b27      	ldr	r3, [pc, #156]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 80033e6:	492d      	ldr	r1, [pc, #180]	; (800349c <HAL_RCC_OscConfig+0x628>)
 80033e8:	400a      	ands	r2, r1
 80033ea:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd fe96 	bl	800111c <HAL_GetTick>
 80033f0:	0003      	movs	r3, r0
 80033f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f6:	f7fd fe91 	bl	800111c <HAL_GetTick>
 80033fa:	0002      	movs	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e038      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003408:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	049b      	lsls	r3, r3, #18
 8003410:	4013      	ands	r3, r2
 8003412:	d1f0      	bne.n	80033f6 <HAL_RCC_OscConfig+0x582>
 8003414:	e030      	b.n	8003478 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e02b      	b.n	800347a <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_RCC_OscConfig+0x610>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2203      	movs	r2, #3
 800342c:	401a      	ands	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	429a      	cmp	r2, r3
 8003434:	d11e      	bne.n	8003474 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2270      	movs	r2, #112	; 0x70
 800343a:	401a      	ands	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d117      	bne.n	8003474 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	23fe      	movs	r3, #254	; 0xfe
 8003448:	01db      	lsls	r3, r3, #7
 800344a:	401a      	ands	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d10e      	bne.n	8003474 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	23f8      	movs	r3, #248	; 0xf8
 800345a:	039b      	lsls	r3, r3, #14
 800345c:	401a      	ands	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003462:	429a      	cmp	r2, r3
 8003464:	d106      	bne.n	8003474 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	0f5b      	lsrs	r3, r3, #29
 800346a:	075a      	lsls	r2, r3, #29
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	0018      	movs	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	b008      	add	sp, #32
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	40021000 	.word	0x40021000
 8003488:	40007000 	.word	0x40007000
 800348c:	00001388 	.word	0x00001388
 8003490:	efffffff 	.word	0xefffffff
 8003494:	feffffff 	.word	0xfeffffff
 8003498:	1fc1808c 	.word	0x1fc1808c
 800349c:	effeffff 	.word	0xeffeffff

080034a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0e9      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b76      	ldr	r3, [pc, #472]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2207      	movs	r2, #7
 80034ba:	4013      	ands	r3, r2
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d91e      	bls.n	8003500 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b73      	ldr	r3, [pc, #460]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2207      	movs	r2, #7
 80034c8:	4393      	bics	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	4b70      	ldr	r3, [pc, #448]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034d4:	f7fd fe22 	bl	800111c <HAL_GetTick>
 80034d8:	0003      	movs	r3, r0
 80034da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034dc:	e009      	b.n	80034f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034de:	f7fd fe1d 	bl	800111c <HAL_GetTick>
 80034e2:	0002      	movs	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	4a6a      	ldr	r2, [pc, #424]	; (8003694 <HAL_RCC_ClockConfig+0x1f4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e0ca      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034f2:	4b67      	ldr	r3, [pc, #412]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2207      	movs	r2, #7
 80034f8:	4013      	ands	r3, r2
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d1ee      	bne.n	80034de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2202      	movs	r2, #2
 8003506:	4013      	ands	r3, r2
 8003508:	d015      	beq.n	8003536 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2204      	movs	r2, #4
 8003510:	4013      	ands	r3, r2
 8003512:	d006      	beq.n	8003522 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003514:	4b60      	ldr	r3, [pc, #384]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	4b5f      	ldr	r3, [pc, #380]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 800351a:	21e0      	movs	r1, #224	; 0xe0
 800351c:	01c9      	lsls	r1, r1, #7
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003522:	4b5d      	ldr	r3, [pc, #372]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	4a5d      	ldr	r2, [pc, #372]	; (800369c <HAL_RCC_ClockConfig+0x1fc>)
 8003528:	4013      	ands	r3, r2
 800352a:	0019      	movs	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	4b59      	ldr	r3, [pc, #356]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 8003532:	430a      	orrs	r2, r1
 8003534:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2201      	movs	r2, #1
 800353c:	4013      	ands	r3, r2
 800353e:	d057      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003548:	4b53      	ldr	r3, [pc, #332]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	029b      	lsls	r3, r3, #10
 8003550:	4013      	ands	r3, r2
 8003552:	d12b      	bne.n	80035ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e097      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d107      	bne.n	8003570 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003560:	4b4d      	ldr	r3, [pc, #308]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	049b      	lsls	r3, r3, #18
 8003568:	4013      	ands	r3, r2
 800356a:	d11f      	bne.n	80035ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e08b      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d107      	bne.n	8003588 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003578:	4b47      	ldr	r3, [pc, #284]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4013      	ands	r3, r2
 8003582:	d113      	bne.n	80035ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e07f      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d106      	bne.n	800359e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003590:	4b41      	ldr	r3, [pc, #260]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 8003592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003594:	2202      	movs	r2, #2
 8003596:	4013      	ands	r3, r2
 8003598:	d108      	bne.n	80035ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e074      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800359e:	4b3e      	ldr	r3, [pc, #248]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 80035a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a2:	2202      	movs	r2, #2
 80035a4:	4013      	ands	r3, r2
 80035a6:	d101      	bne.n	80035ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e06d      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ac:	4b3a      	ldr	r3, [pc, #232]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2207      	movs	r2, #7
 80035b2:	4393      	bics	r3, r2
 80035b4:	0019      	movs	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	4b37      	ldr	r3, [pc, #220]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c0:	f7fd fdac 	bl	800111c <HAL_GetTick>
 80035c4:	0003      	movs	r3, r0
 80035c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c8:	e009      	b.n	80035de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ca:	f7fd fda7 	bl	800111c <HAL_GetTick>
 80035ce:	0002      	movs	r2, r0
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	4a2f      	ldr	r2, [pc, #188]	; (8003694 <HAL_RCC_ClockConfig+0x1f4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e054      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2238      	movs	r2, #56	; 0x38
 80035e4:	401a      	ands	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1ec      	bne.n	80035ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b27      	ldr	r3, [pc, #156]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2207      	movs	r2, #7
 80035f6:	4013      	ands	r3, r2
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d21e      	bcs.n	800363c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2207      	movs	r2, #7
 8003604:	4393      	bics	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	4b21      	ldr	r3, [pc, #132]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003610:	f7fd fd84 	bl	800111c <HAL_GetTick>
 8003614:	0003      	movs	r3, r0
 8003616:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003618:	e009      	b.n	800362e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800361a:	f7fd fd7f 	bl	800111c <HAL_GetTick>
 800361e:	0002      	movs	r2, r0
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	4a1b      	ldr	r2, [pc, #108]	; (8003694 <HAL_RCC_ClockConfig+0x1f4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e02c      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800362e:	4b18      	ldr	r3, [pc, #96]	; (8003690 <HAL_RCC_ClockConfig+0x1f0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2207      	movs	r2, #7
 8003634:	4013      	ands	r3, r2
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d1ee      	bne.n	800361a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2204      	movs	r2, #4
 8003642:	4013      	ands	r3, r2
 8003644:	d009      	beq.n	800365a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <HAL_RCC_ClockConfig+0x200>)
 800364c:	4013      	ands	r3, r2
 800364e:	0019      	movs	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	4b10      	ldr	r3, [pc, #64]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800365a:	f000 f829 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800365e:	0001      	movs	r1, r0
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <HAL_RCC_ClockConfig+0x1f8>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	220f      	movs	r2, #15
 8003668:	401a      	ands	r2, r3
 800366a:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_RCC_ClockConfig+0x204>)
 800366c:	0092      	lsls	r2, r2, #2
 800366e:	58d3      	ldr	r3, [r2, r3]
 8003670:	221f      	movs	r2, #31
 8003672:	4013      	ands	r3, r2
 8003674:	000a      	movs	r2, r1
 8003676:	40da      	lsrs	r2, r3
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_ClockConfig+0x208>)
 800367a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x20c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	0018      	movs	r0, r3
 8003682:	f7fd fcf1 	bl	8001068 <HAL_InitTick>
 8003686:	0003      	movs	r3, r0
}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b004      	add	sp, #16
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40022000 	.word	0x40022000
 8003694:	00001388 	.word	0x00001388
 8003698:	40021000 	.word	0x40021000
 800369c:	fffff0ff 	.word	0xfffff0ff
 80036a0:	ffff8fff 	.word	0xffff8fff
 80036a4:	08005ec0 	.word	0x08005ec0
 80036a8:	20000000 	.word	0x20000000
 80036ac:	20000004 	.word	0x20000004

080036b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2238      	movs	r2, #56	; 0x38
 80036bc:	4013      	ands	r3, r2
 80036be:	d10f      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80036c0:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0adb      	lsrs	r3, r3, #11
 80036c6:	2207      	movs	r2, #7
 80036c8:	4013      	ands	r3, r2
 80036ca:	2201      	movs	r2, #1
 80036cc:	409a      	lsls	r2, r3
 80036ce:	0013      	movs	r3, r2
 80036d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	4835      	ldr	r0, [pc, #212]	; (80037ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80036d6:	f7fc fd13 	bl	8000100 <__udivsi3>
 80036da:	0003      	movs	r3, r0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	e05d      	b.n	800379c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2238      	movs	r2, #56	; 0x38
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d102      	bne.n	80036f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036ec:	4b30      	ldr	r3, [pc, #192]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	e054      	b.n	800379c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036f2:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2238      	movs	r2, #56	; 0x38
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d138      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80036fe:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2203      	movs	r2, #3
 8003704:	4013      	ands	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003708:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	2207      	movs	r2, #7
 8003710:	4013      	ands	r3, r2
 8003712:	3301      	adds	r3, #1
 8003714:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d10d      	bne.n	8003738 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	4824      	ldr	r0, [pc, #144]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003720:	f7fc fcee 	bl	8000100 <__udivsi3>
 8003724:	0003      	movs	r3, r0
 8003726:	0019      	movs	r1, r3
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	227f      	movs	r2, #127	; 0x7f
 8003730:	4013      	ands	r3, r2
 8003732:	434b      	muls	r3, r1
 8003734:	617b      	str	r3, [r7, #20]
        break;
 8003736:	e00d      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	481c      	ldr	r0, [pc, #112]	; (80037ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800373c:	f7fc fce0 	bl	8000100 <__udivsi3>
 8003740:	0003      	movs	r3, r0
 8003742:	0019      	movs	r1, r3
 8003744:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	227f      	movs	r2, #127	; 0x7f
 800374c:	4013      	ands	r3, r2
 800374e:	434b      	muls	r3, r1
 8003750:	617b      	str	r3, [r7, #20]
        break;
 8003752:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0f5b      	lsrs	r3, r3, #29
 800375a:	2207      	movs	r2, #7
 800375c:	4013      	ands	r3, r2
 800375e:	3301      	adds	r3, #1
 8003760:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	6978      	ldr	r0, [r7, #20]
 8003766:	f7fc fccb 	bl	8000100 <__udivsi3>
 800376a:	0003      	movs	r3, r0
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	e015      	b.n	800379c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2238      	movs	r2, #56	; 0x38
 8003776:	4013      	ands	r3, r2
 8003778:	2b20      	cmp	r3, #32
 800377a:	d103      	bne.n	8003784 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e00b      	b.n	800379c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2238      	movs	r2, #56	; 0x38
 800378a:	4013      	ands	r3, r2
 800378c:	2b18      	cmp	r3, #24
 800378e:	d103      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003790:	23fa      	movs	r3, #250	; 0xfa
 8003792:	01db      	lsls	r3, r3, #7
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	e001      	b.n	800379c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800379c:	693b      	ldr	r3, [r7, #16]
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b006      	add	sp, #24
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	40021000 	.word	0x40021000
 80037ac:	00f42400 	.word	0x00f42400
 80037b0:	007a1200 	.word	0x007a1200

080037b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b8:	4b02      	ldr	r3, [pc, #8]	; (80037c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	20000000 	.word	0x20000000

080037c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c8:	b5b0      	push	{r4, r5, r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037cc:	f7ff fff2 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 80037d0:	0004      	movs	r4, r0
 80037d2:	f7ff fb43 	bl	8002e5c <LL_RCC_GetAPB1Prescaler>
 80037d6:	0003      	movs	r3, r0
 80037d8:	0b1a      	lsrs	r2, r3, #12
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037dc:	0092      	lsls	r2, r2, #2
 80037de:	58d3      	ldr	r3, [r2, r3]
 80037e0:	221f      	movs	r2, #31
 80037e2:	4013      	ands	r3, r2
 80037e4:	40dc      	lsrs	r4, r3
 80037e6:	0023      	movs	r3, r4
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bdb0      	pop	{r4, r5, r7, pc}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	08005f00 	.word	0x08005f00

080037f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80037fc:	2313      	movs	r3, #19
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003804:	2312      	movs	r3, #18
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	029b      	lsls	r3, r3, #10
 8003814:	4013      	ands	r3, r2
 8003816:	d100      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003818:	e0a4      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381a:	2311      	movs	r3, #17
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003822:	4b87      	ldr	r3, [pc, #540]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	055b      	lsls	r3, r3, #21
 800382a:	4013      	ands	r3, r2
 800382c:	d111      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382e:	4b84      	ldr	r3, [pc, #528]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003832:	4b83      	ldr	r3, [pc, #524]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003834:	2180      	movs	r1, #128	; 0x80
 8003836:	0549      	lsls	r1, r1, #21
 8003838:	430a      	orrs	r2, r1
 800383a:	63da      	str	r2, [r3, #60]	; 0x3c
 800383c:	4b80      	ldr	r3, [pc, #512]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800383e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	055b      	lsls	r3, r3, #21
 8003844:	4013      	ands	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384a:	2311      	movs	r3, #17
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	2201      	movs	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003852:	4b7c      	ldr	r3, [pc, #496]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4b7b      	ldr	r3, [pc, #492]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003858:	2180      	movs	r1, #128	; 0x80
 800385a:	0049      	lsls	r1, r1, #1
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003860:	f7fd fc5c 	bl	800111c <HAL_GetTick>
 8003864:	0003      	movs	r3, r0
 8003866:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003868:	e00b      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386a:	f7fd fc57 	bl	800111c <HAL_GetTick>
 800386e:	0002      	movs	r2, r0
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d904      	bls.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8003878:	2313      	movs	r3, #19
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2203      	movs	r2, #3
 800387e:	701a      	strb	r2, [r3, #0]
        break;
 8003880:	e005      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003882:	4b70      	ldr	r3, [pc, #448]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4013      	ands	r3, r2
 800388c:	d0ed      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800388e:	2313      	movs	r3, #19
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d154      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003898:	4b69      	ldr	r3, [pc, #420]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800389a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800389c:	23c0      	movs	r3, #192	; 0xc0
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4013      	ands	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d019      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xea>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d014      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038b4:	4b62      	ldr	r3, [pc, #392]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	4a63      	ldr	r2, [pc, #396]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038be:	4b60      	ldr	r3, [pc, #384]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80038c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038c2:	4b5f      	ldr	r3, [pc, #380]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80038c4:	2180      	movs	r1, #128	; 0x80
 80038c6:	0249      	lsls	r1, r1, #9
 80038c8:	430a      	orrs	r2, r1
 80038ca:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038cc:	4b5c      	ldr	r3, [pc, #368]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80038ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038d0:	4b5b      	ldr	r3, [pc, #364]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80038d2:	495e      	ldr	r1, [pc, #376]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d4:	400a      	ands	r2, r1
 80038d6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038d8:	4b59      	ldr	r3, [pc, #356]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2201      	movs	r2, #1
 80038e2:	4013      	ands	r3, r2
 80038e4:	d016      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fd fc19 	bl	800111c <HAL_GetTick>
 80038ea:	0003      	movs	r3, r0
 80038ec:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ee:	e00c      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f0:	f7fd fc14 	bl	800111c <HAL_GetTick>
 80038f4:	0002      	movs	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	4a55      	ldr	r2, [pc, #340]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d904      	bls.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8003900:	2313      	movs	r3, #19
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	2203      	movs	r2, #3
 8003906:	701a      	strb	r2, [r3, #0]
            break;
 8003908:	e004      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390a:	4b4d      	ldr	r3, [pc, #308]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800390c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390e:	2202      	movs	r2, #2
 8003910:	4013      	ands	r3, r2
 8003912:	d0ed      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8003914:	2313      	movs	r3, #19
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800391e:	4b48      	ldr	r3, [pc, #288]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	4a49      	ldr	r2, [pc, #292]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003924:	4013      	ands	r3, r2
 8003926:	0019      	movs	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	4b44      	ldr	r3, [pc, #272]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800392e:	430a      	orrs	r2, r1
 8003930:	65da      	str	r2, [r3, #92]	; 0x5c
 8003932:	e00c      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003934:	2312      	movs	r3, #18
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2213      	movs	r2, #19
 800393a:	18ba      	adds	r2, r7, r2
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	e005      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003942:	2312      	movs	r3, #18
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	2213      	movs	r2, #19
 8003948:	18ba      	adds	r2, r7, r2
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800394e:	2311      	movs	r3, #17
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d105      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003958:	4b39      	ldr	r3, [pc, #228]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800395a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800395c:	4b38      	ldr	r3, [pc, #224]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800395e:	493d      	ldr	r1, [pc, #244]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003960:	400a      	ands	r2, r1
 8003962:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	4013      	ands	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003972:	2203      	movs	r2, #3
 8003974:	4393      	bics	r3, r2
 8003976:	0019      	movs	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	4b30      	ldr	r3, [pc, #192]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800397e:	430a      	orrs	r2, r1
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2202      	movs	r2, #2
 8003988:	4013      	ands	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800398c:	4b2c      	ldr	r3, [pc, #176]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003990:	220c      	movs	r2, #12
 8003992:	4393      	bics	r3, r2
 8003994:	0019      	movs	r1, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800399c:	430a      	orrs	r2, r1
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2240      	movs	r2, #64	; 0x40
 80039a6:	4013      	ands	r3, r2
 80039a8:	d009      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	0019      	movs	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039ba:	430a      	orrs	r2, r1
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	01db      	lsls	r3, r3, #7
 80039c6:	4013      	ands	r3, r2
 80039c8:	d015      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039ca:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	0899      	lsrs	r1, r3, #2
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039d8:	430a      	orrs	r2, r1
 80039da:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	05db      	lsls	r3, r3, #23
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d106      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80039e8:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039ee:	2180      	movs	r1, #128	; 0x80
 80039f0:	0249      	lsls	r1, r1, #9
 80039f2:	430a      	orrs	r2, r1
 80039f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	4013      	ands	r3, r2
 8003a00:	d016      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003a12:	430a      	orrs	r2, r1
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	01db      	lsls	r3, r3, #7
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d106      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	0249      	lsls	r1, r1, #9
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8003a30:	2312      	movs	r3, #18
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	781b      	ldrb	r3, [r3, #0]
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b006      	add	sp, #24
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40007000 	.word	0x40007000
 8003a48:	fffffcff 	.word	0xfffffcff
 8003a4c:	fffeffff 	.word	0xfffeffff
 8003a50:	00001388 	.word	0x00001388
 8003a54:	efffffff 	.word	0xefffffff
 8003a58:	ffffcfff 	.word	0xffffcfff
 8003a5c:	ffff3fff 	.word	0xffff3fff

08003a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e08a      	b.n	8003b88 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	225d      	movs	r2, #93	; 0x5d
 8003a7c:	5c9b      	ldrb	r3, [r3, r2]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d107      	bne.n	8003a94 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	225c      	movs	r2, #92	; 0x5c
 8003a88:	2100      	movs	r1, #0
 8003a8a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f7fd f8ea 	bl	8000c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	225d      	movs	r2, #93	; 0x5d
 8003a98:	2102      	movs	r1, #2
 8003a9a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2140      	movs	r1, #64	; 0x40
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	23e0      	movs	r3, #224	; 0xe0
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d902      	bls.n	8003abe <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e002      	b.n	8003ac4 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	015b      	lsls	r3, r3, #5
 8003ac2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	23f0      	movs	r3, #240	; 0xf0
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d008      	beq.n	8003ae2 <HAL_SPI_Init+0x82>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	23e0      	movs	r3, #224	; 0xe0
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d002      	beq.n	8003ae2 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10c      	bne.n	8003b04 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	23e0      	movs	r3, #224	; 0xe0
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d903      	bls.n	8003afe <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2202      	movs	r2, #2
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
 8003afc:	e002      	b.n	8003b04 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6999      	ldr	r1, [r3, #24]
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	400b      	ands	r3, r1
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	0011      	movs	r1, r2
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	2204      	movs	r2, #4
 8003b48:	401a      	ands	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	0011      	movs	r1, r2
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4907      	ldr	r1, [pc, #28]	; (8003b90 <HAL_SPI_Init+0x130>)
 8003b74:	400a      	ands	r2, r1
 8003b76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	225d      	movs	r2, #93	; 0x5d
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b004      	add	sp, #16
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	fffff7ff 	.word	0xfffff7ff

08003b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e01e      	b.n	8003be4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	223d      	movs	r2, #61	; 0x3d
 8003baa:	5c9b      	ldrb	r3, [r3, r2]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	223c      	movs	r2, #60	; 0x3c
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f7fd f8c5 	bl	8000d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	223d      	movs	r2, #61	; 0x3d
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	0010      	movs	r0, r2
 8003bd6:	f000 fba1 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	223d      	movs	r2, #61	; 0x3d
 8003bde:	2101      	movs	r1, #1
 8003be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b002      	add	sp, #8
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e01e      	b.n	8003c3c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	223d      	movs	r2, #61	; 0x3d
 8003c02:	5c9b      	ldrb	r3, [r3, r2]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d107      	bne.n	8003c1a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	223c      	movs	r2, #60	; 0x3c
 8003c0e:	2100      	movs	r1, #0
 8003c10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f7fd f873 	bl	8000d00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	223d      	movs	r2, #61	; 0x3d
 8003c1e:	2102      	movs	r1, #2
 8003c20:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	0010      	movs	r0, r2
 8003c2e:	f000 fb75 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	223d      	movs	r2, #61	; 0x3d
 8003c36:	2101      	movs	r1, #1
 8003c38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b002      	add	sp, #8
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6839      	ldr	r1, [r7, #0]
 8003c54:	2201      	movs	r2, #1
 8003c56:	0018      	movs	r0, r3
 8003c58:	f000 ff36 	bl	8004ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_TIM_PWM_Start+0x94>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00e      	beq.n	8003c84 <HAL_TIM_PWM_Start+0x40>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <HAL_TIM_PWM_Start+0x98>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d009      	beq.n	8003c84 <HAL_TIM_PWM_Start+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <HAL_TIM_PWM_Start+0x9c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d004      	beq.n	8003c84 <HAL_TIM_PWM_Start+0x40>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a19      	ldr	r2, [pc, #100]	; (8003ce4 <HAL_TIM_PWM_Start+0xa0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d101      	bne.n	8003c88 <HAL_TIM_PWM_Start+0x44>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_TIM_PWM_Start+0x46>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d008      	beq.n	8003ca0 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2180      	movs	r1, #128	; 0x80
 8003c9a:	0209      	lsls	r1, r1, #8
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	4a10      	ldr	r2, [pc, #64]	; (8003ce8 <HAL_TIM_PWM_Start+0xa4>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d00c      	beq.n	8003ccc <HAL_TIM_PWM_Start+0x88>
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	025b      	lsls	r3, r3, #9
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d007      	beq.n	8003ccc <HAL_TIM_PWM_Start+0x88>
  {
    __HAL_TIM_ENABLE(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	0018      	movs	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b004      	add	sp, #16
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800
 8003ce8:	00010007 	.word	0x00010007

08003cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d124      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d11d      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2203      	movs	r2, #3
 8003d16:	4252      	negs	r2, r2
 8003d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2203      	movs	r2, #3
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f000 fadc 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003d34:	e007      	b.n	8003d46 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f000 facf 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f000 fadb 	bl	80042fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2204      	movs	r2, #4
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d125      	bne.n	8003da6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2204      	movs	r2, #4
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d11e      	bne.n	8003da6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	4252      	negs	r2, r2
 8003d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	23c0      	movs	r3, #192	; 0xc0
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4013      	ands	r3, r2
 8003d84:	d004      	beq.n	8003d90 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f000 faaf 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003d8e:	e007      	b.n	8003da0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	0018      	movs	r0, r3
 8003d94:	f000 faa2 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f000 faae 	bl	80042fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2208      	movs	r2, #8
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d124      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2208      	movs	r2, #8
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d11d      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2209      	movs	r2, #9
 8003dc8:	4252      	negs	r2, r2
 8003dca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	2203      	movs	r2, #3
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f000 fa83 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003de6:	e007      	b.n	8003df8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	0018      	movs	r0, r3
 8003dec:	f000 fa76 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	0018      	movs	r0, r3
 8003df4:	f000 fa82 	bl	80042fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	2210      	movs	r2, #16
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d125      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2210      	movs	r2, #16
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d11e      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2211      	movs	r2, #17
 8003e20:	4252      	negs	r2, r2
 8003e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2208      	movs	r2, #8
 8003e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	23c0      	movs	r3, #192	; 0xc0
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4013      	ands	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f000 fa56 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003e40:	e007      	b.n	8003e52 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f000 fa49 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f000 fa55 	bl	80042fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d10f      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d108      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	4252      	negs	r2, r2
 8003e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 fa23 	bl	80042cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2280      	movs	r2, #128	; 0x80
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b80      	cmp	r3, #128	; 0x80
 8003e92:	d10f      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	2280      	movs	r2, #128	; 0x80
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b80      	cmp	r3, #128	; 0x80
 8003ea0:	d108      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2281      	movs	r2, #129	; 0x81
 8003ea8:	4252      	negs	r2, r2
 8003eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f000 fe8c 	bl	8004bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	2380      	movs	r3, #128	; 0x80
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d10e      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2280      	movs	r2, #128	; 0x80
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d107      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <HAL_TIM_IRQHandler+0x260>)
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f000 fe7b 	bl	8004bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2240      	movs	r2, #64	; 0x40
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d10f      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d108      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2241      	movs	r2, #65	; 0x41
 8003f08:	4252      	negs	r2, r2
 8003f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f000 f9fc 	bl	800430c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d10f      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d108      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2221      	movs	r2, #33	; 0x21
 8003f36:	4252      	negs	r2, r2
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f000 fe3d 	bl	8004bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b002      	add	sp, #8
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	fffffeff 	.word	0xfffffeff

08003f50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	223c      	movs	r2, #60	; 0x3c
 8003f60:	5c9b      	ldrb	r3, [r3, r2]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e0e7      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	223c      	movs	r2, #60	; 0x3c
 8003f6e:	2101      	movs	r1, #1
 8003f70:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	223d      	movs	r2, #61	; 0x3d
 8003f76:	2102      	movs	r1, #2
 8003f78:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b14      	cmp	r3, #20
 8003f7e:	d900      	bls.n	8003f82 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003f80:	e0d1      	b.n	8004126 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	009a      	lsls	r2, r3, #2
 8003f86:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8003f88:	18d3      	adds	r3, r2, r3
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	0011      	movs	r1, r2
 8003f96:	0018      	movs	r0, r3
 8003f98:	f000 fa36 	bl	8004408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2108      	movs	r1, #8
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2104      	movs	r1, #4
 8003fb8:	438a      	bics	r2, r1
 8003fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6999      	ldr	r1, [r3, #24]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	619a      	str	r2, [r3, #24]
      break;
 8003fce:	e0ab      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	0011      	movs	r1, r2
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 fa9f 	bl	800451c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2180      	movs	r1, #128	; 0x80
 8003fea:	0109      	lsls	r1, r1, #4
 8003fec:	430a      	orrs	r2, r1
 8003fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4953      	ldr	r1, [pc, #332]	; (8004148 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6999      	ldr	r1, [r3, #24]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	021a      	lsls	r2, r3, #8
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	619a      	str	r2, [r3, #24]
      break;
 8004014:	e088      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	0011      	movs	r1, r2
 800401e:	0018      	movs	r0, r3
 8004020:	f000 fb00 	bl	8004624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2108      	movs	r1, #8
 8004030:	430a      	orrs	r2, r1
 8004032:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2104      	movs	r1, #4
 8004040:	438a      	bics	r2, r1
 8004042:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69d9      	ldr	r1, [r3, #28]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	61da      	str	r2, [r3, #28]
      break;
 8004056:	e067      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	0011      	movs	r1, r2
 8004060:	0018      	movs	r0, r3
 8004062:	f000 fb67 	bl	8004734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	0109      	lsls	r1, r1, #4
 8004074:	430a      	orrs	r2, r1
 8004076:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4931      	ldr	r1, [pc, #196]	; (8004148 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004084:	400a      	ands	r2, r1
 8004086:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69d9      	ldr	r1, [r3, #28]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	021a      	lsls	r2, r3, #8
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	61da      	str	r2, [r3, #28]
      break;
 800409c:	e044      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	0011      	movs	r1, r2
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 fbae 	bl	8004808 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2108      	movs	r1, #8
 80040b8:	430a      	orrs	r2, r1
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2104      	movs	r1, #4
 80040c8:	438a      	bics	r2, r1
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040de:	e023      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	0011      	movs	r1, r2
 80040e8:	0018      	movs	r0, r3
 80040ea:	f000 fbed 	bl	80048c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2180      	movs	r1, #128	; 0x80
 80040fa:	0109      	lsls	r1, r1, #4
 80040fc:	430a      	orrs	r2, r1
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	490f      	ldr	r1, [pc, #60]	; (8004148 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800410c:	400a      	ands	r2, r1
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	021a      	lsls	r2, r3, #8
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004124:	e000      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    }

    default:
      break;
 8004126:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	223d      	movs	r2, #61	; 0x3d
 800412c:	2101      	movs	r1, #1
 800412e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	223c      	movs	r2, #60	; 0x3c
 8004134:	2100      	movs	r1, #0
 8004136:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b004      	add	sp, #16
 8004140:	bd80      	pop	{r7, pc}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	08005f20 	.word	0x08005f20
 8004148:	fffffbff 	.word	0xfffffbff

0800414c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	223c      	movs	r2, #60	; 0x3c
 800415a:	5c9b      	ldrb	r3, [r3, r2]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIM_ConfigClockSource+0x18>
 8004160:	2302      	movs	r3, #2
 8004162:	e0ab      	b.n	80042bc <HAL_TIM_ConfigClockSource+0x170>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	223c      	movs	r2, #60	; 0x3c
 8004168:	2101      	movs	r1, #1
 800416a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	223d      	movs	r2, #61	; 0x3d
 8004170:	2102      	movs	r1, #2
 8004172:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a51      	ldr	r2, [pc, #324]	; (80042c4 <HAL_TIM_ConfigClockSource+0x178>)
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a50      	ldr	r2, [pc, #320]	; (80042c8 <HAL_TIM_ConfigClockSource+0x17c>)
 8004188:	4013      	ands	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d100      	bne.n	800419e <HAL_TIM_ConfigClockSource+0x52>
 800419c:	e06b      	b.n	8004276 <HAL_TIM_ConfigClockSource+0x12a>
 800419e:	d80e      	bhi.n	80041be <HAL_TIM_ConfigClockSource+0x72>
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d100      	bne.n	80041a6 <HAL_TIM_ConfigClockSource+0x5a>
 80041a4:	e077      	b.n	8004296 <HAL_TIM_ConfigClockSource+0x14a>
 80041a6:	d803      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x64>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d100      	bne.n	80041ae <HAL_TIM_ConfigClockSource+0x62>
 80041ac:	e073      	b.n	8004296 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80041ae:	e07c      	b.n	80042aa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d100      	bne.n	80041b6 <HAL_TIM_ConfigClockSource+0x6a>
 80041b4:	e06f      	b.n	8004296 <HAL_TIM_ConfigClockSource+0x14a>
 80041b6:	2b30      	cmp	r3, #48	; 0x30
 80041b8:	d100      	bne.n	80041bc <HAL_TIM_ConfigClockSource+0x70>
 80041ba:	e06c      	b.n	8004296 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80041bc:	e075      	b.n	80042aa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80041be:	2b70      	cmp	r3, #112	; 0x70
 80041c0:	d00e      	beq.n	80041e0 <HAL_TIM_ConfigClockSource+0x94>
 80041c2:	d804      	bhi.n	80041ce <HAL_TIM_ConfigClockSource+0x82>
 80041c4:	2b50      	cmp	r3, #80	; 0x50
 80041c6:	d036      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0xea>
 80041c8:	2b60      	cmp	r3, #96	; 0x60
 80041ca:	d044      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80041cc:	e06d      	b.n	80042aa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	0152      	lsls	r2, r2, #5
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d068      	beq.n	80042a8 <HAL_TIM_ConfigClockSource+0x15c>
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	0192      	lsls	r2, r2, #6
 80041da:	4293      	cmp	r3, r2
 80041dc:	d017      	beq.n	800420e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80041de:	e064      	b.n	80042aa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f000 fc4a 	bl	8004a88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2277      	movs	r2, #119	; 0x77
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	609a      	str	r2, [r3, #8]
      break;
 800420c:	e04d      	b.n	80042aa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6899      	ldr	r1, [r3, #8]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f000 fc33 	bl	8004a88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2180      	movs	r1, #128	; 0x80
 800422e:	01c9      	lsls	r1, r1, #7
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
      break;
 8004234:	e039      	b.n	80042aa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	001a      	movs	r2, r3
 8004244:	f000 fba4 	bl	8004990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2150      	movs	r1, #80	; 0x50
 800424e:	0018      	movs	r0, r3
 8004250:	f000 fbfe 	bl	8004a50 <TIM_ITRx_SetConfig>
      break;
 8004254:	e029      	b.n	80042aa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6859      	ldr	r1, [r3, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	001a      	movs	r2, r3
 8004264:	f000 fbc2 	bl	80049ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2160      	movs	r1, #96	; 0x60
 800426e:	0018      	movs	r0, r3
 8004270:	f000 fbee 	bl	8004a50 <TIM_ITRx_SetConfig>
      break;
 8004274:	e019      	b.n	80042aa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6859      	ldr	r1, [r3, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	001a      	movs	r2, r3
 8004284:	f000 fb84 	bl	8004990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2140      	movs	r1, #64	; 0x40
 800428e:	0018      	movs	r0, r3
 8004290:	f000 fbde 	bl	8004a50 <TIM_ITRx_SetConfig>
      break;
 8004294:	e009      	b.n	80042aa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	0019      	movs	r1, r3
 80042a0:	0010      	movs	r0, r2
 80042a2:	f000 fbd5 	bl	8004a50 <TIM_ITRx_SetConfig>
      break;
 80042a6:	e000      	b.n	80042aa <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80042a8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	223d      	movs	r2, #61	; 0x3d
 80042ae:	2101      	movs	r1, #1
 80042b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	223c      	movs	r2, #60	; 0x3c
 80042b6:	2100      	movs	r1, #0
 80042b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	0018      	movs	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	b004      	add	sp, #16
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	ffceff88 	.word	0xffceff88
 80042c8:	ffff00ff 	.word	0xffff00ff

080042cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042d4:	46c0      	nop			; (mov r8, r8)
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b002      	add	sp, #8
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b002      	add	sp, #8
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b002      	add	sp, #8
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b002      	add	sp, #8
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}

0800431c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a2f      	ldr	r2, [pc, #188]	; (80043ec <TIM_Base_SetConfig+0xd0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d003      	beq.n	800433c <TIM_Base_SetConfig+0x20>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a2e      	ldr	r2, [pc, #184]	; (80043f0 <TIM_Base_SetConfig+0xd4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d108      	bne.n	800434e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2270      	movs	r2, #112	; 0x70
 8004340:	4393      	bics	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a26      	ldr	r2, [pc, #152]	; (80043ec <TIM_Base_SetConfig+0xd0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d013      	beq.n	800437e <TIM_Base_SetConfig+0x62>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a25      	ldr	r2, [pc, #148]	; (80043f0 <TIM_Base_SetConfig+0xd4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00f      	beq.n	800437e <TIM_Base_SetConfig+0x62>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a24      	ldr	r2, [pc, #144]	; (80043f4 <TIM_Base_SetConfig+0xd8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00b      	beq.n	800437e <TIM_Base_SetConfig+0x62>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a23      	ldr	r2, [pc, #140]	; (80043f8 <TIM_Base_SetConfig+0xdc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_Base_SetConfig+0x62>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a22      	ldr	r2, [pc, #136]	; (80043fc <TIM_Base_SetConfig+0xe0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_Base_SetConfig+0x62>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a21      	ldr	r2, [pc, #132]	; (8004400 <TIM_Base_SetConfig+0xe4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d108      	bne.n	8004390 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4a20      	ldr	r2, [pc, #128]	; (8004404 <TIM_Base_SetConfig+0xe8>)
 8004382:	4013      	ands	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2280      	movs	r2, #128	; 0x80
 8004394:	4393      	bics	r3, r2
 8004396:	001a      	movs	r2, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a0c      	ldr	r2, [pc, #48]	; (80043ec <TIM_Base_SetConfig+0xd0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00b      	beq.n	80043d6 <TIM_Base_SetConfig+0xba>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <TIM_Base_SetConfig+0xdc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d007      	beq.n	80043d6 <TIM_Base_SetConfig+0xba>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a0c      	ldr	r2, [pc, #48]	; (80043fc <TIM_Base_SetConfig+0xe0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <TIM_Base_SetConfig+0xba>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a0b      	ldr	r2, [pc, #44]	; (8004400 <TIM_Base_SetConfig+0xe4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d103      	bne.n	80043de <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	615a      	str	r2, [r3, #20]
}
 80043e4:	46c0      	nop			; (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b004      	add	sp, #16
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40002000 	.word	0x40002000
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800
 8004404:	fffffcff 	.word	0xfffffcff

08004408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	2201      	movs	r2, #1
 8004418:	4393      	bics	r3, r2
 800441a:	001a      	movs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a32      	ldr	r2, [pc, #200]	; (8004500 <TIM_OC1_SetConfig+0xf8>)
 8004436:	4013      	ands	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2203      	movs	r2, #3
 800443e:	4393      	bics	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2202      	movs	r2, #2
 8004450:	4393      	bics	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a28      	ldr	r2, [pc, #160]	; (8004504 <TIM_OC1_SetConfig+0xfc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00b      	beq.n	800447e <TIM_OC1_SetConfig+0x76>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a27      	ldr	r2, [pc, #156]	; (8004508 <TIM_OC1_SetConfig+0x100>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d007      	beq.n	800447e <TIM_OC1_SetConfig+0x76>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a26      	ldr	r2, [pc, #152]	; (800450c <TIM_OC1_SetConfig+0x104>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d003      	beq.n	800447e <TIM_OC1_SetConfig+0x76>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a25      	ldr	r2, [pc, #148]	; (8004510 <TIM_OC1_SetConfig+0x108>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10c      	bne.n	8004498 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2208      	movs	r2, #8
 8004482:	4393      	bics	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2204      	movs	r2, #4
 8004494:	4393      	bics	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a1a      	ldr	r2, [pc, #104]	; (8004504 <TIM_OC1_SetConfig+0xfc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <TIM_OC1_SetConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a19      	ldr	r2, [pc, #100]	; (8004508 <TIM_OC1_SetConfig+0x100>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <TIM_OC1_SetConfig+0xb0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a18      	ldr	r2, [pc, #96]	; (800450c <TIM_OC1_SetConfig+0x104>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_OC1_SetConfig+0xb0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a17      	ldr	r2, [pc, #92]	; (8004510 <TIM_OC1_SetConfig+0x108>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d111      	bne.n	80044dc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4a16      	ldr	r2, [pc, #88]	; (8004514 <TIM_OC1_SetConfig+0x10c>)
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4a15      	ldr	r2, [pc, #84]	; (8004518 <TIM_OC1_SetConfig+0x110>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b006      	add	sp, #24
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	fffeff8f 	.word	0xfffeff8f
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40014000 	.word	0x40014000
 800450c:	40014400 	.word	0x40014400
 8004510:	40014800 	.word	0x40014800
 8004514:	fffffeff 	.word	0xfffffeff
 8004518:	fffffdff 	.word	0xfffffdff

0800451c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	2210      	movs	r2, #16
 800452c:	4393      	bics	r3, r2
 800452e:	001a      	movs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4a2e      	ldr	r2, [pc, #184]	; (8004604 <TIM_OC2_SetConfig+0xe8>)
 800454a:	4013      	ands	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4a2d      	ldr	r2, [pc, #180]	; (8004608 <TIM_OC2_SetConfig+0xec>)
 8004552:	4013      	ands	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2220      	movs	r2, #32
 8004566:	4393      	bics	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a24      	ldr	r2, [pc, #144]	; (800460c <TIM_OC2_SetConfig+0xf0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d10d      	bne.n	800459a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2280      	movs	r2, #128	; 0x80
 8004582:	4393      	bics	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2240      	movs	r2, #64	; 0x40
 8004596:	4393      	bics	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a1b      	ldr	r2, [pc, #108]	; (800460c <TIM_OC2_SetConfig+0xf0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00b      	beq.n	80045ba <TIM_OC2_SetConfig+0x9e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a1a      	ldr	r2, [pc, #104]	; (8004610 <TIM_OC2_SetConfig+0xf4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <TIM_OC2_SetConfig+0x9e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a19      	ldr	r2, [pc, #100]	; (8004614 <TIM_OC2_SetConfig+0xf8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <TIM_OC2_SetConfig+0x9e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a18      	ldr	r2, [pc, #96]	; (8004618 <TIM_OC2_SetConfig+0xfc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d113      	bne.n	80045e2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4a17      	ldr	r2, [pc, #92]	; (800461c <TIM_OC2_SetConfig+0x100>)
 80045be:	4013      	ands	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4a16      	ldr	r2, [pc, #88]	; (8004620 <TIM_OC2_SetConfig+0x104>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	46c0      	nop			; (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b006      	add	sp, #24
 8004602:	bd80      	pop	{r7, pc}
 8004604:	feff8fff 	.word	0xfeff8fff
 8004608:	fffffcff 	.word	0xfffffcff
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800
 800461c:	fffffbff 	.word	0xfffffbff
 8004620:	fffff7ff 	.word	0xfffff7ff

08004624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	4a35      	ldr	r2, [pc, #212]	; (8004708 <TIM_OC3_SetConfig+0xe4>)
 8004634:	401a      	ands	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4a2f      	ldr	r2, [pc, #188]	; (800470c <TIM_OC3_SetConfig+0xe8>)
 8004650:	4013      	ands	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2203      	movs	r2, #3
 8004658:	4393      	bics	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	4a29      	ldr	r2, [pc, #164]	; (8004710 <TIM_OC3_SetConfig+0xec>)
 800466a:	4013      	ands	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a25      	ldr	r2, [pc, #148]	; (8004714 <TIM_OC3_SetConfig+0xf0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10d      	bne.n	800469e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4a24      	ldr	r2, [pc, #144]	; (8004718 <TIM_OC3_SetConfig+0xf4>)
 8004686:	4013      	ands	r3, r2
 8004688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	4a20      	ldr	r2, [pc, #128]	; (800471c <TIM_OC3_SetConfig+0xf8>)
 800469a:	4013      	ands	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <TIM_OC3_SetConfig+0xf0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00b      	beq.n	80046be <TIM_OC3_SetConfig+0x9a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <TIM_OC3_SetConfig+0xfc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d007      	beq.n	80046be <TIM_OC3_SetConfig+0x9a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <TIM_OC3_SetConfig+0x100>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_OC3_SetConfig+0x9a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <TIM_OC3_SetConfig+0x104>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d113      	bne.n	80046e6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4a1a      	ldr	r2, [pc, #104]	; (800472c <TIM_OC3_SetConfig+0x108>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4a19      	ldr	r2, [pc, #100]	; (8004730 <TIM_OC3_SetConfig+0x10c>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	621a      	str	r2, [r3, #32]
}
 8004700:	46c0      	nop			; (mov r8, r8)
 8004702:	46bd      	mov	sp, r7
 8004704:	b006      	add	sp, #24
 8004706:	bd80      	pop	{r7, pc}
 8004708:	fffffeff 	.word	0xfffffeff
 800470c:	fffeff8f 	.word	0xfffeff8f
 8004710:	fffffdff 	.word	0xfffffdff
 8004714:	40012c00 	.word	0x40012c00
 8004718:	fffff7ff 	.word	0xfffff7ff
 800471c:	fffffbff 	.word	0xfffffbff
 8004720:	40014000 	.word	0x40014000
 8004724:	40014400 	.word	0x40014400
 8004728:	40014800 	.word	0x40014800
 800472c:	ffffefff 	.word	0xffffefff
 8004730:	ffffdfff 	.word	0xffffdfff

08004734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	4a28      	ldr	r2, [pc, #160]	; (80047e4 <TIM_OC4_SetConfig+0xb0>)
 8004744:	401a      	ands	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4a22      	ldr	r2, [pc, #136]	; (80047e8 <TIM_OC4_SetConfig+0xb4>)
 8004760:	4013      	ands	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a21      	ldr	r2, [pc, #132]	; (80047ec <TIM_OC4_SetConfig+0xb8>)
 8004768:	4013      	ands	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4a1d      	ldr	r2, [pc, #116]	; (80047f0 <TIM_OC4_SetConfig+0xbc>)
 800477c:	4013      	ands	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	031b      	lsls	r3, r3, #12
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a19      	ldr	r2, [pc, #100]	; (80047f4 <TIM_OC4_SetConfig+0xc0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00b      	beq.n	80047ac <TIM_OC4_SetConfig+0x78>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <TIM_OC4_SetConfig+0xc4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d007      	beq.n	80047ac <TIM_OC4_SetConfig+0x78>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a17      	ldr	r2, [pc, #92]	; (80047fc <TIM_OC4_SetConfig+0xc8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_OC4_SetConfig+0x78>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a16      	ldr	r2, [pc, #88]	; (8004800 <TIM_OC4_SetConfig+0xcc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d109      	bne.n	80047c0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	4a15      	ldr	r2, [pc, #84]	; (8004804 <TIM_OC4_SetConfig+0xd0>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	019b      	lsls	r3, r3, #6
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	46bd      	mov	sp, r7
 80047de:	b006      	add	sp, #24
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	ffffefff 	.word	0xffffefff
 80047e8:	feff8fff 	.word	0xfeff8fff
 80047ec:	fffffcff 	.word	0xfffffcff
 80047f0:	ffffdfff 	.word	0xffffdfff
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40014400 	.word	0x40014400
 8004800:	40014800 	.word	0x40014800
 8004804:	ffffbfff 	.word	0xffffbfff

08004808 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	4a25      	ldr	r2, [pc, #148]	; (80048ac <TIM_OC5_SetConfig+0xa4>)
 8004818:	401a      	ands	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <TIM_OC5_SetConfig+0xa8>)
 8004834:	4013      	ands	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4a1b      	ldr	r2, [pc, #108]	; (80048b4 <TIM_OC5_SetConfig+0xac>)
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <TIM_OC5_SetConfig+0xb0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_OC5_SetConfig+0x6e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a16      	ldr	r2, [pc, #88]	; (80048bc <TIM_OC5_SetConfig+0xb4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_OC5_SetConfig+0x6e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <TIM_OC5_SetConfig+0xb8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_OC5_SetConfig+0x6e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <TIM_OC5_SetConfig+0xbc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d109      	bne.n	800488a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	4a0c      	ldr	r2, [pc, #48]	; (80048ac <TIM_OC5_SetConfig+0xa4>)
 800487a:	4013      	ands	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	621a      	str	r2, [r3, #32]
}
 80048a4:	46c0      	nop			; (mov r8, r8)
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b006      	add	sp, #24
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	fffeffff 	.word	0xfffeffff
 80048b0:	fffeff8f 	.word	0xfffeff8f
 80048b4:	fffdffff 	.word	0xfffdffff
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40014000 	.word	0x40014000
 80048c0:	40014400 	.word	0x40014400
 80048c4:	40014800 	.word	0x40014800

080048c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	4a26      	ldr	r2, [pc, #152]	; (8004970 <TIM_OC6_SetConfig+0xa8>)
 80048d8:	401a      	ands	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a20      	ldr	r2, [pc, #128]	; (8004974 <TIM_OC6_SetConfig+0xac>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <TIM_OC6_SetConfig+0xb0>)
 8004908:	4013      	ands	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	051b      	lsls	r3, r3, #20
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a18      	ldr	r2, [pc, #96]	; (800497c <TIM_OC6_SetConfig+0xb4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_OC6_SetConfig+0x70>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a17      	ldr	r2, [pc, #92]	; (8004980 <TIM_OC6_SetConfig+0xb8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_OC6_SetConfig+0x70>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a16      	ldr	r2, [pc, #88]	; (8004984 <TIM_OC6_SetConfig+0xbc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_OC6_SetConfig+0x70>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a15      	ldr	r2, [pc, #84]	; (8004988 <TIM_OC6_SetConfig+0xc0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d109      	bne.n	800494c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4a14      	ldr	r2, [pc, #80]	; (800498c <TIM_OC6_SetConfig+0xc4>)
 800493c:	4013      	ands	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	029b      	lsls	r3, r3, #10
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	46bd      	mov	sp, r7
 800496a:	b006      	add	sp, #24
 800496c:	bd80      	pop	{r7, pc}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	ffefffff 	.word	0xffefffff
 8004974:	feff8fff 	.word	0xfeff8fff
 8004978:	ffdfffff 	.word	0xffdfffff
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40014000 	.word	0x40014000
 8004984:	40014400 	.word	0x40014400
 8004988:	40014800 	.word	0x40014800
 800498c:	fffbffff 	.word	0xfffbffff

08004990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	2201      	movs	r2, #1
 80049a8:	4393      	bics	r3, r2
 80049aa:	001a      	movs	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	22f0      	movs	r2, #240	; 0xf0
 80049ba:	4393      	bics	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	220a      	movs	r2, #10
 80049cc:	4393      	bics	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	621a      	str	r2, [r3, #32]
}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b006      	add	sp, #24
 80049ea:	bd80      	pop	{r7, pc}

080049ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	2210      	movs	r2, #16
 80049fe:	4393      	bics	r3, r2
 8004a00:	001a      	movs	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	4a0d      	ldr	r2, [pc, #52]	; (8004a4c <TIM_TI2_ConfigInputStage+0x60>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	031b      	lsls	r3, r3, #12
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	22a0      	movs	r2, #160	; 0xa0
 8004a28:	4393      	bics	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b006      	add	sp, #24
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	ffff0fff 	.word	0xffff0fff

08004a50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <TIM_ITRx_SetConfig+0x34>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	2207      	movs	r2, #7
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	609a      	str	r2, [r3, #8]
}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b004      	add	sp, #16
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	ffcfff8f 	.word	0xffcfff8f

08004a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	4a09      	ldr	r2, [pc, #36]	; (8004ac4 <TIM_ETR_SetConfig+0x3c>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	021a      	lsls	r2, r3, #8
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	609a      	str	r2, [r3, #8]
}
 8004abc:	46c0      	nop			; (mov r8, r8)
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b006      	add	sp, #24
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	ffff00ff 	.word	0xffff00ff

08004ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	221f      	movs	r2, #31
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2201      	movs	r2, #1
 8004adc:	409a      	lsls	r2, r3
 8004ade:	0013      	movs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	43d2      	mvns	r2, r2
 8004aea:	401a      	ands	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1a      	ldr	r2, [r3, #32]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	211f      	movs	r1, #31
 8004af8:	400b      	ands	r3, r1
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4099      	lsls	r1, r3
 8004afe:	000b      	movs	r3, r1
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b006      	add	sp, #24
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	223c      	movs	r2, #60	; 0x3c
 8004b1e:	5c9b      	ldrb	r3, [r3, r2]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e040      	b.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	223c      	movs	r2, #60	; 0x3c
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	223d      	movs	r2, #61	; 0x3d
 8004b34:	2102      	movs	r1, #2
 8004b36:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d108      	bne.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2270      	movs	r2, #112	; 0x70
 8004b68:	4393      	bics	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2280      	movs	r2, #128	; 0x80
 8004b7a:	4393      	bics	r3, r2
 8004b7c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	223d      	movs	r2, #61	; 0x3d
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	223c      	movs	r2, #60	; 0x3c
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	0018      	movs	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b004      	add	sp, #16
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	ff0fffff 	.word	0xff0fffff

08004bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b002      	add	sp, #8
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004be4:	46c0      	nop			; (mov r8, r8)
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b002      	add	sp, #8
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e046      	b.n	8004c8c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2280      	movs	r2, #128	; 0x80
 8004c02:	589b      	ldr	r3, [r3, r2]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d107      	bne.n	8004c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	227c      	movs	r2, #124	; 0x7c
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7fc f8fe 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2280      	movs	r2, #128	; 0x80
 8004c1c:	2124      	movs	r1, #36	; 0x24
 8004c1e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	438a      	bics	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 f99e 	bl	8004f74 <UART_SetConfig>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e024      	b.n	8004c8c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 fe19 	bl	8005884 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	490d      	ldr	r1, [pc, #52]	; (8004c94 <HAL_UART_Init+0xa8>)
 8004c5e:	400a      	ands	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	212a      	movs	r1, #42	; 0x2a
 8004c6e:	438a      	bics	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f000 feb1 	bl	80059ec <UART_CheckIdleState>
 8004c8a:	0003      	movs	r3, r0
}
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b002      	add	sp, #8
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	ffffb7ff 	.word	0xffffb7ff

08004c98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	220f      	movs	r2, #15
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d117      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d013      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d104      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	2380      	movs	r3, #128	; 0x80
 8004cda:	055b      	lsls	r3, r3, #21
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d00a      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d100      	bne.n	8004cea <HAL_UART_IRQHandler+0x52>
 8004ce8:	e127      	b.n	8004f3a <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	0010      	movs	r0, r2
 8004cf2:	4798      	blx	r3
      }
      return;
 8004cf4:	e121      	b.n	8004f3a <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d100      	bne.n	8004cfe <HAL_UART_IRQHandler+0x66>
 8004cfc:	e0c8      	b.n	8004e90 <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	4a92      	ldr	r2, [pc, #584]	; (8004f4c <HAL_UART_IRQHandler+0x2b4>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	d105      	bne.n	8004d12 <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	2390      	movs	r3, #144	; 0x90
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d100      	bne.n	8004d12 <HAL_UART_IRQHandler+0x7a>
 8004d10:	e0be      	b.n	8004e90 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2201      	movs	r2, #1
 8004d16:	4013      	ands	r3, r2
 8004d18:	d010      	beq.n	8004d3c <HAL_UART_IRQHandler+0xa4>
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	4013      	ands	r3, r2
 8004d22:	d00b      	beq.n	8004d3c <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2288      	movs	r2, #136	; 0x88
 8004d30:	589b      	ldr	r3, [r3, r2]
 8004d32:	2201      	movs	r2, #1
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2188      	movs	r1, #136	; 0x88
 8004d3a:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	4013      	ands	r3, r2
 8004d42:	d00f      	beq.n	8004d64 <HAL_UART_IRQHandler+0xcc>
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2201      	movs	r2, #1
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2202      	movs	r2, #2
 8004d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2288      	movs	r2, #136	; 0x88
 8004d58:	589b      	ldr	r3, [r3, r2]
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2188      	movs	r1, #136	; 0x88
 8004d62:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2204      	movs	r2, #4
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d00f      	beq.n	8004d8c <HAL_UART_IRQHandler+0xf4>
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4013      	ands	r3, r2
 8004d72:	d00b      	beq.n	8004d8c <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2204      	movs	r2, #4
 8004d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2288      	movs	r2, #136	; 0x88
 8004d80:	589b      	ldr	r3, [r3, r2]
 8004d82:	2202      	movs	r2, #2
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2188      	movs	r1, #136	; 0x88
 8004d8a:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2208      	movs	r2, #8
 8004d90:	4013      	ands	r3, r2
 8004d92:	d013      	beq.n	8004dbc <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2220      	movs	r2, #32
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d103      	bne.n	8004da4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4a6b      	ldr	r2, [pc, #428]	; (8004f4c <HAL_UART_IRQHandler+0x2b4>)
 8004da0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004da2:	d00b      	beq.n	8004dbc <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2208      	movs	r2, #8
 8004daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2288      	movs	r2, #136	; 0x88
 8004db0:	589b      	ldr	r3, [r3, r2]
 8004db2:	2208      	movs	r2, #8
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2188      	movs	r1, #136	; 0x88
 8004dba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2288      	movs	r2, #136	; 0x88
 8004dc0:	589b      	ldr	r3, [r3, r2]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d100      	bne.n	8004dc8 <HAL_UART_IRQHandler+0x130>
 8004dc6:	e0ba      	b.n	8004f3e <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d011      	beq.n	8004df4 <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d104      	bne.n	8004de2 <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	055b      	lsls	r3, r3, #21
 8004dde:	4013      	ands	r3, r2
 8004de0:	d008      	beq.n	8004df4 <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d004      	beq.n	8004df4 <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	0010      	movs	r0, r2
 8004df2:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2288      	movs	r2, #136	; 0x88
 8004df8:	589b      	ldr	r3, [r3, r2]
 8004dfa:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2240      	movs	r2, #64	; 0x40
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d003      	beq.n	8004e12 <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e10:	d033      	beq.n	8004e7a <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f000 fe7f 	bl	8005b18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2240      	movs	r2, #64	; 0x40
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d123      	bne.n	8004e70 <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2140      	movs	r1, #64	; 0x40
 8004e34:	438a      	bics	r2, r1
 8004e36:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d012      	beq.n	8004e66 <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e44:	4a42      	ldr	r2, [pc, #264]	; (8004f50 <HAL_UART_IRQHandler+0x2b8>)
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f7fc fedf 	bl	8001c10 <HAL_DMA_Abort_IT>
 8004e52:	1e03      	subs	r3, r0, #0
 8004e54:	d01a      	beq.n	8004e8c <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e60:	0018      	movs	r0, r3
 8004e62:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e64:	e012      	b.n	8004e8c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f000 f87b 	bl	8004f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e6e:	e00d      	b.n	8004e8c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	0018      	movs	r0, r3
 8004e74:	f000 f876 	bl	8004f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e78:	e008      	b.n	8004e8c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f000 f871 	bl	8004f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2288      	movs	r2, #136	; 0x88
 8004e86:	2100      	movs	r1, #0
 8004e88:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004e8a:	e058      	b.n	8004f3e <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	46c0      	nop			; (mov r8, r8)
    return;
 8004e8e:	e056      	b.n	8004f3e <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	035b      	lsls	r3, r3, #13
 8004e96:	4013      	ands	r3, r2
 8004e98:	d00e      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x220>
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	03db      	lsls	r3, r3, #15
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2280      	movs	r2, #128	; 0x80
 8004eaa:	0352      	lsls	r2, r2, #13
 8004eac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f000 fe87 	bl	8005bc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004eb6:	e045      	b.n	8004f44 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	2280      	movs	r2, #128	; 0x80
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d012      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2280      	movs	r2, #128	; 0x80
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d104      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	041b      	lsls	r3, r3, #16
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d009      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d033      	beq.n	8004f42 <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	0010      	movs	r0, r2
 8004ee2:	4798      	blx	r3
    }
    return;
 8004ee4:	e02d      	b.n	8004f42 <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	2240      	movs	r2, #64	; 0x40
 8004eea:	4013      	ands	r3, r2
 8004eec:	d008      	beq.n	8004f00 <HAL_UART_IRQHandler+0x268>
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2240      	movs	r2, #64	; 0x40
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f000 fe48 	bl	8005b8e <UART_EndTransmit_IT>
    return;
 8004efe:	e021      	b.n	8004f44 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	2380      	movs	r3, #128	; 0x80
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	4013      	ands	r3, r2
 8004f08:	d009      	beq.n	8004f1e <HAL_UART_IRQHandler+0x286>
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	2380      	movs	r3, #128	; 0x80
 8004f0e:	05db      	lsls	r3, r3, #23
 8004f10:	4013      	ands	r3, r2
 8004f12:	d004      	beq.n	8004f1e <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 fe64 	bl	8005be4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f1c:	e012      	b.n	8004f44 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	045b      	lsls	r3, r3, #17
 8004f24:	4013      	ands	r3, r2
 8004f26:	d00d      	beq.n	8004f44 <HAL_UART_IRQHandler+0x2ac>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da0a      	bge.n	8004f44 <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	0018      	movs	r0, r3
 8004f32:	f000 fe4f 	bl	8005bd4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	e004      	b.n	8004f44 <HAL_UART_IRQHandler+0x2ac>
      return;
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	e002      	b.n	8004f44 <HAL_UART_IRQHandler+0x2ac>
    return;
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	e000      	b.n	8004f44 <HAL_UART_IRQHandler+0x2ac>
    return;
 8004f42:	46c0      	nop			; (mov r8, r8)
  }
}
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b008      	add	sp, #32
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	10000001 	.word	0x10000001
 8004f50:	08005b61 	.word	0x08005b61

08004f54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b002      	add	sp, #8
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b002      	add	sp, #8
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f80:	231e      	movs	r3, #30
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	2200      	movs	r2, #0
 8004f86:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	613b      	str	r3, [r7, #16]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4aba      	ldr	r2, [pc, #744]	; (80052a0 <UART_SetConfig+0x32c>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4ab6      	ldr	r2, [pc, #728]	; (80052a4 <UART_SetConfig+0x330>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	0019      	movs	r1, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	61bb      	str	r3, [r7, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	4aad      	ldr	r2, [pc, #692]	; (80052a8 <UART_SetConfig+0x334>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	220f      	movs	r2, #15
 800500a:	4393      	bics	r3, r2
 800500c:	0019      	movs	r1, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4aa3      	ldr	r2, [pc, #652]	; (80052ac <UART_SetConfig+0x338>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d125      	bne.n	8005070 <UART_SetConfig+0xfc>
 8005024:	4ba2      	ldr	r3, [pc, #648]	; (80052b0 <UART_SetConfig+0x33c>)
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005028:	2203      	movs	r2, #3
 800502a:	4013      	ands	r3, r2
 800502c:	2b01      	cmp	r3, #1
 800502e:	d00f      	beq.n	8005050 <UART_SetConfig+0xdc>
 8005030:	d304      	bcc.n	800503c <UART_SetConfig+0xc8>
 8005032:	2b02      	cmp	r3, #2
 8005034:	d007      	beq.n	8005046 <UART_SetConfig+0xd2>
 8005036:	2b03      	cmp	r3, #3
 8005038:	d00f      	beq.n	800505a <UART_SetConfig+0xe6>
 800503a:	e013      	b.n	8005064 <UART_SetConfig+0xf0>
 800503c:	231f      	movs	r3, #31
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e05a      	b.n	80050fc <UART_SetConfig+0x188>
 8005046:	231f      	movs	r3, #31
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	2202      	movs	r2, #2
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e055      	b.n	80050fc <UART_SetConfig+0x188>
 8005050:	231f      	movs	r3, #31
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	2204      	movs	r2, #4
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e050      	b.n	80050fc <UART_SetConfig+0x188>
 800505a:	231f      	movs	r3, #31
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	2208      	movs	r2, #8
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	e04b      	b.n	80050fc <UART_SetConfig+0x188>
 8005064:	231f      	movs	r3, #31
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	2210      	movs	r2, #16
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	46c0      	nop			; (mov r8, r8)
 800506e:	e045      	b.n	80050fc <UART_SetConfig+0x188>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a8f      	ldr	r2, [pc, #572]	; (80052b4 <UART_SetConfig+0x340>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d128      	bne.n	80050cc <UART_SetConfig+0x158>
 800507a:	4b8d      	ldr	r3, [pc, #564]	; (80052b0 <UART_SetConfig+0x33c>)
 800507c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507e:	220c      	movs	r2, #12
 8005080:	4013      	ands	r3, r2
 8005082:	2b04      	cmp	r3, #4
 8005084:	d012      	beq.n	80050ac <UART_SetConfig+0x138>
 8005086:	d802      	bhi.n	800508e <UART_SetConfig+0x11a>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <UART_SetConfig+0x124>
 800508c:	e018      	b.n	80050c0 <UART_SetConfig+0x14c>
 800508e:	2b08      	cmp	r3, #8
 8005090:	d007      	beq.n	80050a2 <UART_SetConfig+0x12e>
 8005092:	2b0c      	cmp	r3, #12
 8005094:	d00f      	beq.n	80050b6 <UART_SetConfig+0x142>
 8005096:	e013      	b.n	80050c0 <UART_SetConfig+0x14c>
 8005098:	231f      	movs	r3, #31
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	2200      	movs	r2, #0
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	e02c      	b.n	80050fc <UART_SetConfig+0x188>
 80050a2:	231f      	movs	r3, #31
 80050a4:	18fb      	adds	r3, r7, r3
 80050a6:	2202      	movs	r2, #2
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	e027      	b.n	80050fc <UART_SetConfig+0x188>
 80050ac:	231f      	movs	r3, #31
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	2204      	movs	r2, #4
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	e022      	b.n	80050fc <UART_SetConfig+0x188>
 80050b6:	231f      	movs	r3, #31
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	2208      	movs	r2, #8
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e01d      	b.n	80050fc <UART_SetConfig+0x188>
 80050c0:	231f      	movs	r3, #31
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	2210      	movs	r2, #16
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	e017      	b.n	80050fc <UART_SetConfig+0x188>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a79      	ldr	r2, [pc, #484]	; (80052b8 <UART_SetConfig+0x344>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d104      	bne.n	80050e0 <UART_SetConfig+0x16c>
 80050d6:	231f      	movs	r3, #31
 80050d8:	18fb      	adds	r3, r7, r3
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e00d      	b.n	80050fc <UART_SetConfig+0x188>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a75      	ldr	r2, [pc, #468]	; (80052bc <UART_SetConfig+0x348>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d104      	bne.n	80050f4 <UART_SetConfig+0x180>
 80050ea:	231f      	movs	r3, #31
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	e003      	b.n	80050fc <UART_SetConfig+0x188>
 80050f4:	231f      	movs	r3, #31
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	2210      	movs	r2, #16
 80050fa:	701a      	strb	r2, [r3, #0]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	429a      	cmp	r2, r3
 8005106:	d000      	beq.n	800510a <UART_SetConfig+0x196>
 8005108:	e1de      	b.n	80054c8 <UART_SetConfig+0x554>
  {
    switch (clocksource)
 800510a:	231f      	movs	r3, #31
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d100      	bne.n	8005116 <UART_SetConfig+0x1a2>
 8005114:	e06c      	b.n	80051f0 <UART_SetConfig+0x27c>
 8005116:	dc02      	bgt.n	800511e <UART_SetConfig+0x1aa>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <UART_SetConfig+0x1b8>
 800511c:	e1ab      	b.n	8005476 <UART_SetConfig+0x502>
 800511e:	2b04      	cmp	r3, #4
 8005120:	d100      	bne.n	8005124 <UART_SetConfig+0x1b0>
 8005122:	e0e5      	b.n	80052f0 <UART_SetConfig+0x37c>
 8005124:	2b08      	cmp	r3, #8
 8005126:	d100      	bne.n	800512a <UART_SetConfig+0x1b6>
 8005128:	e144      	b.n	80053b4 <UART_SetConfig+0x440>
 800512a:	e1a4      	b.n	8005476 <UART_SetConfig+0x502>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800512c:	f7fe fb4c 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 8005130:	0003      	movs	r3, r0
 8005132:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	2b00      	cmp	r3, #0
 800513a:	d044      	beq.n	80051c6 <UART_SetConfig+0x252>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	2b01      	cmp	r3, #1
 8005142:	d03e      	beq.n	80051c2 <UART_SetConfig+0x24e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b02      	cmp	r3, #2
 800514a:	d038      	beq.n	80051be <UART_SetConfig+0x24a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	2b03      	cmp	r3, #3
 8005152:	d032      	beq.n	80051ba <UART_SetConfig+0x246>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	2b04      	cmp	r3, #4
 800515a:	d02c      	beq.n	80051b6 <UART_SetConfig+0x242>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	2b05      	cmp	r3, #5
 8005162:	d026      	beq.n	80051b2 <UART_SetConfig+0x23e>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	2b06      	cmp	r3, #6
 800516a:	d020      	beq.n	80051ae <UART_SetConfig+0x23a>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	2b07      	cmp	r3, #7
 8005172:	d01a      	beq.n	80051aa <UART_SetConfig+0x236>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	2b08      	cmp	r3, #8
 800517a:	d014      	beq.n	80051a6 <UART_SetConfig+0x232>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b09      	cmp	r3, #9
 8005182:	d00e      	beq.n	80051a2 <UART_SetConfig+0x22e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b0a      	cmp	r3, #10
 800518a:	d008      	beq.n	800519e <UART_SetConfig+0x22a>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b0b      	cmp	r3, #11
 8005192:	d102      	bne.n	800519a <UART_SetConfig+0x226>
 8005194:	2380      	movs	r3, #128	; 0x80
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	e016      	b.n	80051c8 <UART_SetConfig+0x254>
 800519a:	2301      	movs	r3, #1
 800519c:	e014      	b.n	80051c8 <UART_SetConfig+0x254>
 800519e:	2380      	movs	r3, #128	; 0x80
 80051a0:	e012      	b.n	80051c8 <UART_SetConfig+0x254>
 80051a2:	2340      	movs	r3, #64	; 0x40
 80051a4:	e010      	b.n	80051c8 <UART_SetConfig+0x254>
 80051a6:	2320      	movs	r3, #32
 80051a8:	e00e      	b.n	80051c8 <UART_SetConfig+0x254>
 80051aa:	2310      	movs	r3, #16
 80051ac:	e00c      	b.n	80051c8 <UART_SetConfig+0x254>
 80051ae:	230c      	movs	r3, #12
 80051b0:	e00a      	b.n	80051c8 <UART_SetConfig+0x254>
 80051b2:	230a      	movs	r3, #10
 80051b4:	e008      	b.n	80051c8 <UART_SetConfig+0x254>
 80051b6:	2308      	movs	r3, #8
 80051b8:	e006      	b.n	80051c8 <UART_SetConfig+0x254>
 80051ba:	2306      	movs	r3, #6
 80051bc:	e004      	b.n	80051c8 <UART_SetConfig+0x254>
 80051be:	2304      	movs	r3, #4
 80051c0:	e002      	b.n	80051c8 <UART_SetConfig+0x254>
 80051c2:	2302      	movs	r3, #2
 80051c4:	e000      	b.n	80051c8 <UART_SetConfig+0x254>
 80051c6:	2301      	movs	r3, #1
 80051c8:	0019      	movs	r1, r3
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7fa ff98 	bl	8000100 <__udivsi3>
 80051d0:	0003      	movs	r3, r0
 80051d2:	005a      	lsls	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	18d2      	adds	r2, r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	0019      	movs	r1, r3
 80051e2:	0010      	movs	r0, r2
 80051e4:	f7fa ff8c 	bl	8000100 <__udivsi3>
 80051e8:	0003      	movs	r3, r0
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	617b      	str	r3, [r7, #20]
        break;
 80051ee:	e147      	b.n	8005480 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d043      	beq.n	8005280 <UART_SetConfig+0x30c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d03d      	beq.n	800527c <UART_SetConfig+0x308>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b02      	cmp	r3, #2
 8005206:	d037      	beq.n	8005278 <UART_SetConfig+0x304>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	2b03      	cmp	r3, #3
 800520e:	d031      	beq.n	8005274 <UART_SetConfig+0x300>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	2b04      	cmp	r3, #4
 8005216:	d02b      	beq.n	8005270 <UART_SetConfig+0x2fc>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	2b05      	cmp	r3, #5
 800521e:	d025      	beq.n	800526c <UART_SetConfig+0x2f8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	2b06      	cmp	r3, #6
 8005226:	d01f      	beq.n	8005268 <UART_SetConfig+0x2f4>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2b07      	cmp	r3, #7
 800522e:	d019      	beq.n	8005264 <UART_SetConfig+0x2f0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b08      	cmp	r3, #8
 8005236:	d013      	beq.n	8005260 <UART_SetConfig+0x2ec>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	2b09      	cmp	r3, #9
 800523e:	d00d      	beq.n	800525c <UART_SetConfig+0x2e8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	2b0a      	cmp	r3, #10
 8005246:	d007      	beq.n	8005258 <UART_SetConfig+0x2e4>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	2b0b      	cmp	r3, #11
 800524e:	d101      	bne.n	8005254 <UART_SetConfig+0x2e0>
 8005250:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <UART_SetConfig+0x34c>)
 8005252:	e016      	b.n	8005282 <UART_SetConfig+0x30e>
 8005254:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <UART_SetConfig+0x350>)
 8005256:	e014      	b.n	8005282 <UART_SetConfig+0x30e>
 8005258:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <UART_SetConfig+0x354>)
 800525a:	e012      	b.n	8005282 <UART_SetConfig+0x30e>
 800525c:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <UART_SetConfig+0x358>)
 800525e:	e010      	b.n	8005282 <UART_SetConfig+0x30e>
 8005260:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <UART_SetConfig+0x35c>)
 8005262:	e00e      	b.n	8005282 <UART_SetConfig+0x30e>
 8005264:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <UART_SetConfig+0x360>)
 8005266:	e00c      	b.n	8005282 <UART_SetConfig+0x30e>
 8005268:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <UART_SetConfig+0x364>)
 800526a:	e00a      	b.n	8005282 <UART_SetConfig+0x30e>
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <UART_SetConfig+0x368>)
 800526e:	e008      	b.n	8005282 <UART_SetConfig+0x30e>
 8005270:	4b1b      	ldr	r3, [pc, #108]	; (80052e0 <UART_SetConfig+0x36c>)
 8005272:	e006      	b.n	8005282 <UART_SetConfig+0x30e>
 8005274:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <UART_SetConfig+0x370>)
 8005276:	e004      	b.n	8005282 <UART_SetConfig+0x30e>
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <UART_SetConfig+0x374>)
 800527a:	e002      	b.n	8005282 <UART_SetConfig+0x30e>
 800527c:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <UART_SetConfig+0x378>)
 800527e:	e000      	b.n	8005282 <UART_SetConfig+0x30e>
 8005280:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <UART_SetConfig+0x350>)
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6852      	ldr	r2, [r2, #4]
 8005286:	0852      	lsrs	r2, r2, #1
 8005288:	189a      	adds	r2, r3, r2
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	0019      	movs	r1, r3
 8005290:	0010      	movs	r0, r2
 8005292:	f7fa ff35 	bl	8000100 <__udivsi3>
 8005296:	0003      	movs	r3, r0
 8005298:	b29b      	uxth	r3, r3
 800529a:	617b      	str	r3, [r7, #20]
        break;
 800529c:	e0f0      	b.n	8005480 <UART_SetConfig+0x50c>
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	cfff69f3 	.word	0xcfff69f3
 80052a4:	ffffcfff 	.word	0xffffcfff
 80052a8:	11fff4ff 	.word	0x11fff4ff
 80052ac:	40013800 	.word	0x40013800
 80052b0:	40021000 	.word	0x40021000
 80052b4:	40004400 	.word	0x40004400
 80052b8:	40004800 	.word	0x40004800
 80052bc:	40004c00 	.word	0x40004c00
 80052c0:	0001e848 	.word	0x0001e848
 80052c4:	01e84800 	.word	0x01e84800
 80052c8:	0003d090 	.word	0x0003d090
 80052cc:	0007a120 	.word	0x0007a120
 80052d0:	000f4240 	.word	0x000f4240
 80052d4:	001e8480 	.word	0x001e8480
 80052d8:	0028b0aa 	.word	0x0028b0aa
 80052dc:	0030d400 	.word	0x0030d400
 80052e0:	003d0900 	.word	0x003d0900
 80052e4:	00516154 	.word	0x00516154
 80052e8:	007a1200 	.word	0x007a1200
 80052ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052f0:	f7fe f9de 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 80052f4:	0003      	movs	r3, r0
 80052f6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d044      	beq.n	800538a <UART_SetConfig+0x416>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2b01      	cmp	r3, #1
 8005306:	d03e      	beq.n	8005386 <UART_SetConfig+0x412>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	2b02      	cmp	r3, #2
 800530e:	d038      	beq.n	8005382 <UART_SetConfig+0x40e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	2b03      	cmp	r3, #3
 8005316:	d032      	beq.n	800537e <UART_SetConfig+0x40a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	2b04      	cmp	r3, #4
 800531e:	d02c      	beq.n	800537a <UART_SetConfig+0x406>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	2b05      	cmp	r3, #5
 8005326:	d026      	beq.n	8005376 <UART_SetConfig+0x402>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b06      	cmp	r3, #6
 800532e:	d020      	beq.n	8005372 <UART_SetConfig+0x3fe>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	2b07      	cmp	r3, #7
 8005336:	d01a      	beq.n	800536e <UART_SetConfig+0x3fa>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	2b08      	cmp	r3, #8
 800533e:	d014      	beq.n	800536a <UART_SetConfig+0x3f6>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	2b09      	cmp	r3, #9
 8005346:	d00e      	beq.n	8005366 <UART_SetConfig+0x3f2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	2b0a      	cmp	r3, #10
 800534e:	d008      	beq.n	8005362 <UART_SetConfig+0x3ee>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	2b0b      	cmp	r3, #11
 8005356:	d102      	bne.n	800535e <UART_SetConfig+0x3ea>
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	e016      	b.n	800538c <UART_SetConfig+0x418>
 800535e:	2301      	movs	r3, #1
 8005360:	e014      	b.n	800538c <UART_SetConfig+0x418>
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	e012      	b.n	800538c <UART_SetConfig+0x418>
 8005366:	2340      	movs	r3, #64	; 0x40
 8005368:	e010      	b.n	800538c <UART_SetConfig+0x418>
 800536a:	2320      	movs	r3, #32
 800536c:	e00e      	b.n	800538c <UART_SetConfig+0x418>
 800536e:	2310      	movs	r3, #16
 8005370:	e00c      	b.n	800538c <UART_SetConfig+0x418>
 8005372:	230c      	movs	r3, #12
 8005374:	e00a      	b.n	800538c <UART_SetConfig+0x418>
 8005376:	230a      	movs	r3, #10
 8005378:	e008      	b.n	800538c <UART_SetConfig+0x418>
 800537a:	2308      	movs	r3, #8
 800537c:	e006      	b.n	800538c <UART_SetConfig+0x418>
 800537e:	2306      	movs	r3, #6
 8005380:	e004      	b.n	800538c <UART_SetConfig+0x418>
 8005382:	2304      	movs	r3, #4
 8005384:	e002      	b.n	800538c <UART_SetConfig+0x418>
 8005386:	2302      	movs	r3, #2
 8005388:	e000      	b.n	800538c <UART_SetConfig+0x418>
 800538a:	2301      	movs	r3, #1
 800538c:	0019      	movs	r1, r3
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7fa feb6 	bl	8000100 <__udivsi3>
 8005394:	0003      	movs	r3, r0
 8005396:	005a      	lsls	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	085b      	lsrs	r3, r3, #1
 800539e:	18d2      	adds	r2, r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	0019      	movs	r1, r3
 80053a6:	0010      	movs	r0, r2
 80053a8:	f7fa feaa 	bl	8000100 <__udivsi3>
 80053ac:	0003      	movs	r3, r0
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	617b      	str	r3, [r7, #20]
        break;
 80053b2:	e065      	b.n	8005480 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d04c      	beq.n	8005456 <UART_SetConfig+0x4e2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d045      	beq.n	8005450 <UART_SetConfig+0x4dc>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d03e      	beq.n	800544a <UART_SetConfig+0x4d6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d038      	beq.n	8005446 <UART_SetConfig+0x4d2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d031      	beq.n	8005440 <UART_SetConfig+0x4cc>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2b05      	cmp	r3, #5
 80053e2:	d02b      	beq.n	800543c <UART_SetConfig+0x4c8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	2b06      	cmp	r3, #6
 80053ea:	d025      	beq.n	8005438 <UART_SetConfig+0x4c4>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	2b07      	cmp	r3, #7
 80053f2:	d01e      	beq.n	8005432 <UART_SetConfig+0x4be>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d017      	beq.n	800542c <UART_SetConfig+0x4b8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b09      	cmp	r3, #9
 8005402:	d010      	beq.n	8005426 <UART_SetConfig+0x4b2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	2b0a      	cmp	r3, #10
 800540a:	d009      	beq.n	8005420 <UART_SetConfig+0x4ac>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2b0b      	cmp	r3, #11
 8005412:	d102      	bne.n	800541a <UART_SetConfig+0x4a6>
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	e01f      	b.n	800545a <UART_SetConfig+0x4e6>
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	025b      	lsls	r3, r3, #9
 800541e:	e01c      	b.n	800545a <UART_SetConfig+0x4e6>
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	e019      	b.n	800545a <UART_SetConfig+0x4e6>
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	e016      	b.n	800545a <UART_SetConfig+0x4e6>
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	e013      	b.n	800545a <UART_SetConfig+0x4e6>
 8005432:	2380      	movs	r3, #128	; 0x80
 8005434:	015b      	lsls	r3, r3, #5
 8005436:	e010      	b.n	800545a <UART_SetConfig+0x4e6>
 8005438:	4bb9      	ldr	r3, [pc, #740]	; (8005720 <UART_SetConfig+0x7ac>)
 800543a:	e00e      	b.n	800545a <UART_SetConfig+0x4e6>
 800543c:	4bb9      	ldr	r3, [pc, #740]	; (8005724 <UART_SetConfig+0x7b0>)
 800543e:	e00c      	b.n	800545a <UART_SetConfig+0x4e6>
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	019b      	lsls	r3, r3, #6
 8005444:	e009      	b.n	800545a <UART_SetConfig+0x4e6>
 8005446:	4bb8      	ldr	r3, [pc, #736]	; (8005728 <UART_SetConfig+0x7b4>)
 8005448:	e007      	b.n	800545a <UART_SetConfig+0x4e6>
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	01db      	lsls	r3, r3, #7
 800544e:	e004      	b.n	800545a <UART_SetConfig+0x4e6>
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	e001      	b.n	800545a <UART_SetConfig+0x4e6>
 8005456:	2380      	movs	r3, #128	; 0x80
 8005458:	025b      	lsls	r3, r3, #9
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6852      	ldr	r2, [r2, #4]
 800545e:	0852      	lsrs	r2, r2, #1
 8005460:	189a      	adds	r2, r3, r2
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	0019      	movs	r1, r3
 8005468:	0010      	movs	r0, r2
 800546a:	f7fa fe49 	bl	8000100 <__udivsi3>
 800546e:	0003      	movs	r3, r0
 8005470:	b29b      	uxth	r3, r3
 8005472:	617b      	str	r3, [r7, #20]
        break;
 8005474:	e004      	b.n	8005480 <UART_SetConfig+0x50c>
      default:
        ret = HAL_ERROR;
 8005476:	231e      	movs	r3, #30
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
        break;
 800547e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2b0f      	cmp	r3, #15
 8005484:	d91b      	bls.n	80054be <UART_SetConfig+0x54a>
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	4aa8      	ldr	r2, [pc, #672]	; (800572c <UART_SetConfig+0x7b8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d817      	bhi.n	80054be <UART_SetConfig+0x54a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	b29a      	uxth	r2, r3
 8005492:	200a      	movs	r0, #10
 8005494:	183b      	adds	r3, r7, r0
 8005496:	210f      	movs	r1, #15
 8005498:	438a      	bics	r2, r1
 800549a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2207      	movs	r2, #7
 80054a4:	4013      	ands	r3, r2
 80054a6:	b299      	uxth	r1, r3
 80054a8:	183b      	adds	r3, r7, r0
 80054aa:	183a      	adds	r2, r7, r0
 80054ac:	8812      	ldrh	r2, [r2, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	183a      	adds	r2, r7, r0
 80054b8:	8812      	ldrh	r2, [r2, #0]
 80054ba:	60da      	str	r2, [r3, #12]
 80054bc:	e1c5      	b.n	800584a <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 80054be:	231e      	movs	r3, #30
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	2201      	movs	r2, #1
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	e1c0      	b.n	800584a <UART_SetConfig+0x8d6>
    }
  }
  else
  {
    switch (clocksource)
 80054c8:	231f      	movs	r3, #31
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d100      	bne.n	80054d4 <UART_SetConfig+0x560>
 80054d2:	e06c      	b.n	80055ae <UART_SetConfig+0x63a>
 80054d4:	dc02      	bgt.n	80054dc <UART_SetConfig+0x568>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <UART_SetConfig+0x576>
 80054da:	e1a1      	b.n	8005820 <UART_SetConfig+0x8ac>
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d100      	bne.n	80054e2 <UART_SetConfig+0x56e>
 80054e0:	e0bc      	b.n	800565c <UART_SetConfig+0x6e8>
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d100      	bne.n	80054e8 <UART_SetConfig+0x574>
 80054e6:	e13b      	b.n	8005760 <UART_SetConfig+0x7ec>
 80054e8:	e19a      	b.n	8005820 <UART_SetConfig+0x8ac>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ea:	f7fe f96d 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 80054ee:	0003      	movs	r3, r0
 80054f0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d044      	beq.n	8005584 <UART_SetConfig+0x610>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d03e      	beq.n	8005580 <UART_SetConfig+0x60c>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	2b02      	cmp	r3, #2
 8005508:	d038      	beq.n	800557c <UART_SetConfig+0x608>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b03      	cmp	r3, #3
 8005510:	d032      	beq.n	8005578 <UART_SetConfig+0x604>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2b04      	cmp	r3, #4
 8005518:	d02c      	beq.n	8005574 <UART_SetConfig+0x600>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	2b05      	cmp	r3, #5
 8005520:	d026      	beq.n	8005570 <UART_SetConfig+0x5fc>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	2b06      	cmp	r3, #6
 8005528:	d020      	beq.n	800556c <UART_SetConfig+0x5f8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2b07      	cmp	r3, #7
 8005530:	d01a      	beq.n	8005568 <UART_SetConfig+0x5f4>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	2b08      	cmp	r3, #8
 8005538:	d014      	beq.n	8005564 <UART_SetConfig+0x5f0>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	2b09      	cmp	r3, #9
 8005540:	d00e      	beq.n	8005560 <UART_SetConfig+0x5ec>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2b0a      	cmp	r3, #10
 8005548:	d008      	beq.n	800555c <UART_SetConfig+0x5e8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2b0b      	cmp	r3, #11
 8005550:	d102      	bne.n	8005558 <UART_SetConfig+0x5e4>
 8005552:	2380      	movs	r3, #128	; 0x80
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	e016      	b.n	8005586 <UART_SetConfig+0x612>
 8005558:	2301      	movs	r3, #1
 800555a:	e014      	b.n	8005586 <UART_SetConfig+0x612>
 800555c:	2380      	movs	r3, #128	; 0x80
 800555e:	e012      	b.n	8005586 <UART_SetConfig+0x612>
 8005560:	2340      	movs	r3, #64	; 0x40
 8005562:	e010      	b.n	8005586 <UART_SetConfig+0x612>
 8005564:	2320      	movs	r3, #32
 8005566:	e00e      	b.n	8005586 <UART_SetConfig+0x612>
 8005568:	2310      	movs	r3, #16
 800556a:	e00c      	b.n	8005586 <UART_SetConfig+0x612>
 800556c:	230c      	movs	r3, #12
 800556e:	e00a      	b.n	8005586 <UART_SetConfig+0x612>
 8005570:	230a      	movs	r3, #10
 8005572:	e008      	b.n	8005586 <UART_SetConfig+0x612>
 8005574:	2308      	movs	r3, #8
 8005576:	e006      	b.n	8005586 <UART_SetConfig+0x612>
 8005578:	2306      	movs	r3, #6
 800557a:	e004      	b.n	8005586 <UART_SetConfig+0x612>
 800557c:	2304      	movs	r3, #4
 800557e:	e002      	b.n	8005586 <UART_SetConfig+0x612>
 8005580:	2302      	movs	r3, #2
 8005582:	e000      	b.n	8005586 <UART_SetConfig+0x612>
 8005584:	2301      	movs	r3, #1
 8005586:	0019      	movs	r1, r3
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7fa fdb9 	bl	8000100 <__udivsi3>
 800558e:	0003      	movs	r3, r0
 8005590:	001a      	movs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	18d2      	adds	r2, r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	0019      	movs	r1, r3
 80055a0:	0010      	movs	r0, r2
 80055a2:	f7fa fdad 	bl	8000100 <__udivsi3>
 80055a6:	0003      	movs	r3, r0
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	617b      	str	r3, [r7, #20]
        break;
 80055ac:	e13d      	b.n	800582a <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d043      	beq.n	800563e <UART_SetConfig+0x6ca>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d03d      	beq.n	800563a <UART_SetConfig+0x6c6>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d037      	beq.n	8005636 <UART_SetConfig+0x6c2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d031      	beq.n	8005632 <UART_SetConfig+0x6be>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d02b      	beq.n	800562e <UART_SetConfig+0x6ba>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	2b05      	cmp	r3, #5
 80055dc:	d025      	beq.n	800562a <UART_SetConfig+0x6b6>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	2b06      	cmp	r3, #6
 80055e4:	d01f      	beq.n	8005626 <UART_SetConfig+0x6b2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	2b07      	cmp	r3, #7
 80055ec:	d019      	beq.n	8005622 <UART_SetConfig+0x6ae>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d013      	beq.n	800561e <UART_SetConfig+0x6aa>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b09      	cmp	r3, #9
 80055fc:	d00d      	beq.n	800561a <UART_SetConfig+0x6a6>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	2b0a      	cmp	r3, #10
 8005604:	d007      	beq.n	8005616 <UART_SetConfig+0x6a2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	2b0b      	cmp	r3, #11
 800560c:	d101      	bne.n	8005612 <UART_SetConfig+0x69e>
 800560e:	4b48      	ldr	r3, [pc, #288]	; (8005730 <UART_SetConfig+0x7bc>)
 8005610:	e016      	b.n	8005640 <UART_SetConfig+0x6cc>
 8005612:	4b48      	ldr	r3, [pc, #288]	; (8005734 <UART_SetConfig+0x7c0>)
 8005614:	e014      	b.n	8005640 <UART_SetConfig+0x6cc>
 8005616:	4b48      	ldr	r3, [pc, #288]	; (8005738 <UART_SetConfig+0x7c4>)
 8005618:	e012      	b.n	8005640 <UART_SetConfig+0x6cc>
 800561a:	4b48      	ldr	r3, [pc, #288]	; (800573c <UART_SetConfig+0x7c8>)
 800561c:	e010      	b.n	8005640 <UART_SetConfig+0x6cc>
 800561e:	4b48      	ldr	r3, [pc, #288]	; (8005740 <UART_SetConfig+0x7cc>)
 8005620:	e00e      	b.n	8005640 <UART_SetConfig+0x6cc>
 8005622:	4b48      	ldr	r3, [pc, #288]	; (8005744 <UART_SetConfig+0x7d0>)
 8005624:	e00c      	b.n	8005640 <UART_SetConfig+0x6cc>
 8005626:	4b48      	ldr	r3, [pc, #288]	; (8005748 <UART_SetConfig+0x7d4>)
 8005628:	e00a      	b.n	8005640 <UART_SetConfig+0x6cc>
 800562a:	4b48      	ldr	r3, [pc, #288]	; (800574c <UART_SetConfig+0x7d8>)
 800562c:	e008      	b.n	8005640 <UART_SetConfig+0x6cc>
 800562e:	4b48      	ldr	r3, [pc, #288]	; (8005750 <UART_SetConfig+0x7dc>)
 8005630:	e006      	b.n	8005640 <UART_SetConfig+0x6cc>
 8005632:	4b48      	ldr	r3, [pc, #288]	; (8005754 <UART_SetConfig+0x7e0>)
 8005634:	e004      	b.n	8005640 <UART_SetConfig+0x6cc>
 8005636:	4b48      	ldr	r3, [pc, #288]	; (8005758 <UART_SetConfig+0x7e4>)
 8005638:	e002      	b.n	8005640 <UART_SetConfig+0x6cc>
 800563a:	4b48      	ldr	r3, [pc, #288]	; (800575c <UART_SetConfig+0x7e8>)
 800563c:	e000      	b.n	8005640 <UART_SetConfig+0x6cc>
 800563e:	4b3d      	ldr	r3, [pc, #244]	; (8005734 <UART_SetConfig+0x7c0>)
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6852      	ldr	r2, [r2, #4]
 8005644:	0852      	lsrs	r2, r2, #1
 8005646:	189a      	adds	r2, r3, r2
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	0019      	movs	r1, r3
 800564e:	0010      	movs	r0, r2
 8005650:	f7fa fd56 	bl	8000100 <__udivsi3>
 8005654:	0003      	movs	r3, r0
 8005656:	b29b      	uxth	r3, r3
 8005658:	617b      	str	r3, [r7, #20]
        break;
 800565a:	e0e6      	b.n	800582a <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565c:	f7fe f828 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8005660:	0003      	movs	r3, r0
 8005662:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	2b00      	cmp	r3, #0
 800566a:	d044      	beq.n	80056f6 <UART_SetConfig+0x782>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2b01      	cmp	r3, #1
 8005672:	d03e      	beq.n	80056f2 <UART_SetConfig+0x77e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	2b02      	cmp	r3, #2
 800567a:	d038      	beq.n	80056ee <UART_SetConfig+0x77a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2b03      	cmp	r3, #3
 8005682:	d032      	beq.n	80056ea <UART_SetConfig+0x776>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b04      	cmp	r3, #4
 800568a:	d02c      	beq.n	80056e6 <UART_SetConfig+0x772>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2b05      	cmp	r3, #5
 8005692:	d026      	beq.n	80056e2 <UART_SetConfig+0x76e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	2b06      	cmp	r3, #6
 800569a:	d020      	beq.n	80056de <UART_SetConfig+0x76a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	2b07      	cmp	r3, #7
 80056a2:	d01a      	beq.n	80056da <UART_SetConfig+0x766>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d014      	beq.n	80056d6 <UART_SetConfig+0x762>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	2b09      	cmp	r3, #9
 80056b2:	d00e      	beq.n	80056d2 <UART_SetConfig+0x75e>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	2b0a      	cmp	r3, #10
 80056ba:	d008      	beq.n	80056ce <UART_SetConfig+0x75a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	2b0b      	cmp	r3, #11
 80056c2:	d102      	bne.n	80056ca <UART_SetConfig+0x756>
 80056c4:	2380      	movs	r3, #128	; 0x80
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	e016      	b.n	80056f8 <UART_SetConfig+0x784>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e014      	b.n	80056f8 <UART_SetConfig+0x784>
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	e012      	b.n	80056f8 <UART_SetConfig+0x784>
 80056d2:	2340      	movs	r3, #64	; 0x40
 80056d4:	e010      	b.n	80056f8 <UART_SetConfig+0x784>
 80056d6:	2320      	movs	r3, #32
 80056d8:	e00e      	b.n	80056f8 <UART_SetConfig+0x784>
 80056da:	2310      	movs	r3, #16
 80056dc:	e00c      	b.n	80056f8 <UART_SetConfig+0x784>
 80056de:	230c      	movs	r3, #12
 80056e0:	e00a      	b.n	80056f8 <UART_SetConfig+0x784>
 80056e2:	230a      	movs	r3, #10
 80056e4:	e008      	b.n	80056f8 <UART_SetConfig+0x784>
 80056e6:	2308      	movs	r3, #8
 80056e8:	e006      	b.n	80056f8 <UART_SetConfig+0x784>
 80056ea:	2306      	movs	r3, #6
 80056ec:	e004      	b.n	80056f8 <UART_SetConfig+0x784>
 80056ee:	2304      	movs	r3, #4
 80056f0:	e002      	b.n	80056f8 <UART_SetConfig+0x784>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e000      	b.n	80056f8 <UART_SetConfig+0x784>
 80056f6:	2301      	movs	r3, #1
 80056f8:	0019      	movs	r1, r3
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7fa fd00 	bl	8000100 <__udivsi3>
 8005700:	0003      	movs	r3, r0
 8005702:	001a      	movs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	18d2      	adds	r2, r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	0019      	movs	r1, r3
 8005712:	0010      	movs	r0, r2
 8005714:	f7fa fcf4 	bl	8000100 <__udivsi3>
 8005718:	0003      	movs	r3, r0
 800571a:	b29b      	uxth	r3, r3
 800571c:	617b      	str	r3, [r7, #20]
        break;
 800571e:	e084      	b.n	800582a <UART_SetConfig+0x8b6>
 8005720:	00001554 	.word	0x00001554
 8005724:	00001998 	.word	0x00001998
 8005728:	00002aaa 	.word	0x00002aaa
 800572c:	0000ffff 	.word	0x0000ffff
 8005730:	0000f424 	.word	0x0000f424
 8005734:	00f42400 	.word	0x00f42400
 8005738:	0001e848 	.word	0x0001e848
 800573c:	0003d090 	.word	0x0003d090
 8005740:	0007a120 	.word	0x0007a120
 8005744:	000f4240 	.word	0x000f4240
 8005748:	00145855 	.word	0x00145855
 800574c:	00186a00 	.word	0x00186a00
 8005750:	001e8480 	.word	0x001e8480
 8005754:	0028b0aa 	.word	0x0028b0aa
 8005758:	003d0900 	.word	0x003d0900
 800575c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2b00      	cmp	r3, #0
 8005766:	d04b      	beq.n	8005800 <UART_SetConfig+0x88c>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	2b01      	cmp	r3, #1
 800576e:	d044      	beq.n	80057fa <UART_SetConfig+0x886>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	2b02      	cmp	r3, #2
 8005776:	d03d      	beq.n	80057f4 <UART_SetConfig+0x880>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	2b03      	cmp	r3, #3
 800577e:	d037      	beq.n	80057f0 <UART_SetConfig+0x87c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	2b04      	cmp	r3, #4
 8005786:	d030      	beq.n	80057ea <UART_SetConfig+0x876>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	2b05      	cmp	r3, #5
 800578e:	d02a      	beq.n	80057e6 <UART_SetConfig+0x872>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	2b06      	cmp	r3, #6
 8005796:	d024      	beq.n	80057e2 <UART_SetConfig+0x86e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	2b07      	cmp	r3, #7
 800579e:	d01d      	beq.n	80057dc <UART_SetConfig+0x868>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d016      	beq.n	80057d6 <UART_SetConfig+0x862>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b09      	cmp	r3, #9
 80057ae:	d00f      	beq.n	80057d0 <UART_SetConfig+0x85c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	2b0a      	cmp	r3, #10
 80057b6:	d008      	beq.n	80057ca <UART_SetConfig+0x856>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	2b0b      	cmp	r3, #11
 80057be:	d101      	bne.n	80057c4 <UART_SetConfig+0x850>
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	e01f      	b.n	8005804 <UART_SetConfig+0x890>
 80057c4:	2380      	movs	r3, #128	; 0x80
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	e01c      	b.n	8005804 <UART_SetConfig+0x890>
 80057ca:	2380      	movs	r3, #128	; 0x80
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	e019      	b.n	8005804 <UART_SetConfig+0x890>
 80057d0:	2380      	movs	r3, #128	; 0x80
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	e016      	b.n	8005804 <UART_SetConfig+0x890>
 80057d6:	2380      	movs	r3, #128	; 0x80
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	e013      	b.n	8005804 <UART_SetConfig+0x890>
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	e010      	b.n	8005804 <UART_SetConfig+0x890>
 80057e2:	4b24      	ldr	r3, [pc, #144]	; (8005874 <UART_SetConfig+0x900>)
 80057e4:	e00e      	b.n	8005804 <UART_SetConfig+0x890>
 80057e6:	4b24      	ldr	r3, [pc, #144]	; (8005878 <UART_SetConfig+0x904>)
 80057e8:	e00c      	b.n	8005804 <UART_SetConfig+0x890>
 80057ea:	2380      	movs	r3, #128	; 0x80
 80057ec:	015b      	lsls	r3, r3, #5
 80057ee:	e009      	b.n	8005804 <UART_SetConfig+0x890>
 80057f0:	4b22      	ldr	r3, [pc, #136]	; (800587c <UART_SetConfig+0x908>)
 80057f2:	e007      	b.n	8005804 <UART_SetConfig+0x890>
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	019b      	lsls	r3, r3, #6
 80057f8:	e004      	b.n	8005804 <UART_SetConfig+0x890>
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	01db      	lsls	r3, r3, #7
 80057fe:	e001      	b.n	8005804 <UART_SetConfig+0x890>
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6852      	ldr	r2, [r2, #4]
 8005808:	0852      	lsrs	r2, r2, #1
 800580a:	189a      	adds	r2, r3, r2
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	0019      	movs	r1, r3
 8005812:	0010      	movs	r0, r2
 8005814:	f7fa fc74 	bl	8000100 <__udivsi3>
 8005818:	0003      	movs	r3, r0
 800581a:	b29b      	uxth	r3, r3
 800581c:	617b      	str	r3, [r7, #20]
        break;
 800581e:	e004      	b.n	800582a <UART_SetConfig+0x8b6>
      default:
        ret = HAL_ERROR;
 8005820:	231e      	movs	r3, #30
 8005822:	18fb      	adds	r3, r7, r3
 8005824:	2201      	movs	r2, #1
 8005826:	701a      	strb	r2, [r3, #0]
        break;
 8005828:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b0f      	cmp	r3, #15
 800582e:	d908      	bls.n	8005842 <UART_SetConfig+0x8ce>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	4a13      	ldr	r2, [pc, #76]	; (8005880 <UART_SetConfig+0x90c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d804      	bhi.n	8005842 <UART_SetConfig+0x8ce>
    {
      huart->Instance->BRR = usartdiv;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	e003      	b.n	800584a <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 8005842:	231e      	movs	r3, #30
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	226a      	movs	r2, #106	; 0x6a
 800584e:	2101      	movs	r1, #1
 8005850:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2268      	movs	r2, #104	; 0x68
 8005856:	2101      	movs	r1, #1
 8005858:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005866:	231e      	movs	r3, #30
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	781b      	ldrb	r3, [r3, #0]
}
 800586c:	0018      	movs	r0, r3
 800586e:	46bd      	mov	sp, r7
 8005870:	b008      	add	sp, #32
 8005872:	bd80      	pop	{r7, pc}
 8005874:	00000aaa 	.word	0x00000aaa
 8005878:	00000ccc 	.word	0x00000ccc
 800587c:	00001555 	.word	0x00001555
 8005880:	0000ffff 	.word	0x0000ffff

08005884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	2201      	movs	r2, #1
 8005892:	4013      	ands	r3, r2
 8005894:	d00b      	beq.n	80058ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	4a4a      	ldr	r2, [pc, #296]	; (80059c8 <UART_AdvFeatureConfig+0x144>)
 800589e:	4013      	ands	r3, r2
 80058a0:	0019      	movs	r1, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	2202      	movs	r2, #2
 80058b4:	4013      	ands	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4a43      	ldr	r2, [pc, #268]	; (80059cc <UART_AdvFeatureConfig+0x148>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	0019      	movs	r1, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	2204      	movs	r2, #4
 80058d6:	4013      	ands	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	4a3b      	ldr	r2, [pc, #236]	; (80059d0 <UART_AdvFeatureConfig+0x14c>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	0019      	movs	r1, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	2208      	movs	r2, #8
 80058f8:	4013      	ands	r3, r2
 80058fa:	d00b      	beq.n	8005914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4a34      	ldr	r2, [pc, #208]	; (80059d4 <UART_AdvFeatureConfig+0x150>)
 8005904:	4013      	ands	r3, r2
 8005906:	0019      	movs	r1, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	2210      	movs	r2, #16
 800591a:	4013      	ands	r3, r2
 800591c:	d00b      	beq.n	8005936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4a2c      	ldr	r2, [pc, #176]	; (80059d8 <UART_AdvFeatureConfig+0x154>)
 8005926:	4013      	ands	r3, r2
 8005928:	0019      	movs	r1, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	2220      	movs	r2, #32
 800593c:	4013      	ands	r3, r2
 800593e:	d00b      	beq.n	8005958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	4a25      	ldr	r2, [pc, #148]	; (80059dc <UART_AdvFeatureConfig+0x158>)
 8005948:	4013      	ands	r3, r2
 800594a:	0019      	movs	r1, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	2240      	movs	r2, #64	; 0x40
 800595e:	4013      	ands	r3, r2
 8005960:	d01d      	beq.n	800599e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4a1d      	ldr	r2, [pc, #116]	; (80059e0 <UART_AdvFeatureConfig+0x15c>)
 800596a:	4013      	ands	r3, r2
 800596c:	0019      	movs	r1, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800597e:	2380      	movs	r3, #128	; 0x80
 8005980:	035b      	lsls	r3, r3, #13
 8005982:	429a      	cmp	r2, r3
 8005984:	d10b      	bne.n	800599e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <UART_AdvFeatureConfig+0x160>)
 800598e:	4013      	ands	r3, r2
 8005990:	0019      	movs	r1, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	2280      	movs	r2, #128	; 0x80
 80059a4:	4013      	ands	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	4a0e      	ldr	r2, [pc, #56]	; (80059e8 <UART_AdvFeatureConfig+0x164>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	0019      	movs	r1, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  }
}
 80059c0:	46c0      	nop			; (mov r8, r8)
 80059c2:	46bd      	mov	sp, r7
 80059c4:	b002      	add	sp, #8
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	fffdffff 	.word	0xfffdffff
 80059cc:	fffeffff 	.word	0xfffeffff
 80059d0:	fffbffff 	.word	0xfffbffff
 80059d4:	ffff7fff 	.word	0xffff7fff
 80059d8:	ffffefff 	.word	0xffffefff
 80059dc:	ffffdfff 	.word	0xffffdfff
 80059e0:	ffefffff 	.word	0xffefffff
 80059e4:	ff9fffff 	.word	0xff9fffff
 80059e8:	fff7ffff 	.word	0xfff7ffff

080059ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2288      	movs	r2, #136	; 0x88
 80059f8:	2100      	movs	r1, #0
 80059fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80059fc:	f7fb fb8e 	bl	800111c <HAL_GetTick>
 8005a00:	0003      	movs	r3, r0
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2208      	movs	r2, #8
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d10d      	bne.n	8005a2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	0399      	lsls	r1, r3, #14
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4b18      	ldr	r3, [pc, #96]	; (8005a7c <UART_CheckIdleState+0x90>)
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	0013      	movs	r3, r2
 8005a20:	2200      	movs	r2, #0
 8005a22:	f000 f82d 	bl	8005a80 <UART_WaitOnFlagUntilTimeout>
 8005a26:	1e03      	subs	r3, r0, #0
 8005a28:	d001      	beq.n	8005a2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e021      	b.n	8005a72 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2204      	movs	r2, #4
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d10d      	bne.n	8005a58 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	2380      	movs	r3, #128	; 0x80
 8005a40:	03d9      	lsls	r1, r3, #15
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <UART_CheckIdleState+0x90>)
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	0013      	movs	r3, r2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f000 f818 	bl	8005a80 <UART_WaitOnFlagUntilTimeout>
 8005a50:	1e03      	subs	r3, r0, #0
 8005a52:	d001      	beq.n	8005a58 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e00c      	b.n	8005a72 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2280      	movs	r2, #128	; 0x80
 8005a5c:	2120      	movs	r1, #32
 8005a5e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2284      	movs	r2, #132	; 0x84
 8005a64:	2120      	movs	r1, #32
 8005a66:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	227c      	movs	r2, #124	; 0x7c
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	0018      	movs	r0, r3
 8005a74:	46bd      	mov	sp, r7
 8005a76:	b004      	add	sp, #16
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	01ffffff 	.word	0x01ffffff

08005a80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	1dfb      	adds	r3, r7, #7
 8005a8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a90:	e02b      	b.n	8005aea <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	3301      	adds	r3, #1
 8005a96:	d028      	beq.n	8005aea <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a98:	f7fb fb40 	bl	800111c <HAL_GetTick>
 8005a9c:	0002      	movs	r2, r0
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d302      	bcc.n	8005aae <UART_WaitOnFlagUntilTimeout+0x2e>
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11d      	bne.n	8005aea <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4916      	ldr	r1, [pc, #88]	; (8005b14 <UART_WaitOnFlagUntilTimeout+0x94>)
 8005aba:	400a      	ands	r2, r1
 8005abc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2101      	movs	r1, #1
 8005aca:	438a      	bics	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2280      	movs	r2, #128	; 0x80
 8005ad2:	2120      	movs	r1, #32
 8005ad4:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2284      	movs	r2, #132	; 0x84
 8005ada:	2120      	movs	r1, #32
 8005adc:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	227c      	movs	r2, #124	; 0x7c
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e00f      	b.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	4013      	ands	r3, r2
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	425a      	negs	r2, r3
 8005afa:	4153      	adcs	r3, r2
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	001a      	movs	r2, r3
 8005b00:	1dfb      	adds	r3, r7, #7
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d0c4      	beq.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b004      	add	sp, #16
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	fffffe5f 	.word	0xfffffe5f

08005b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	490b      	ldr	r1, [pc, #44]	; (8005b58 <UART_EndRxTransfer+0x40>)
 8005b2c:	400a      	ands	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4908      	ldr	r1, [pc, #32]	; (8005b5c <UART_EndRxTransfer+0x44>)
 8005b3c:	400a      	ands	r2, r1
 8005b3e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2284      	movs	r2, #132	; 0x84
 8005b44:	2120      	movs	r1, #32
 8005b46:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b002      	add	sp, #8
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	fffffedf 	.word	0xfffffedf
 8005b5c:	effffffe 	.word	0xeffffffe

08005b60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	225e      	movs	r2, #94	; 0x5e
 8005b72:	2100      	movs	r1, #0
 8005b74:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2256      	movs	r2, #86	; 0x56
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f7ff f9ef 	bl	8004f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	b004      	add	sp, #16
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2140      	movs	r1, #64	; 0x40
 8005ba2:	438a      	bics	r2, r1
 8005ba4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2280      	movs	r2, #128	; 0x80
 8005baa:	2120      	movs	r1, #32
 8005bac:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f7ff f9cc 	bl	8004f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bbc:	46c0      	nop			; (mov r8, r8)
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	b002      	add	sp, #8
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bcc:	46c0      	nop			; (mov r8, r8)
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b002      	add	sp, #8
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005bdc:	46c0      	nop			; (mov r8, r8)
 8005bde:	46bd      	mov	sp, r7
 8005be0:	b002      	add	sp, #8
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005bec:	46c0      	nop			; (mov r8, r8)
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b002      	add	sp, #8
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	227c      	movs	r2, #124	; 0x7c
 8005c00:	5c9b      	ldrb	r3, [r3, r2]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_UARTEx_DisableFifoMode+0x16>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e027      	b.n	8005c5a <HAL_UARTEx_DisableFifoMode+0x66>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	227c      	movs	r2, #124	; 0x7c
 8005c0e:	2101      	movs	r1, #1
 8005c10:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2280      	movs	r2, #128	; 0x80
 8005c16:	2124      	movs	r1, #36	; 0x24
 8005c18:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	438a      	bics	r2, r1
 8005c30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4a0b      	ldr	r2, [pc, #44]	; (8005c64 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2280      	movs	r2, #128	; 0x80
 8005c4c:	2120      	movs	r1, #32
 8005c4e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	227c      	movs	r2, #124	; 0x7c
 8005c54:	2100      	movs	r1, #0
 8005c56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	b004      	add	sp, #16
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	dfffffff 	.word	0xdfffffff

08005c68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	227c      	movs	r2, #124	; 0x7c
 8005c76:	5c9b      	ldrb	r3, [r3, r2]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e02e      	b.n	8005cde <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	227c      	movs	r2, #124	; 0x7c
 8005c84:	2101      	movs	r1, #1
 8005c86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2280      	movs	r2, #128	; 0x80
 8005c8c:	2124      	movs	r1, #36	; 0x24
 8005c8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	438a      	bics	r2, r1
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	08d9      	lsrs	r1, r3, #3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f000 f854 	bl	8005d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2280      	movs	r2, #128	; 0x80
 8005cd0:	2120      	movs	r1, #32
 8005cd2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	227c      	movs	r2, #124	; 0x7c
 8005cd8:	2100      	movs	r1, #0
 8005cda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	0018      	movs	r0, r3
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	b004      	add	sp, #16
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	227c      	movs	r2, #124	; 0x7c
 8005cf6:	5c9b      	ldrb	r3, [r3, r2]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e02f      	b.n	8005d60 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	227c      	movs	r2, #124	; 0x7c
 8005d04:	2101      	movs	r1, #1
 8005d06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	2124      	movs	r1, #36	; 0x24
 8005d0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2101      	movs	r1, #1
 8005d24:	438a      	bics	r2, r1
 8005d26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	4a0e      	ldr	r2, [pc, #56]	; (8005d68 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	0019      	movs	r1, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f000 f813 	bl	8005d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2280      	movs	r2, #128	; 0x80
 8005d52:	2120      	movs	r1, #32
 8005d54:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	227c      	movs	r2, #124	; 0x7c
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	0018      	movs	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b004      	add	sp, #16
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	f1ffffff 	.word	0xf1ffffff

08005d6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d6e:	b089      	sub	sp, #36	; 0x24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005d74:	2314      	movs	r3, #20
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	4a2f      	ldr	r2, [pc, #188]	; (8005e38 <UARTEx_SetNbDataToProcess+0xcc>)
 8005d7a:	ca03      	ldmia	r2!, {r0, r1}
 8005d7c:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005d7e:	230c      	movs	r3, #12
 8005d80:	18fb      	adds	r3, r7, r3
 8005d82:	4a2e      	ldr	r2, [pc, #184]	; (8005e3c <UARTEx_SetNbDataToProcess+0xd0>)
 8005d84:	ca03      	ldmia	r2!, {r0, r1}
 8005d86:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d108      	bne.n	8005da2 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	226a      	movs	r2, #106	; 0x6a
 8005d94:	2101      	movs	r1, #1
 8005d96:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2268      	movs	r2, #104	; 0x68
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005da0:	e046      	b.n	8005e30 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005da2:	261f      	movs	r6, #31
 8005da4:	19bb      	adds	r3, r7, r6
 8005da6:	2208      	movs	r2, #8
 8005da8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005daa:	201e      	movs	r0, #30
 8005dac:	183b      	adds	r3, r7, r0
 8005dae:	2208      	movs	r2, #8
 8005db0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	0e5b      	lsrs	r3, r3, #25
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	241d      	movs	r4, #29
 8005dbe:	193b      	adds	r3, r7, r4
 8005dc0:	2107      	movs	r1, #7
 8005dc2:	400a      	ands	r2, r1
 8005dc4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	0f5b      	lsrs	r3, r3, #29
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	251c      	movs	r5, #28
 8005dd2:	197b      	adds	r3, r7, r5
 8005dd4:	2107      	movs	r1, #7
 8005dd6:	400a      	ands	r2, r1
 8005dd8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005dda:	183b      	adds	r3, r7, r0
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	197a      	adds	r2, r7, r5
 8005de0:	7812      	ldrb	r2, [r2, #0]
 8005de2:	2114      	movs	r1, #20
 8005de4:	1879      	adds	r1, r7, r1
 8005de6:	5c8a      	ldrb	r2, [r1, r2]
 8005de8:	435a      	muls	r2, r3
 8005dea:	0010      	movs	r0, r2
 8005dec:	197b      	adds	r3, r7, r5
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	250c      	movs	r5, #12
 8005df2:	197a      	adds	r2, r7, r5
 8005df4:	5cd3      	ldrb	r3, [r2, r3]
 8005df6:	0019      	movs	r1, r3
 8005df8:	f7fa fa0c 	bl	8000214 <__divsi3>
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	b299      	uxth	r1, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	226a      	movs	r2, #106	; 0x6a
 8005e04:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005e06:	19bb      	adds	r3, r7, r6
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	193a      	adds	r2, r7, r4
 8005e0c:	7812      	ldrb	r2, [r2, #0]
 8005e0e:	2114      	movs	r1, #20
 8005e10:	1879      	adds	r1, r7, r1
 8005e12:	5c8a      	ldrb	r2, [r1, r2]
 8005e14:	435a      	muls	r2, r3
 8005e16:	0010      	movs	r0, r2
 8005e18:	193b      	adds	r3, r7, r4
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	197a      	adds	r2, r7, r5
 8005e1e:	5cd3      	ldrb	r3, [r2, r3]
 8005e20:	0019      	movs	r1, r3
 8005e22:	f7fa f9f7 	bl	8000214 <__divsi3>
 8005e26:	0003      	movs	r3, r0
 8005e28:	b299      	uxth	r1, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2268      	movs	r2, #104	; 0x68
 8005e2e:	5299      	strh	r1, [r3, r2]
}
 8005e30:	46c0      	nop			; (mov r8, r8)
 8005e32:	46bd      	mov	sp, r7
 8005e34:	b009      	add	sp, #36	; 0x24
 8005e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e38:	08005eb0 	.word	0x08005eb0
 8005e3c:	08005eb8 	.word	0x08005eb8

08005e40 <__libc_init_array>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	2600      	movs	r6, #0
 8005e44:	4d0c      	ldr	r5, [pc, #48]	; (8005e78 <__libc_init_array+0x38>)
 8005e46:	4c0d      	ldr	r4, [pc, #52]	; (8005e7c <__libc_init_array+0x3c>)
 8005e48:	1b64      	subs	r4, r4, r5
 8005e4a:	10a4      	asrs	r4, r4, #2
 8005e4c:	42a6      	cmp	r6, r4
 8005e4e:	d109      	bne.n	8005e64 <__libc_init_array+0x24>
 8005e50:	2600      	movs	r6, #0
 8005e52:	f000 f821 	bl	8005e98 <_init>
 8005e56:	4d0a      	ldr	r5, [pc, #40]	; (8005e80 <__libc_init_array+0x40>)
 8005e58:	4c0a      	ldr	r4, [pc, #40]	; (8005e84 <__libc_init_array+0x44>)
 8005e5a:	1b64      	subs	r4, r4, r5
 8005e5c:	10a4      	asrs	r4, r4, #2
 8005e5e:	42a6      	cmp	r6, r4
 8005e60:	d105      	bne.n	8005e6e <__libc_init_array+0x2e>
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	00b3      	lsls	r3, r6, #2
 8005e66:	58eb      	ldr	r3, [r5, r3]
 8005e68:	4798      	blx	r3
 8005e6a:	3601      	adds	r6, #1
 8005e6c:	e7ee      	b.n	8005e4c <__libc_init_array+0xc>
 8005e6e:	00b3      	lsls	r3, r6, #2
 8005e70:	58eb      	ldr	r3, [r5, r3]
 8005e72:	4798      	blx	r3
 8005e74:	3601      	adds	r6, #1
 8005e76:	e7f2      	b.n	8005e5e <__libc_init_array+0x1e>
 8005e78:	08005f74 	.word	0x08005f74
 8005e7c:	08005f74 	.word	0x08005f74
 8005e80:	08005f74 	.word	0x08005f74
 8005e84:	08005f78 	.word	0x08005f78

08005e88 <memset>:
 8005e88:	0003      	movs	r3, r0
 8005e8a:	1812      	adds	r2, r2, r0
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d100      	bne.n	8005e92 <memset+0xa>
 8005e90:	4770      	bx	lr
 8005e92:	7019      	strb	r1, [r3, #0]
 8005e94:	3301      	adds	r3, #1
 8005e96:	e7f9      	b.n	8005e8c <memset+0x4>

08005e98 <_init>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr

08005ea4 <_fini>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr
